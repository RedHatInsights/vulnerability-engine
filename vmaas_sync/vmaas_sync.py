"""VMaaS websocket listener module."""

import os

from prometheus_client import Counter, start_http_server
from tornado.ioloop import IOLoop, PeriodicCallback
from tornado.web import Application, RequestHandler
from tornado.websocket import websocket_connect

from common.logging import init_logging, get_logger
from common import mqueue

WEBSOCKET_RECONNECT_INTERVAL = 60
LOGGER = get_logger(__name__)

PROMETHEUS_PORT = os.getenv('PROMETHEUS_PORT', '8086')

CANNOT_CNX = Counter('ve_listener_vmaas_cannot_cnx', '# of times failed to connect to VMaaS')
REFRESH = Counter('ve_listener_vmaas_webscan_refreshes', '# of times VMaaS told us it had new data')
CNX_FAIL = Counter('ve_listener_vmaas_websocket_failures', '# of times VMaaS websocket closed on us')
CNX_RECONNECT = Counter('ve_listener_vmaas_websocket_recnx', '# of times attempted VMaaS websocket reconnect')


class HealthHandler(RequestHandler):
    """Handler class providing health status."""
    def data_received(self, chunk):
        pass

    def get(self):
        """Answer GET request."""
        self.finish()


class ServerApplication(Application):
    """Websocket client application."""
    def __init__(self):
        handlers = [
            (r"/api/v1/monitoring/health/?", HealthHandler),
        ]
        Application.__init__(self, handlers)
        self.instance = IOLoop.instance()
        self.vmaas_websocket_url = "ws://%s/" % os.getenv("VMAAS_WEBSOCKET_HOST", "vmaas_websocket:8082")
        self.vmaas_websocket = None
        self.reconnect_callback = None
        self.vuln_queue = mqueue.MQWriter(mqueue.EVALUATOR_TOPIC)

    def start(self):
        """Start websocket server."""
        self._websocket_reconnect()
        self.reconnect_callback = PeriodicCallback(self._websocket_reconnect,
                                                   WEBSOCKET_RECONNECT_INTERVAL * 1000)
        self.reconnect_callback.start()
        self.instance.start()

    def _websocket_reconnect(self):
        """Connect to given websocket, set message handler and callback."""
        if self.vmaas_websocket is None:
            CNX_RECONNECT.inc()
            websocket_connect(self.vmaas_websocket_url,
                              on_message_callback=self._read_websocket_message,
                              callback=self._websocket_connect_status)

    def _websocket_connect_status(self, future):
        """Check if connection attempt succeeded."""
        try:
            result = future.result()
        except: # pylint: disable=bare-except
            result = None

        if result is None:
            # TODO: print the traceback as debug message when we use logging module instead of prints here
            CNX_FAIL.inc()
            LOGGER.warning("Unable to connect to: %s", self.vmaas_websocket_url)
        else:
            LOGGER.info("Connected to: %s", self.vmaas_websocket_url)
            result.write_message("subscribe-listener")

        self.vmaas_websocket = result

    def _read_websocket_message(self, message):
        """Read incoming websocket messages."""
        if message is not None:
            if message == "webapps-refreshed":
                REFRESH.inc()
                LOGGER.warning("ALL WEBAPPS REFRESHED CACHE !!!")
                # TODO: write a message to the queue here
                self.vuln_queue.send({"type": "vmaas_updates"})
        else:
            CNX_FAIL.inc()
            LOGGER.warning("Connection to %s closed: %s (%s)", self.vmaas_websocket_url,
                           self.vmaas_websocket.close_reason, self.vmaas_websocket.close_code)
            self.vmaas_websocket = None

def main():
    """Main VMaaS listener entrypoint."""
    start_http_server(int(PROMETHEUS_PORT))
    init_logging()
    LOGGER.info("Starting vmaas listener.")
    app = ServerApplication()
    app.listen(8000)
    app.start()


if __name__ == '__main__':
    main()
