#!/usr/bin/env python3
"""
Register messages to webhooks
"""

import os
import requests

from common.logging import get_logger


LOGGER = get_logger(__name__)

WEBHOOKS_URL = os.getenv('WEBHOOKS_URL')


def register_webhooks(payload):
    """Register to webhook service"""
    if WEBHOOKS_URL is None:
        LOGGER.warning('No registration URL provided, skipping.')
        return 1

    headers = {'Content-Type': 'application/vnd.api+json'}
    try:
        response = requests.post(WEBHOOKS_URL, json=payload, headers=headers)
    except Exception as exc:  # pylint: disable=broad-except
        LOGGER.error('Failed to register hooks, request failed with error\n%s', exc)
        return 1

    if response.status_code != 200:
        LOGGER.error('Failed with %s status code.\nMessage: %s', response.status_code, response.text)
        return 1
    LOGGER.info('Webhook setup done.')
    return 0


def main():
    """Webhook registration"""
    cvss_levels = [
        {'id': '0to3', 'title': '0.0 - 2.9'},
        {'id': '3to7', 'title': '3.0 - 6.9'},
        {'id': '7to10', 'title': '7.0 - 10.0'},
    ]
    payload = {
        'application': {
            'name': 'vulnerability',
            'title': 'Vulnerability',
        },
        'event_types': [
            {
                'id': 'new-cve',
                'title': 'New cve discovered',
                'levels': cvss_levels,
            },
            {
                'id': 'new-host-cve',
                'title': 'New cve discovered for host',
                'levels': cvss_levels,
            },
        ]
    }
    register_webhooks(payload)


if __name__ == '__main__':
    main()
