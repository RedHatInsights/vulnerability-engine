#!/bin/sh

public_port () {
    python3 -c "import app_common_python as a;print(a.LoadedConfig.publicPort or 8000)"
}

metrics_port () {
    python3 -c "import app_common_python as a;print(a.LoadedConfig.metricsPort or 9000)"
}

cd $(dirname $0)

if [[ ! -z $1 ]]; then
    if [[ "$1" == "listener" ]]; then
        exec python3 -m listener.upload_listener
    elif [[ "$1" == "evaluator" ]]; then
        exec python3 -m evaluator.evaluator 
    elif [[ "$1" == "vmaas-sync" ]]; then
        exec python3 -m vmaas_sync.vmaas_sync
    elif [[ "$1" == "manager" ]]; then
        exec gunicorn -c manager/gunicorn_conf.py -w ${GUNICORN_WORKERS:-4} --bind=0.0.0.0:$(public_port) --bind=0.0.0.0:$(metrics_port) --timeout=60 --limit-request-field_size=65535 manager.main
    elif [[ "$1" == "manager-dev" ]]; then
        exec gunicorn --reload -c manager/gunicorn_conf.py -w ${GUNICORN_WORKERS:-4} --bind=0.0.0.0:$(public_port) --bind=0.0.0.0:$(metrics_port) --timeout=60 --limit-request-field_size=65535 manager.main
    elif [[ "$1" == "manager-admin" ]]; then
        exec gunicorn -c manager/gunicorn_conf.py -w ${GUNICORN_WORKERS:-4} --bind=0.0.0.0:$(public_port) --bind=0.0.0.0:$(metrics_port) --timeout=60 --limit-request-field_size=65535 manager.admin
    elif [[ "$1" == "advisor-listener" ]]; then
        exec python3 -m advisor_listener.advisor_listener
    elif [[ "$1" == "taskomatic" ]]; then
        exec python3 -m taskomatic.taskomatic
    elif [[ "$1" == "notificator" ]]; then
        exec python3 -m notificator.notificator
    elif [[ "$1" == "exploit-sync" ]]; then
        exec python3 -m exploit_sync.exploit_sync
    elif [[ "$1" == "grouper" ]]; then
        exec python3 -m grouper.grouper
    elif [[ "$1" == "listener-new" ]]; then
        exec python3 -m listener.listener
    elif [[ "$1" == "evaluator-new" ]]; then
        exec python3 -m evaluator.evaluator2
    elif [[ "$1" == "cluster" ]]; then
        exec python3 -m cluster.cluster
    fi
fi

echo "Please specify service name as the first argument."
