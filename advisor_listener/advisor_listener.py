"""Rules engine results listener"""
import asyncio
from datetime import datetime, timedelta
import json
from os import getenv
import signal

from prometheus_client import Counter, start_http_server
import pytz

from common import mqueue
from common.bounded_executor import BoundedExecutor
from common.database_handler import DatabaseError, DatabasePool, DatabasePoolConnection
from common.identity import get_identity, is_entitled_smart_management
from common.logging import init_logging, get_logger

LOGGER = get_logger(__name__)

PROMETHEUS_PORT = getenv('PROMETHEUS_PORT', '8086')
WORKER_THREADS = int(getenv('WORKER_THREADS', '30'))
MAX_QUEUE_SIZE = int(getenv('MAX_QUEUE_SIZE', '30'))
SYSTEM_DELETION_THRESHOLD = int(getenv('SYSTEM_DELETION_THRESHOLD', '24'))  # 24 hours

PROCESS_MESSAGES = Counter('ve_advisor_listener_messages_processed', '# of messages processed')
NEW_SYSTEM = Counter('ve_advisor_listener_upl_new_system', '# of new systems inserted by advisor')
UPDATE_SYSTEM = Counter('ve_advisor_listener_upl_update_system', '# of systems updated')
UNCHANGED_SYSTEM = Counter('ve_advisor_listener_upl_unchanged_system', '# of system-updates with same rules hit')
MESSAGE_PARSE_ERROR = Counter('ve_advisor_listener_message_parse_error', '# of message parse errors')
INVALID_IDENTITY = Counter('ve_advisor_listener_invalid_identity', '# of skipped uploads because of invalid identity')
MISSING_SMART_MANAGEMENT = Counter('ve_advisor_listener_non_smart_management', '# of skipped uploads because of entitlement check')
DATABASE_ERROR = Counter('ve_advisor_listener_database_error', '# of database errors')
DELETED_UPLOADED = Counter('ve_advisor_listener_deleted_uploaded', '# of systems uploaded after being deleted')
NEW_RH_ACCOUNT = Counter('ve_advisor_listener_upl_new_rh_account', '# of new rh accounts inserted')


ADVISOR_QUEUE = mqueue.MQReader([mqueue.ADVISOR_RESULTS_TOPIC])

RULE_BLACKLIST = ['CVE_2017_5715_cpu_virt|VIRT_CVE_2017_5715_CPU_3_ONLYKERNEL']

RULES_CACHE = {}
CVES_CACHE = {}


async def terminate(_, loop):
    """Trigger shutdown."""
    LOGGER.info('Signal received, stopping kafka consumers.')
    await ADVISOR_QUEUE.stop()
    loop.stop()


def db_import_cve(cur, cve: str):
    """Import missing CVE metadata into database"""
    try:
        cur.execute("""INSERT INTO cve_metadata (cve, description, impact_id) VALUES %s ON CONFLICT (cve) DO UPDATE SET cve = %s
        RETURNING id AS inserted""", ((cve, 'unknown', 0,), cve))
        inserted = cur.fetchone()
        CVES_CACHE[cve] = inserted
    except DatabaseError:
        DATABASE_ERROR.inc()
        LOGGER.exception("Error updating CVEs cache: ")


def db_import_rule(rule_id: str):
    """Import single error key into database"""
    with DatabasePoolConnection() as conn:
        with conn.cursor() as cur:
            try:
                cur.execute("""INSERT INTO insights_rule (name) VALUES(%s) ON CONFLICT (name) DO UPDATE SET name = %s
                RETURNING id AS inserted""", ((rule_id,), rule_id))
                conn.commit()
                inserted = cur.fetchone()
                RULES_CACHE[rule_id] = inserted
            except DatabaseError:
                DATABASE_ERROR.inc()
                LOGGER.exception("Error updating rules cache: ")
                conn.rollback()


def db_import_rule_hits(cur, system_id: int, opt_out: bool, rule_hits: dict, rule_cves: set):  # pylint: disable=unused-argument
    """Associate rules hits with system"""


def db_import_system(system_data: dict, rule_hits: dict, rule_cves: set):
    """Import results from advisor into DB"""
    with DatabasePoolConnection() as conn:
        with conn.cursor() as cur:
            system_id, opt_out = db_import_system_platform(cur, system_data)
            if system_id is None:
                return
            db_import_rule_hits(cur, system_id, opt_out, rule_hits, rule_cves)
            conn.commit()


def db_import_system_platform(cur, system_data: dict):
    """Import/update system platform data"""
    curr_time = datetime.now(tz=pytz.utc)
    cur.execute("""select inventory_id from deleted_systems where inventory_id = %s and when_deleted > %s""",
                (system_data['inventory_id'], curr_time - timedelta(hours=SYSTEM_DELETION_THRESHOLD, )))
    if cur.fetchone() is not None:
        LOGGER.warning('Received recently deleted inventory id: %s', system_data['inventory_id'])
        DELETED_UPLOADED.inc()
        return None, None

    cur.execute("""INSERT INTO rh_account (name) VALUES(%s) ON CONFLICT (name) DO NOTHING
                RETURNING (xmax = 0) AS inserted""", (system_data['rh_account'],))
    inserted = cur.fetchone()
    if inserted:
        NEW_RH_ACCOUNT.inc()

    cur.execute("""SELECT id FROM rh_account WHERE name = %s""", (system_data['rh_account'],))
    rh_account_id = cur.fetchone()[0]

    cur.execute("""INSERT INTO system_platform
                (inventory_id, rh_account_id, display_name,
                stale_timestamp, stale_warning_timestamp, culled_timestamp, stale)
                VALUES (%s, %s, %s, %s, %s, %s, 'F')
                ON CONFLICT (inventory_id) DO UPDATE SET
                rh_account_id = %s, display_name = %s,
                stale_timestamp = %s, stale_warning_timestamp = %s, culled_timestamp = %s, stale = 'F'
                RETURNING (xmax = 0) AS inserted, id, opt_out""",
                (system_data['inventory_id'], rh_account_id, system_data['display_name'], system_data['stale_timestamp'],
                 system_data['stale_warning_timestamp'], system_data['culled_timestamp'],
                 rh_account_id, system_data['display_name'], system_data['stale_timestamp'], system_data['stale_warning_timestamp'],
                 system_data['culled_timestamp']))

    inserted, system_id, opt_out = cur.fetchone()
    if inserted:
        NEW_SYSTEM.inc()
    else:
        UPDATE_SYSTEM.inc()

    return system_id, opt_out


def db_init_caches():
    """Init caches for faster lookups"""
    with DatabasePoolConnection() as conn:
        with conn.cursor() as cur:
            try:
                cur.execute("""SELECT id, name FROM insights_rule""")
                for rule_db_id, rule_name in cur.fetchall():
                    RULES_CACHE[rule_name] = rule_db_id
                cur.execute("""SELECT id, cve FROM cve_metadata""")
                for cve_id, cve_name in cur.fetchall():
                    CVES_CACHE[cve_name] = cve_id
            except DatabaseError:
                DATABASE_ERROR.inc()
                LOGGER.exception("Error initializing caches: ")
                conn.rollback()


def main():
    """Application entrypoint"""
    start_http_server(int(PROMETHEUS_PORT))
    init_logging()
    LOGGER.info('Starting advisor listener.')

    loop = asyncio.get_event_loop()
    signals = (signal.SIGHUP, signal.SIGTERM, signal.SIGINT)
    for sig in signals:
        loop.add_signal_handler(
            sig, lambda sig=sig: loop.create_task(terminate(sig, loop)))
    executor = BoundedExecutor(MAX_QUEUE_SIZE, max_workers=WORKER_THREADS)

    def process_message(msg):
        """Message processing logic"""
        PROCESS_MESSAGES.inc()
        LOGGER.info('Received message on topic %s', msg.topic)

        try:
            msg_dict = json.loads(msg.value.decode('utf8'))
        except json.decoder.JSONDecodeError:
            MESSAGE_PARSE_ERROR.inc()
            LOGGER.exception('Unable to parse message: ')
            return

        identity = get_identity(msg_dict['input']['platform_metadata']['b64_identity'])
        if identity is None:
            INVALID_IDENTITY.inc()
            LOGGER.warning('Skipped advisor result due to invalid identity header.')
            return
        if not is_entitled_smart_management(identity, allow_missing_section=True):
            # TODO: remove with together with SM removal
            MISSING_SMART_MANAGEMENT.inc()
            LOGGER.debug('Skipped advisor result due to missing smart_management entitlement.')
            return

        # TODO: insert system into database if it's 1st upload, shall we update last seen?
        system_data = {
            'rh_account': msg_dict['input']['host']['account'],
            'culled_timestamp': msg_dict['input']['host']['culled_timestamp'],
            'display_name': msg_dict['input']['host']['display_name'],
            'inventory_id': msg_dict['input']['host']['id'],
            'stale_timestamp': msg_dict['input']['host']['stale_timestamp'],
            'stale_warning_timestamp': msg_dict['input']['host']['stale_warning_timestamp']
        }

        rule_hits = {}
        rule_cves = set()

        reports = msg_dict['results']['reports']
        for report in reports:
            failed_cves = report['details'].get('cves_fail', [])
            if failed_cves:
                rule = report['rule_id']
                if rule in RULE_BLACKLIST:
                    # TODO: remove this once CVE_2017_5753_4_cpu_kernel and CVE_2017_5715_cpu_virt
                    continue
                if rule not in RULES_CACHE:
                    db_import_rule(rule)
                rule_hits[RULES_CACHE[rule]] = failed_cves
                rule_cves.update(failed_cves)

        db_import_system(system_data, rule_hits, rule_cves)

    with DatabasePool(WORKER_THREADS):
        db_init_caches()

        ADVISOR_QUEUE.listen(process_message)

        loop.run_forever()

        LOGGER.info('Shutting down.')
        executor.shutdown()


if __name__ == '__main__':
    main()
