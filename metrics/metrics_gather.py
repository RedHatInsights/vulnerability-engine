#!/usr/bin/env python3
"""
Gathers metrics to show feature and product usage.
"""

import os
import time
import argparse

from common.database_handler import DatabasePool, DatabasePoolConnection, NamedCursor

class MetricsGatherer():
    """Metrics Gatherer"""

    def __init__(self, exclude_accounts, debug=False):
        self.exclude_accounts = exclude_accounts
        self.debug = debug
        print("Exclude accounts: %s\n" % sorted(exclude_accounts))

    def _report_cve_status_usage(self, connection):
        if self.debug:
            print("generating CVE-status usage report...\n")
        start = time.time()
        print("  account    # CVEs with status set")
        print("------------ ----------------------")
        with NamedCursor(connection) as cur:
            cur.execute("""SELECT ra.name,
                                  count(ra.name)
                             FROM cve_account_data cad
                             JOIN rh_account ra
                               ON cad.rh_account_id = ra.id
                            WHERE cad.status_id != 0
                              AND ra.name not in %s
                         GROUP BY ra.name
                         ORDER BY count(ra.name) DESC""", [tuple(self.exclude_accounts)])
            for row in cur.fetchall():
                print(f"{row[0]:12s} {row[1]}")
        print("-----------------------------------")
        print("Duration: %s milliseconds\n" % str((time.time() - start) * 1000))

    def _report_system_cve_status_usage(self, connection):
        if self.debug:
            print("generating system-CVE-status usage report...\n")
        start = time.time()
        print("  account    # system-CVEs with status set")
        print("------------ -----------------------------")
        with NamedCursor(connection) as cur:
            cur.execute("""SELECT ra.name,
                                  count(ra.name)
                             FROM system_vulnerabilities sv
                             JOIN system_platform sp
                               ON sv.system_id = sp.id
                             JOIN rh_account ra
                               ON sp.rh_account_id = ra.id
                            WHERE sv.status_id != 0
                              AND ra.name not in %s
                         GROUP BY ra.name
                         ORDER BY count(ra.name) DESC""", [tuple(self.exclude_accounts)])
            for row in cur.fetchall():
                print(f"{row[0]:12s} {row[1]}")
        print("------------------------------------------")
        print("Duration: %s milliseconds\n" % str((time.time() - start) * 1000))

    def _report_cve_business_risk_usage(self, connection):
        if self.debug:
            print("generating CVE-business risk usage report...\n")
        start = time.time()
        print("  account    # CVEs with business risk set")
        print("------------ -----------------------------")
        with NamedCursor(connection) as cur:
            cur.execute("""SELECT ra.name,
                                  count(ra.name)
                             FROM cve_account_data cad
                             JOIN rh_account ra
                               ON cad.rh_account_id = ra.id
                            WHERE cad.business_risk_id != 0
                              AND ra.name not in %s
                         GROUP BY ra.name
                         ORDER BY count(ra.name) DESC""", [tuple(self.exclude_accounts)])
            for row in cur.fetchall():
                print(f"{row[0]:12s} {row[1]}")
        print("------------------------------------------")
        print("Duration: %s milliseconds\n" % str((time.time() - start) * 1000))

    def run(self):
        if self.debug:
            print("running...\n")
        with DatabasePoolConnection() as conn:
            self._report_cve_status_usage(conn)
            print(" ")
            self._report_system_cve_status_usage(conn)
            print(" ")
            self._report_cve_business_risk_usage(conn)
            conn.commit()

def main():
    """Main entrypoint"""
    parser = argparse.ArgumentParser(description='Gather feature and product usage by account')
    parser.add_argument("-e", "--excludes_file", action="store", default="exclude_accounts.txt", help="file containing list of accounts to exclude from results")
    parser.add_argument("-v", "--verbose", action="store_true", help="verbose output that reports status as metrics are gathered")
    args = parser.parse_args()

    exclude_accounts = set()
    if args.excludes_file:
        if args.verbose:
            print("Loading accounts to exclude from file %s" % args.excludes_file)
        if os.path.isfile(args.excludes_file):
            with open(args.excludes_file, 'r') as excludesfile:
                lines = excludesfile.readlines()
                for line in lines:
                    account = line.split('#')[0].strip()
                    if account:
                        exclude_accounts.add(account)
        else:
            print("Specified excludes file %s does not exist or is not a file." % args.config_file)
            raise SystemExit(1)
        
    with DatabasePool(1):
        mg = MetricsGatherer(exclude_accounts, debug=args.verbose)

        mg.run()


if __name__ == '__main__':
    main()
