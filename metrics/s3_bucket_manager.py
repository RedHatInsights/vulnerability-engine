"""
Manage metrics raw data storage in S3 buckets.
"""

import io
import os
import json
import boto3

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
S3_ENDPOINT_URL = os.getenv('S3_ENDPOINT_URL', None)
S3_BUCKET = os.getenv('S3_METRICS_BUCKET')


class S3BucketManager():
    """S3 Bucket Manager"""

    def __init__(self, debug=False):
        self.debug = debug
        self.s3_client = boto3.client('s3',
                                      endpoint_url=S3_ENDPOINT_URL,
                                      aws_access_key_id=AWS_ACCESS_KEY_ID,
                                      aws_secret_access_key=AWS_SECRET_ACCESS_KEY)

    def list_keys(self):
        """Get the list of keys for data in the bucket."""
        key_list = []
        response = self.s3_client.list_objects_v2(Bucket=S3_BUCKET)
        for content in response['Contents']:
            key_list.append(content['Key'])
        if self.debug:
            print("Keys in bucket %s: %s" % (S3_BUCKET, key_list))
        return key_list

    def upload_data(self, key, data):
        """Upload the given data to the S3 bucket with the given key."""
        fileobj = io.BytesIO(json.dumps(data).encode('utf-8'))
        if self.debug:
            print("Uploading %s to bucket %s" % (key, S3_BUCKET))
        self.s3_client.upload_fileobj(fileobj, S3_BUCKET, key)

    def retrieve_data(self, key):
        """Retrieve the data associated with the given key."""
        if self.debug:
            print("Retrieving %s from bucket %s" % (key, S3_BUCKET))
        bytesio = io.BytesIO()
        self.s3_client.download_fileobj(S3_BUCKET, key, bytesio)
        data = json.loads(bytesio.getvalue().decode('utf-8'))
        return data

    def delete_by_key(self, key):
        """Delete the data associated with the given key."""
        if self.debug:
            print("Deleting %s from bucket %s" % (key, S3_BUCKET))
        self.s3_client.delete_object(Bucket=S3_BUCKET, Key=key)

    def delete_by_key_list(self, key_list):
        """Delete the data associated with each of the provided keys."""
        if self.debug:
            print("Deleting the following keys from bucket %s" % S3_BUCKET)
        object_list = []
        for key in key_list:
            if self.debug:
                print(key)
            object_list.append({'Key': key})
        self.s3_client.delete_objects(Bucket=S3_BUCKET,
                                      Delete={'Objects': object_list,
                                              'Quiet': True})
