"""
Manage metrics raw data storage in S3 buckets.
"""
from psycopg2.extras import execute_values


class StatsManager():
    """
    Class behaves as middle layer between db statistics table and code.
    """

    def __init__(self, conn):
        self.db_conn = conn

    def save_data(self, tuples):
        """Saves tuples into db"""
        with self.db_conn.cursor() as cur:
            execute_values(cur, """
                INSERT INTO usage_statistics
                (name, recorded, cve_status_usage, system_cve_status_usage,
                cve_business_risk_usage) VALUES %s
            """, tuples, page_size=len(tuples))

    def load_data(self, timestamp):
        """Loads tuples with statistics from db by timestamps"""
        with self.db_conn.cursor() as cur:
            cur.execute("""
                SELECT name, cve_status_usage, system_cve_status_usage,
                       cve_business_risk_usage
                FROM usage_statistics
                WHERE recorded = %s
            """, (timestamp,))
            return cur.fetchall()

    def remove_data(self, timestamp):
        """Removes statistics by timestamp"""
        with self.db_conn.cursor() as cur:
            cur.execute("""
                DELETE FROM usage_statistics WHERE recorded = %s
                """, (timestamp,))

    def remove_multiple(self, timestamps):
        """Removes statistics by timestamps"""
        with self.db_conn.cursor() as cur:
            cur.execute("""
                DELETE FROM usage_statistics WHERE recorded IN %s
            """, (timestamps,))

    def are_data(self, timestamp):
        """Checks if there are some data for given timestamp"""
        with self.db_conn.cursor() as cur:
            cur.execute("""
                SELECT id
                FROM usage_statistics
                WHERE recorded = %s
            """, (timestamp,))
            res = cur.fetchone()
            if res:
                return True
            return False

    def load_timestamps(self):
        """Loads all timestamps from db"""
        with self.db_conn.cursor() as cur:
            cur.execute("""
                SELECT DISTINCT(recorded) FROM usage_statistics
            """)
            res = cur.fetchall()
            res = map(lambda x: x[0], res)
            return res
