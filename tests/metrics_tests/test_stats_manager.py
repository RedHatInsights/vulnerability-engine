# pylint: disable=missing-docstring, no-self-use
"""
Tests suite for Stats Manager
"""

import pytest

from metrics.stats_manager import StatsManager

TIMESTAMP = "2020-02-02"


class TestStatsManager:
    """Test suite"""

    @pytest.fixture
    def stats_manager(self, pg_db_conn):
        st_mngr = StatsManager(pg_db_conn)
        return st_mngr

    @staticmethod
    def _get_test_data():
        tuples = [("insights-qa", TIMESTAMP, 20, 20, 20),
                  ("insights-qe", TIMESTAMP, 30, 30, 30)]
        return tuples

    def test_save_load_data(self, stats_manager):
        """Test saving and loading data from DB"""
        stats_manager.save_data(TestStatsManager._get_test_data())
        results = stats_manager.load_data(TIMESTAMP)
        for res in results:
            assert res[0] == "insights-qa" or res[0] == "insights-qe"
            assert res[1] == 20 or res[1] == 30
            assert res[2] == 20 or res[2] == 30
            assert res[3] == 20 or res[3] == 30

    def test_remove_data(self, stats_manager):
        """Test removing data from DB"""
        stats_manager.save_data(TestStatsManager._get_test_data())
        stats_manager.remove_data(TIMESTAMP)
        results = stats_manager.load_data(TIMESTAMP)
        assert len(results) == 0

    def test_remove_multiple_data(self, stats_manager):
        """Test removing multiple data from DB"""
        timestamp = "2021-03-02"
        new_data = [("insights-qa", timestamp, 40, 40, 40),
                    ("insights-qe", timestamp, 50, 50, 50)]
        stats_manager.save_data(TestStatsManager._get_test_data())
        stats_manager.save_data(new_data)
        stats_manager.remove_multiple((timestamp, TIMESTAMP))

        res1 = stats_manager.load_data(timestamp)
        res2 = stats_manager.load_data(TIMESTAMP)
        assert res1 == []
        assert res2 == []

    def test_are_data_true(self, stats_manager):
        """Test are data method for existing data"""
        stats_manager.save_data(TestStatsManager._get_test_data())

        res = stats_manager.are_data(TIMESTAMP)
        assert res is True
        stats_manager.remove_data(TIMESTAMP)

    def test_are_data_false(self, stats_manager):
        """Test are data method for non existing data"""
        res = stats_manager.are_data(TIMESTAMP)
        assert res is False

    def test_load_timestamps(self, stats_manager):
        """Test load timestamps method"""
        stats_manager.save_data(TestStatsManager._get_test_data())
        res = stats_manager.load_timestamps()
        for timestamp in res:
            assert str(timestamp) in ["2020-01-01", TIMESTAMP]  # first timestamp is from dev data sql file
