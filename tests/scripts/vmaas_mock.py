#!/usr/bin/env python3
"""
Mock of VMaaS webapp
"""
import json

from tornado import gen
from tornado import ioloop
from tornado import web
from tornado import httpserver


UPDATES_EMPTY = {"update_list": {"": {}}}
UPDATES_NON_EXIST = {"update_list": {"non_exist": {}}}
CVES_EMPTY = {"cve_list": {}, "page": 1, "page_size": 0, "pages": 0}
ERRATA_EMPTY = {"errata_list": {}, "page": 1, "page_size": 0, "pages": 0}
UPDATES_RESPONSE = {
    "update_list": {
        "bash-0:4.2.46-20.el7_2.x86_64": {
            "summary": "The GNU Bourne Again shell",
            "description": "The GNU Bourne Again shell (Bash)....",
            "available_updates": [
                {
                    "package": "bash-4.2.46-28.el7.x86_64",
                    "erratum": "RHSA-2017:1931",
                    "repository": "rhel-7-server-rpms",
                    "basearch": "x86_64",
                    "releasever": "7Server",
                },
                {
                    "package": "bash-4.2.46-28.el7.x86_64",
                    "erratum": "RHSA-2017:1931",
                    "repository": "rhel-7-workstation-rpms",
                    "basearch": "x86_64",
                    "releasever": "7Workstation",
                },
            ],
        }
    }
}
CVES_RESPONSE = {
    "cve_list": {
        "CVE-2016-0634": {
            "redhat_url": "",
            "secondary_url": "",
            "synopsis": "CVE-2016-0634",
            "impact": "Moderate",
            "public_date": "2015-10-16T00:00:00+00:00",
            "modified_date": "2019-03-12T12:45:42+00:00",
            "cwe_list": [],
            "cvss3_score": "4.900",
            "cvss3_metrics": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
            "cvss2_score": "3.700",
            "cvss2_metrics": "AV:L/AC:H/Au:N/C:P/I:P/A:P",
            "description": "An arbitrary command injection flaw was f....",
            "package_list": [
                "bash-4.2.46-28.el7.x86_64"
            ],
            "errata_list": [
                "RHSA-2017:1931"
            ]
        },
        "CVE-2016-7543": {
            "redhat_url": "",
            "secondary_url": "",
            "synopsis": "CVE-2016-7543",
            "impact": "Moderate",
            "public_date": "2016-09-16T00:00:00+00:00",
            "modified_date": "2019-03-12T12:45:42+00:00",
            "cwe_list": [
                "CWE-77"
            ],
            "cvss3_score": "7.000",
            "cvss3_metrics": "CVSS:3.0/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H",
            "cvss2_score": "6.900",
            "cvss2_metrics": "AV:L/AC:M/Au:N/C:C/I:C/A:C",
            "description": "An arbitrary command injection flaw ...",
            "package_list": [
                "bash-4.2.46-28.el7.x86_64"
            ],
            "errata_list": [
                "RHSA-2017:1931"
            ]
        },
        "CVE-2016-9401": {
            "redhat_url": "",
            "secondary_url": "",
            "synopsis": "CVE-2016-9401",
            "impact": "Low",
            "public_date": "2016-11-17T00:00:00+00:00",
            "modified_date": "2019-03-12T12:45:42+00:00",
            "cwe_list": [
                "CWE-416"
            ],
            "cvss3_score": "3.300",
            "cvss3_metrics": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L",
            "cvss2_score": "1.900",
            "cvss2_metrics": "AV:L/AC:M/Au:N/C:N/I:N/A:P",
            "description": "A denial of service flaw w...",
            "package_list": [
                "bash-4.2.46-28.el7.x86_64"
            ],
            "errata_list": [
                "RHSA-2017:1931"
            ]
        }
    },
    "page": 1,
    "page_size": 3,
    "pages": 1
}
ERRATA_RESPONSE = {
    "errata_list": {
        "RHSA-2017:1931": {
            "synopsis": "Moderate: bash security and bug fix update",
            "summary": "An update for bash is now available for Red Hat Enterprise Linux 7...",
            "type": "security",
            "severity": "Moderate",
            "description": "The bash packages....",
            "solution": "For details on how to apply this update, which ...",
            "issued": "2017-08-01T05:56:24+00:00",
            "updated": "2017-08-01T05:56:24+00:00",
            "cve_list": ["CVE-2016-7543", "CVE-2016-0634", "CVE-2016-9401"],
            "package_list": ["bash-4.2.46-28.el7.x86_64"],
            "bugzilla_list": ["1264101", "1267478", "1372806", "1377496", "1377613", "1379630", "1396383"],
            "reference_list": ["classification-RHSA-2017:1931", "ref_0-RHSA-2017:1931"],
            "url": "https://access.redhat.com/errata/RHSA-2017:1931",
        }
    },
    "page": 1,
    "page_size": 1,
    "pages": 1,
}


RESPONSES = {"cves": CVES_RESPONSE, "errata": ERRATA_RESPONSE, "updates": UPDATES_RESPONSE}
EMPTY_RESPONSES = {"cves": CVES_EMPTY, "errata": ERRATA_EMPTY, "updates": UPDATES_EMPTY}


class BaseHandler(web.RequestHandler):
    """Base handler."""

    def data_received(self, chunk):
        pass

    def get_data(self):
        """Get json data from POST request."""
        data = self.request.body

        try:
            data = json.loads(data)
        except ValueError:
            data = None
        return data

    @gen.coroutine
    def handle(self, handler_type, data_list):
        """Handle /updates, /cves, /errata api endpoints."""
        code = 400
        data = self.get_data()
        if data:
            response = EMPTY_RESPONSES.get(handler_type, {})
            if not data[data_list]:
                code = 200
            elif "non_exist" in data[data_list][0] and handler_type == "updates":
                response = UPDATES_NON_EXIST
                code = 200
            elif "FORCE_CODE_400" not in data[data_list][0]:
                response = RESPONSES.get(handler_type, None)
                code = 200
        else:
            response = "Error: malformed input JSON."

        self.set_status(code)
        self.write(response)


class UpdatesHandler(BaseHandler):
    """UpdatesHandler. Handle Updates endpoint."""

    def post(self):  # pylint: disable=arguments-differ
        """Handle /updates POST request."""
        self.handle("updates", "package_list")


class CvesHandler(BaseHandler):
    """CvesHandler. Handle Cves endpoint."""

    def post(self):  # pylint: disable=arguments-differ
        """Handle /cves POST request."""
        self.handle("cves", "cve_list")


class ErrataHandler(BaseHandler):
    """ErrataHandler. Handle Errata endpoint."""

    def post(self):  # pylint: disable=arguments-differ
        """Handle /errata POST request."""
        self.handle("errata", "errata_list")


APP = web.Application([
    (r"/api/v1/updates/?", UpdatesHandler),
    (r"/api/v1/cves/?", CvesHandler),
    (r"/api/v1/errata/?", ErrataHandler),
])


def main():
    """Run web server."""
    server = httpserver.HTTPServer(APP)
    server.listen(8080)
    ioloop.IOLoop.current().start()


if __name__ == "__main__":
    main()
