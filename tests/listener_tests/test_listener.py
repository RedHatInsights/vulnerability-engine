"""
Test listener main component
"""
# pylint: disable=line-too-long,protected-access,no-self-use

import json
import logging
import pytest

from listener import listener as listener_
from listener.common import InventoryMsgType

ADVISOR_MSG_MOCK = {
    "input": {
        "host": {
            "org_id": "0",
            "account": "0",
            "insights_id": "1",
            "id": "00000000-0000-0000-0000-000000000000",
        },
        "platform_metadata": {
            "b64_identity":
                "eyJpZGVudGl0eSI6eyJhY2NvdW50X251bWJlciI6IjAiLCJvcmdfaWQiOiIwIiwiYXV0aF90eX"
                + "BlIjoiYmFzaWMtYXV0aCIsInR5cGUiOiJVc2VyIiwidXNlciI6eyJ1c2VybmFtZSI6Impkb2VAYWNtZS5jb2"
                + "0iLCJlbWFpbCI6Impkb2VAYWNtZS5jb20iLCJmaXJzdF9uYW1lIjoiam9obiIsImxhc3RfbmFtZSI6ImRvZS"
                + "IsImlzX2FjdGl2ZSI6dHJ1ZSwiaXNfb3JnX2FkbWluIjpmYWxzZSwiaXNfaW50ZXJuYWwiOmZhbHNlLCJsb"
                + "2NhbGUiOiJlbl9VUyJ9LCJpbnRlcm5hbCI6eyJvcmdfaWQiOiIwIiwiYXV0aF90eXBlIjoiYmFzaWMtYXV0a"
                + "CIsImF1dGhfdGltZSI6NjMwMH19LCJlbnRpdGxlbWVudHMiOnsiaW5zaWdodHMiOnsiaXNfZW50aXRsZWQiO"
                + "nRydWV9LCJzbWFydF9tYW5hZ2VtZW50Ijp7ImlzX2VudGl0bGVkIjp0cnVlfX19Cg==",
            "request_id": "1",
            "url": "s3"
        },
    },
    "results": {
        "reports": [],
        "pass": [],
    },
}

INVENTORY_MSG_MOCK_UPLOAD = {
    "type": "created",
    "host": {
        "id": "00000000-0000-0000-0000-000000000000",
        "account": "0",
        "org_id": "0",
        "system_profile": {},
        "display_name": "system-0",
        "insights_id": "",
    },
    "timestamp": "now",
    "platform_metadata": {
        "b64_identity":
            "eyJpZGVudGl0eSI6eyJhY2NvdW50X251bWJlciI6IjAiLCJvcmdfaWQiOiIwIiwiYXV0aF90eX"
            + "BlIjoiYmFzaWMtYXV0aCIsInR5cGUiOiJVc2VyIiwidXNlciI6eyJ1c2VybmFtZSI6Impkb2VAYWNtZS5jb2"
            + "0iLCJlbWFpbCI6Impkb2VAYWNtZS5jb20iLCJmaXJzdF9uYW1lIjoiam9obiIsImxhc3RfbmFtZSI6ImRvZS"
            + "IsImlzX2FjdGl2ZSI6dHJ1ZSwiaXNfb3JnX2FkbWluIjpmYWxzZSwiaXNfaW50ZXJuYWwiOmZhbHNlLCJsb"
            + "2NhbGUiOiJlbl9VUyJ9LCJpbnRlcm5hbCI6eyJvcmdfaWQiOiIwIiwiYXV0aF90eXBlIjoiYmFzaWMtYXV0a"
            + "CIsImF1dGhfdGltZSI6NjMwMH19LCJlbnRpdGxlbWVudHMiOnsiaW5zaWdodHMiOnsiaXNfZW50aXRsZWQiO"
            + "nRydWV9LCJzbWFydF9tYW5hZ2VtZW50Ijp7ImlzX2VudGl0bGVkIjp0cnVlfX19Cg==",
        "request_id": "1",
        "url": "s3",
    },
}

INVENTORY_MSG_MOCK_DELETED = {
    "type": "delete",
    "id": "00000000-0000-0000-0000-000000000000",
    "timestamp": "now",
    "account": "0",
    "org_id": "0",
    "insights_id": "1",
    "request_id": "1"
}


def _empty_func(*_, **__):
    pass


class KafkaMsgMock:
    """Mock for kafka MSG"""

    def __init__(self, topic, value):
        self.topic = topic
        self.value = value


class TestListener:
    """Test main listener class"""

    @pytest.mark.asyncio
    async def test_message_routing_advisor(self, listener, monkeypatch):
        """Test message routing of advisor msg"""
        was_called = False

        def _mock(*_, **__):
            nonlocal was_called
            was_called = True
        monkeypatch.setattr(listener, "_consume_advisor_msg", _mock)

        msg = KafkaMsgMock("vulnerability.listener.ingress", json.dumps(ADVISOR_MSG_MOCK).encode("utf-8"))
        await listener.consume_message(msg)

        # expect that listener will call advisor msg consuming
        assert was_called

    @pytest.mark.asyncio
    async def test_message_routing_inventory(self, listener, monkeypatch):
        """Test message routing of inventory msg"""
        was_called = False

        def _mock(*_, **__):
            nonlocal was_called
            was_called = True
        monkeypatch.setattr(listener, "_consume_inventory_msg", _mock)

        msg = KafkaMsgMock("vulnerability.listener.ingress", json.dumps(INVENTORY_MSG_MOCK_UPLOAD).encode("utf-8"))
        await listener.consume_message(msg)

        assert was_called

    @pytest.mark.asyncio
    async def test_message_routing_unknown(self, listener, monkeypatch, caplog):
        """Test message routing of unknown message"""
        def _mock(*_, **__):
            raise Exception("inventory/advisor message processing was called")
        monkeypatch.setattr(listener, "_consume_inventory_msg", _mock)
        monkeypatch.setattr(listener, "_consume_advisor_msg", _mock)

        msg = KafkaMsgMock("vulnerability.listener.ingress", json.dumps({"msg": "invalid"}).encode("utf-8"))

        # should not raise anything
        with caplog.at_level(logging.DEBUG):
            await listener.consume_message(msg)
        assert "Unknown message obtained" in caplog.text

    def test_message_consuming_listener(self, listener, monkeypatch, caplog):
        """Test consuming of listener messages"""
        was_pushed = False

        def _mock(*_, **__):
            nonlocal was_pushed
            was_pushed = True

        monkeypatch.setattr(listener_, "send_msg_to_payload_tracker", _empty_func)
        monkeypatch.setattr(listener.queue, "push_inventory_msg", _mock)

        msg_type = listener._consume_inventory_msg(INVENTORY_MSG_MOCK_UPLOAD)
        assert msg_type is InventoryMsgType.CREATED
        assert was_pushed
        was_pushed = False

        msg_type = listener._consume_inventory_msg(INVENTORY_MSG_MOCK_DELETED)
        assert msg_type is InventoryMsgType.DELETE
        assert was_pushed
        was_pushed = False

        with caplog.at_level(logging.DEBUG):
            msg_type = listener._consume_inventory_msg({"msg": "invalid"})
        assert msg_type is InventoryMsgType.UNKNOWN
        assert not was_pushed
        assert "obtained invalid inventory msg" in caplog.text

    def test_message_consuming_advisor(self, listener, monkeypatch, caplog):
        """Test consuming of advisor messages"""
        was_pushed = False

        def _mock(*_, **__):
            nonlocal was_pushed
            was_pushed = True

        monkeypatch.setattr(listener_, "send_msg_to_payload_tracker", _empty_func)
        monkeypatch.setattr(listener.queue, "push_advisor_msg", _mock)

        listener._consume_advisor_msg(ADVISOR_MSG_MOCK)
        assert was_pushed
        was_pushed = False

        with caplog.at_level(logging.DEBUG):
            listener._consume_advisor_msg({"msg": "invalid"})
        assert not was_pushed
        assert "obtained invalid advisor msg" in caplog.text
