# -*- coding: utf-8 -*-
# pylint:disable=missing-docstring,redefined-outer-name

import asyncio
import psycopg2
import pytest

from listener.listener import Listener
from listener.queue import ListenerQueue
from listener.processor import ListenerItemProcessor


@pytest.fixture(scope="class")
def event_loop():
    return asyncio.get_event_loop()


@pytest.fixture(scope="module")
def pg_db_conn(pg_db_mod):
    """Returns connection to PostgreSQL database."""
    conn = psycopg2.connect(**pg_db_mod.dsn())
    yield conn
    conn.close()


@pytest.fixture(scope="class")
async def listener(event_loop):
    lis = Listener(None, event_loop)
    yield lis
    await lis.stop()


@pytest.fixture(scope="class")
async def queue(event_loop):
    que = ListenerQueue(None, None, event_loop)
    yield que
    await que.stop()


@pytest.fixture(scope="class")
async def processor(event_loop):
    proc = ListenerItemProcessor(None, None, event_loop)
    yield proc
    await proc.stop()


@pytest.fixture(scope="class")
async def processor_with_db(pg_pool_cls, event_loop):
    proc = ListenerItemProcessor(pg_pool_cls, None, event_loop)
    yield proc
    await proc.stop()
