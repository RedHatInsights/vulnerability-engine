"""
Test queue suite
"""
# pylint: disable=protected-access,no-self-use

from listener import queue as queue_
from listener.common import InventoryMsgType
from .test_processor import ADVISOR_MSG, INVENTORY_MSG

ORG_ID = "0"
INVENTORY_ID = "63ffaefc-243b-474f-90cf-c51d80886c87"


def _empty_func(*_, **__):
    pass


class TestQueue:
    """Test listener message waiting queue"""

    def test_push_inventory_msg(self, monkeypatch, queue):
        """Test arrival of inventory msg and then advisor msg"""
        queue._queue = {}

        task_created = False

        def _mock(*_, **__):
            nonlocal task_created
            task_created = True

        # lets not create asyncio task which waits
        monkeypatch.setattr(queue_, "create_task_and_log", _mock)
        monkeypatch.setattr(queue.loop, "create_task", _empty_func)

        # upload inv message should wait for advisor (item in queue)
        queue.push_inventory_msg(ORG_ID, INVENTORY_ID, INVENTORY_MSG, InventoryMsgType.UPLOAD)

        item = queue._queue.get((ORG_ID, INVENTORY_ID), None)
        assert item is not None
        assert item.inventory_msg == INVENTORY_MSG
        assert item.inventory_msg_type == InventoryMsgType.UPLOAD
        assert item.advisor_msg is None
        # second message from advisor did not happen, make sure event is not set
        assert not item.second_msg_event.is_set()
        # make sure second msg waiting task is created
        assert task_created

        task_created = False

        queue.push_inventory_msg(ORG_ID, INVENTORY_ID, INVENTORY_MSG, InventoryMsgType.UPLOAD)
        assert not item.second_msg_event.is_set()
        # message was only update, make sure task was not created again
        assert not task_created

        queue.push_advisor_msg(ORG_ID, INVENTORY_ID, ADVISOR_MSG)
        # advisor message arrived, make sure event is set
        assert item.second_msg_event.is_set()

    def test_push_advisor_msg(self, monkeypatch, queue):
        """Test arrival of advisor msg, then inventory msg"""
        queue._queue = {}

        task_created = False

        def _mock(*_, **__):
            nonlocal task_created
            task_created = True

        # lets not create asyncio task which waits
        monkeypatch.setattr(queue_, "create_task_and_log", _mock)
        monkeypatch.setattr(queue.loop, "create_task", _empty_func)

        # upload advisor message should wait for advisor (item in queue)
        queue.push_advisor_msg(ORG_ID, INVENTORY_ID, ADVISOR_MSG)

        item = queue._queue.get((ORG_ID, INVENTORY_ID), None)
        assert item is not None
        assert item.advisor_msg == ADVISOR_MSG
        assert item.inventory_msg_type == InventoryMsgType.UNKNOWN
        assert item.inventory_msg is None

        # second message from inventory did not happen, make sure event is not set
        assert not item.second_msg_event.is_set()
        # make sure second msg waiting task is created
        assert task_created

        task_created = False

        queue.push_advisor_msg(ORG_ID, INVENTORY_ID, ADVISOR_MSG)
        assert not item.second_msg_event.is_set()
        # message was only update, make sure task was not created again
        assert not task_created

        queue.push_inventory_msg(ORG_ID, INVENTORY_ID, INVENTORY_MSG, InventoryMsgType.UPLOAD)
        # advisor message arrived, make sure event is set
        assert item.second_msg_event.is_set()
