# -*- coding: utf-8 -*-
# pylint: disable=no-self-use
"""
Unit tests for listener module
"""
from time import sleep
import logging

import listener.upload_listener
from listener.upload_listener import format_vmaas_request, db_import_system, process_upload, LOGGER
from common.mqueue import MQWriter

# We should refactor upload_listener to be a class where db and other things
# are initialized in __init__() method.  This would allow us to override
# those things in unit tests here.

PACKAGE_LIST = ['package-a', 'package-b']
REPO_LIST = ['repo-c', 'repo-d']
MODULES_LIST = ['module-e', 'module-f']
RESULT_JSON = '{"package_list": ["package-a", "package-b"], ' \
              '"repository_list": ["repo-c", "repo-d"], ' \
              '"modules_list": ["module-e", "module-f"]}'

A_SYSTEM = {'inv-id': 'NEW-ID', 'rh-acct': 'NEW-ACCT', 's3-url': 'NEW-URL',
            'vmaas-json': 'NEW-JSON', 'managed': True}

class TestUploadListner:
    """Unit tests for vulnerability-listener."""

    def test_format_vmaas_request(self):
        """test_format_vmaas_request"""
        result = format_vmaas_request(PACKAGE_LIST, repo_list=REPO_LIST, modules_list=MODULES_LIST)
        assert result
        assert result == RESULT_JSON

    def test_import_system(self, pg_db_conn):
        """Test importing a system not-in-the-db, followed by same so it's-already-there"""
        # new system
        rtrn = db_import_system(pg_db_conn, A_SYSTEM['inv-id'], A_SYSTEM['rh-acct'], A_SYSTEM['s3-url'],
                                A_SYSTEM['vmaas-json'], A_SYSTEM['managed'])
        assert rtrn['inserted']
        assert rtrn['changed']
        assert not rtrn['updated']
        sleep(2)

        # And now it's an rtrn['updated'], but same json
        rtrn = db_import_system(pg_db_conn, A_SYSTEM['inv-id'], A_SYSTEM['rh-acct'], A_SYSTEM['s3-url'],
                                A_SYSTEM['vmaas-json'], A_SYSTEM['managed'])
        assert not rtrn['inserted']
        assert rtrn['updated']
        assert not rtrn['changed']
        sleep(2)

        # And now it's another rtrn['updated'], same json
        rtrn = db_import_system(pg_db_conn, A_SYSTEM['inv-id'], A_SYSTEM['rh-acct'], A_SYSTEM['s3-url'],
                                A_SYSTEM['vmaas-json'], A_SYSTEM['managed'])
        assert not rtrn['inserted']
        assert rtrn['updated']
        assert not rtrn['changed']
        sleep(2)

        # And now it's an rtrn['updated'], with diff json
        rtrn = db_import_system(pg_db_conn, A_SYSTEM['inv-id'], A_SYSTEM['rh-acct'], A_SYSTEM['s3-url'],
                                A_SYSTEM['vmaas-json'] + '-1', A_SYSTEM['managed'])
        assert not rtrn['inserted']
        assert rtrn['updated']
        assert rtrn['changed']

    def test_process_upload(self, pg_db_conn, monkeypatch, caplog):
        """Test to see that upload only sends eval-msgs on new systems and ones with new vmaas_json"""
        same_json = "{'diff': False}"
        diff_json = "{'diff': True}"
        upld_data = {'id': 'A-SYSTEM-ID', 'rh_account': 'AN-ACCOUNT', 'url': 'A-URL', 'satellite_managed': False}
        monkeypatch.setattr(MQWriter, 'send', lambda self, msg, loop: LOGGER.info('SENT'))
        monkeypatch.setattr(listener.upload_listener, 'parse_archive', lambda upld_dta, sess: same_json)

        # first-upload - should send
        caplog.clear()
        with caplog.at_level(logging.INFO):
            process_upload(upld_data, None, pg_db_conn, None)
        assert caplog.records[0].msg == 'SENT'

        # re-upload - should not send
        caplog.clear()
        with caplog.at_level(logging.INFO):
            process_upload(upld_data, None, pg_db_conn, None)
        assert not caplog.records

        # same-id, diff-vmaas upload - should send
        monkeypatch.setattr(listener.upload_listener, 'parse_archive', lambda upld_dta, sess: diff_json)
        caplog.clear()
        with caplog.at_level(logging.INFO):
            process_upload(upld_data, None, pg_db_conn, None)
        assert caplog.records[0].msg == 'SENT'
