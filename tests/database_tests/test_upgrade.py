# pylint: disable=no-self-use
"""
Test database upgrades
"""
import difflib
import os
import re
import subprocess

import pytest
from git import GitCommandError, Repo

from database.upgrade import upgrade
from ..utils import get_pg_class, set_env, VULN_ENG_DIR


UPGRADE_FROM = os.getenv("UPGRADE_FROM", "a3388e0b8643e7b022947fb2c0c2f862ef0056b0")
UPGRADE_TO = os.getenv("UPGRADE_TO", None)


class TestUpgrade:
    """Tests for vulnerability-engine database upgrade."""

    repo = Repo(VULN_ENG_DIR)
    head = repo.head.reference

    def _git_checkout(self, commit):
        """Perform git checkout specified by commit and stash current work"""
        self.repo.git.stash()
        # checkout branch `commit` or branch from what tests where executed
        self.repo.head.reference = self.head
        if commit:
            self.repo.head.reference = self.repo.create_head(commit[:7], commit=commit)
        self.repo.head.reset(index=True, working_tree=True)

    def _git_co_teardown(self):
        """Checkout to previous branch and apply last stash"""
        self.repo.head.reference = self.head
        self.repo.head.reset(index=True, working_tree=True)
        try:
            self.repo.git.stash("apply")
        except GitCommandError:
            pass

    @pytest.fixture
    def pg_old(self, commit=UPGRADE_FROM):
        """Setup DB that will be upgraded."""
        self._git_checkout(commit)
        # start DB with old schema
        postgres_class = get_pg_class()
        postgres = postgres_class()
        set_env(postgres)
        yield postgres

        postgres.stop()
        postgres_class.clear_cache()
        self._git_co_teardown()

    @pytest.fixture
    def pg_new(self, commit=UPGRADE_TO):
        """Setup DB that uses already upgraded schema."""
        self._git_checkout(commit)
        # start DB with new schema
        postgres_class = get_pg_class()
        postgres = postgres_class()
        set_env(postgres)
        yield postgres

        postgres.stop()
        postgres_class.clear_cache()
        self._git_co_teardown()

    def test_upgrade(self, pg_old, pg_new):
        """Test schema upgrade."""
        env_old = pg_old.dsn()
        env_new = pg_new.dsn()

        os.environ["POSTGRESQL_USER"] = "ve_db_admin"
        os.environ["POSTGRESQL_PASSWORD"] = "ve_db_admin_pwd"
        os.environ["POSTGRESQL_PORT"] = str(env_old["port"])

        upgrade.main()

        dump_old = subprocess.check_output(
            [
                "pg_dump", "-s",
                "-h", str(env_old["host"]),
                "-p", str(env_old["port"]),
                "-U", env_old["user"],
                "-d", env_old["database"],
            ]
        ).decode("utf-8")
        dump_new = subprocess.check_output(
            [
                "pg_dump", "-s",
                "-h", str(env_new["host"]),
                "-p", str(env_new["port"]),
                "-U", env_new["user"],
                "-d", env_new["database"],
            ]
        ).decode("utf-8")

        dump_old = re.sub(r"\n+", "\n", dump_old).splitlines()
        dump_new = re.sub(r"\n+", "\n", dump_new).splitlines()
        dump_old.sort()
        dump_new.sort()
        try:
            assert dump_old == dump_new
        except AssertionError:
            diff = difflib.unified_diff(dump_old, dump_new)
            diffs = "\n".join([x for x in diff])
            assert False, f"Diff:\n{diffs}"
