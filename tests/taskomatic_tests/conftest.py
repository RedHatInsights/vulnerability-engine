# -*- coding: utf-8 -*-
# pylint:disable=missing-docstring,redefined-outer-name

import threading
import psycopg2
import pytest
from tornado import testing
from tornado import ioloop
from tornado.httpserver import HTTPServer
from tornado.httpclient import AsyncHTTPClient

from common import database_handler

from taskomatic import taskomatic
from ..utils import restore_db


@pytest.fixture(scope='module')
def pg_db_conn(pg_db_mod):
    with database_handler.DatabasePool(1):
        conn = psycopg2.connect(**pg_db_mod.dsn())
        yield conn
        conn.close()


@pytest.fixture
def cleanup(request):
    def db_cleanup():
        restore_db(database_handler.pg_testing)
    request.addfinalizer(db_cleanup)


@pytest.fixture(scope="module")
def tornado_app():
    """Return app instance"""
    return taskomatic.APP


@pytest.fixture(scope="module")
def taskomatic_server(tornado_app):
    loop = ioloop.IOLoop()
    loop.make_current()
    socket, port = testing.bind_unused_port()
    server = HTTPServer(tornado_app)
    server.add_socket(socket)

    thread = threading.Thread(target=loop.start)
    thread.start()

    url = "http://localhost:%d" % port
    yield url

    loop.add_callback(server.stop)
    loop.add_callback(server.close_all_connections)
    loop.add_callback(loop.stop)

    thread.join()


@pytest.fixture()
def http_client():
    client = AsyncHTTPClient()
    yield client
    client.close()
