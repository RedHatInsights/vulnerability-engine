"""
Unit tests for db_metrics taskomatic job
"""
import pytest

import taskomatic.jobs.usage_metrics as um
from common.database_handler import DatabasePoolConnection

ACCOUNTS_BLACKLIST_TEXT = """
1 # hello
3
6"""
ACCOUNTS_BLACKLIST = {'1', '3', '6'}


class TestUsageMetrics:
    """
    Class holding all tests
    """

    @staticmethod
    @pytest.fixture(scope='module')
    def metrics_gather(pg_db_conn):
        """fixture returns metrics gatherer instance"""
        cur = pg_db_conn.cursor()
        metrics_g = um.MetricsGatherer(cur)
        yield metrics_g
        cur.close()

    @staticmethod
    def test_usage_metrics(pg_db_conn, monkeypatch):  # pylint: disable=unused-argument
        """Test gathering of usage metrics"""

        with DatabasePoolConnection() as conn:
            monkeypatch.setattr(um, 'get_conn', lambda: conn)
            monkeypatch.setattr(um.MetricsGatherer, 'process_accounts_blacklist_text', staticmethod(lambda text: ACCOUNTS_BLACKLIST))
            um.run()

        big_acc_count_f = um.BIG_ACCOUNTS_COUNT_F.collect()[0]
        assert big_acc_count_f.samples[0].value == 0.0  # 50 systems
        assert big_acc_count_f.samples[1].value == 0.0  # 100 systems
        assert big_acc_count_f.samples[2].value == 0.0  # 500 systems
        assert big_acc_count_f.samples[3].value == 0.0  # 1000 systems

        cve_status_usage_t = um.CVE_STATUS_USAGE_T.collect()
        assert cve_status_usage_t[0].samples[0].value == 2
        assert cve_status_usage_t[0].samples[1].value == 1
        assert len(cve_status_usage_t[0].samples) == 2

        cve_status_usage_tf = um.CVE_STATUS_USAGE_TF.collect()
        assert cve_status_usage_tf[0].samples[0].value == 2
        assert len(cve_status_usage_tf[0].samples) == 1

        cve_brisk_usage_t = um.CVE_BRISK_USAGE_T.collect()
        assert cve_brisk_usage_t[0].samples[0].value == 3
        assert cve_brisk_usage_t[0].samples[1].value == 2
        assert len(cve_brisk_usage_t[0].samples) == 2

        cve_brisk_usage_tf = um.CVE_BRISK_USAGE_TF.collect()
        assert cve_brisk_usage_tf[0].samples[0].value == 3
        assert len(cve_brisk_usage_tf[0].samples) == 1

        system_cve_status_usage_t = um.SYSTEM_CVE_STATUS_USAGE_T.collect()
        assert system_cve_status_usage_t[0].samples[0].value == 42.0
        assert system_cve_status_usage_t[0].samples[1].value == 10
        assert len(system_cve_status_usage_t[0].samples) == 2

        system_cve_status_usage_tf = um.SYSTEM_CVE_STATUS_USAGE_TF.collect()
        assert system_cve_status_usage_tf[0].samples[0].value == 42.0
        assert len(system_cve_status_usage_tf[0].samples) == 1

        fixed_cves = um.AVG_UNFIXED_AGE.collect()
        assert len(fixed_cves[0].samples) == 5

    @staticmethod
    def test_query_cve_status(metrics_gather: um.MetricsGatherer):
        """Test cve status usage query"""
        cve_status_usage = metrics_gather.query_cve_status_usage()
        assert cve_status_usage == [('2', 2), ('1', 1)]

    @staticmethod
    def test_query_system_cve_status(metrics_gather: um.MetricsGatherer):
        """Test system cve status usage query"""
        system_cve_status_usage = metrics_gather.query_system_cve_status_usage()
        assert system_cve_status_usage == [('0', 42), ('1', 10)]

    @staticmethod
    def test_query_cve_business_risk(metrics_gather: um.MetricsGatherer):
        """Test cve business risk usage query"""
        cve_business_risk_usage = metrics_gather.query_cve_business_risk_usage()
        assert cve_business_risk_usage == [('2', 3), ('1', 2)]

    @staticmethod
    def test_process_accounts_blacklist(metrics_gather: um.MetricsGatherer):
        """Test accounts blacklist text processing"""
        acc_blacklist: set = metrics_gather.process_accounts_blacklist_text(ACCOUNTS_BLACKLIST_TEXT)
        assert acc_blacklist == ACCOUNTS_BLACKLIST
