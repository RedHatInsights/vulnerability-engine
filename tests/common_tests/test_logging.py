# -*- coding: utf-8 -*-
# pylint: disable=no-self-use
"""
Test logging.
"""
import logging

import pytest

from common.config import Config
from common.logging import setup_cw_logging


class TestLogging:
    """TestLogging"""

    @pytest.fixture
    def cfg(self):
        """Return Config object."""
        return Config()

    def test_cw_disabled(self, caplog):
        """tests disabled cloudwatch logging"""
        with caplog.at_level(logging.INFO):
            logger = logging.getLogger("test_cw")
            setup_cw_logging(logger)
        assert caplog.records[0].msg == "CloudWatch logging disabled"
        caplog.clear()

    def test_no_cw(self, caplog, cfg, monkeypatch):
        """test_no_cw"""
        monkeypatch.setattr(cfg, "cw_aws_access_key_id", None)
        monkeypatch.setattr(cfg, "cw_aws_secret_access_key", None)
        monkeypatch.setattr(cfg, "cw_enabled", "TRUE")
        with caplog.at_level(logging.INFO):
            logger = logging.getLogger("test_cw")
            setup_cw_logging(logger)
        assert caplog.records[0].msg == "CloudWatch logging disabled due to missing access key"
        caplog.clear()

    def test_cw_err(self, caplog, cfg, monkeypatch):
        """test_cw_err"""
        monkeypatch.setattr(cfg, "cw_aws_access_key_id", "cw-aws-access-key-id")
        monkeypatch.setattr(cfg, "cw_aws_secret_access_key", "cw-aws-secret-access-key")
        monkeypatch.setattr(cfg, "cw_enabled", "TRUE")
        with caplog.at_level(logging.INFO):
            logger = logging.getLogger("test_cw")
            setup_cw_logging(logger)
        assert caplog.records[0].msg.startswith("Unable to enable CloudWatch logging:")
        caplog.clear()
