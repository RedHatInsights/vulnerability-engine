# pylint: disable=no-self-use,unused-argument
"""
Test suite for utils.
"""

import asyncio
import logging
import sys
import pytest

from common import utils


class TestException(Exception):
    """Exception for test"""


class TestUtils:
    """Test suite"""

    def test_ensure_version_higher(self, caplog, pg_db_conn):
        """Test version ensuring with bigger number"""
        utils.CFG.minimal_schema = 0
        with caplog.at_level(logging.INFO):
            utils.ensure_minimal_schema_version()
        assert f"minimal required: {utils.CFG.minimal_schema}, OK" in caplog.messages[0]

    def test_ensure_version_lower(self, caplog, pg_db_conn):
        """Test version ensuring with lower number"""
        utils.CFG.minimal_schema = sys.maxsize

        # sleep is not needed in test suite
        def sleep_break(_):
            raise TestException("OK")

        utils.sleep = sleep_break
        with pytest.raises(TestException):
            with caplog.at_level(logging.INFO):
                utils.ensure_minimal_schema_version()

        assert f"minimal required: {utils.CFG.minimal_schema}, waiting..." in caplog.messages[0]

    @pytest.mark.asyncio
    async def test_a_ensure_version_higher(self, caplog, pg_db_conn):
        """Test async version ensuring with bigger number"""
        utils.CFG.minimal_schema = 0
        with caplog.at_level(logging.INFO):
            await utils.a_ensure_minimal_schema_version()
        assert f"minimal required: {utils.CFG.minimal_schema}, OK" in caplog.messages[0]

    @pytest.mark.asyncio
    async def test_a_ensure_version_lower(self, caplog, monkeypatch, pg_db_conn):
        """Test async version ensuring with lower number"""
        utils.CFG.minimal_schema = sys.maxsize

        # sleep is not needed in test suite
        async def sleep_break(_):
            raise TestException("OK")

        monkeypatch.setattr(asyncio, "sleep", sleep_break)
        with pytest.raises(TestException):
            with caplog.at_level(logging.INFO):
                await utils.a_ensure_minimal_schema_version()

        assert f"minimal required: {utils.CFG.minimal_schema}, waiting..." in caplog.messages[0]

    def test_validate_msg_invalid(self):
        """Test validation of kafka message with invalid msg"""
        required = {"important": []}
        msg_dict = {"others": 123}

        res = utils.validate_kafka_msg(msg_dict, required)
        assert res is False

    def test_validate_msg_valid(self):
        """Test validation of kafka message with valid msg"""
        required = {"important": [], "very_important": ["password"]}
        msg_dict = {"important": 25, "very_important": {"password": 1234, "login": "asdf"}, "other": "yes"}

        res = utils.validate_kafka_msg(msg_dict, required)
        assert res is True

    def test_validate_msg_null_wrong(self):
        """Test validation of kafka message with invalid non nullable value"""
        required = {"important": [("password", False)]}
        msg_dict = {"important": {"password": None, "login": "asdf", "info": None}, "other": "yes"}

        res = utils.validate_kafka_msg(msg_dict, required)
        assert res is False

    def test_validate_msg_null_valid(self):
        """Test validation of kafka message with valid non nullable value"""
        required = {"important": [("password", False)]}
        msg_dict = {"important": {"password": "12345", "login": "asdf", "info": None}, "other": "yes"}

        res = utils.validate_kafka_msg(msg_dict, required)
        assert res is True

    def test_reporter_allowed(self):
        """Test validation of kafka message with allowed reporter"""
        msg_dict = {"host": {"reporter": "puptoo"}}
        res = utils.validate_kafka_msg(msg_dict, {"host": [("reporter", False)]})
        assert res is True

        msg_dict = {"input": {"host": {"reporter": "puptoo"}}}
        res = utils.validate_kafka_msg(msg_dict, {"input": [{"host": [("reporter", False)]}]})
        assert res is True

    def test_reporter_not_allowed(self):
        """Test validation of kafka message with not allowed reporter"""
        msg_dict = {"host": {"reporter": "invalid"}}
        res = utils.reporter_allowed(msg_dict)
        assert res is False

        msg_dict = {"input": {"host": {"reporter": "invalid"}}}
        res = utils.reporter_allowed(msg_dict)
        assert res is False
