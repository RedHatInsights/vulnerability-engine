# -*- coding: utf-8 -*-
# pylint:disable=missing-docstring
import os
from pathlib import Path
import subprocess

import psycopg2
import pytest
import testing.postgresql

from common import database_handler

_CURDIR = Path(__file__).resolve()
_TESTS_DIR = _CURDIR.parent.parent
_VULN_ENG_DIR = _TESTS_DIR.parent
VMAAS_MOCK = _TESTS_DIR.joinpath("scripts", "vmaas_mock.py")
VE_USER = _VULN_ENG_DIR.joinpath("database", "schema", "ve_db_user_create_postgresql.sql")
VE_PG = _VULN_ENG_DIR.joinpath("database", "schema", "ve_db_postgresql.sql")
VE_DATA = _VULN_ENG_DIR.joinpath("database", "schema", "ve_db_dev_data.sql")

os.environ["POSTGRESQL_DATABASE"] = "unit_tests"
os.environ["POSTGRESQL_HOST"] = "127.0.0.1"
os.environ["VMAAS_HOST"] = "http://localhost:8080"


@pytest.fixture(scope="session", autouse=True)
def run_vmaas_mock():
    """Run mocked VMaaS."""
    vmaas_mock = subprocess.Popen(str(VMAAS_MOCK))
    yield vmaas_mock
    # teardown - stop vmaas_mock
    vmaas_mock.terminate()


@pytest.fixture(scope="session")
def pg_db_conn():
    """Fixture for postgre db connection."""

    def _handler(postgresql):
        """Init DB with data."""
        conn = psycopg2.connect(**postgresql.dsn())
        cursor = conn.cursor()
        cursor.execute(VE_USER.read_text())
        cursor.execute(VE_PG.read_text())
        cursor.execute(VE_DATA.read_text())
        cursor.close()
        conn.commit()
        conn.close()

    # Create temporary posgresql server
    # pylint: disable=invalid-name
    Postgresql = testing.postgresql.PostgresqlFactory(cache_initialized_db=True, on_initialized=_handler)
    postgresql = Postgresql()

    os.environ["POSTGRESQL_PORT"] = str(postgresql.dsn()["port"])
    database_handler.init_db()
    conn = psycopg2.connect(**postgresql.dsn())
    yield conn

    # teardown - close connection, stop postgresql
    conn.close()
    postgresql.stop()
