# -*- coding: utf-8 -*-
# pylint: disable=no-self-use
"""
Unit tests for evaulator module
"""
import pytest

from evaluator.evaluator import LOGGER, QueueEvaluator
import evaluator.evaluator as evaluator_module


class TestMqueueWriter:
    """Pretends to know how to send() kafka msgs"""
    def send(self, msg, loop=None):  # pylint: disable=unused-argument
        """pretend to be kafka message"""
        LOGGER.info(msg)


class TestEvaluator:
    """Unit tests for vulnerability-evaluator."""

    @pytest.fixture(scope="class")
    def evaluator(self, pg_db_conn):  # pylint: disable=unused-argument
        """Setup Evaluator object."""
        return QueueEvaluator()

    @staticmethod
    def _get_vulnerabilities(evaluator, pg_db_conn, cve, system_id: int, inventory_id: str, package_json: str):
        rh_account = "0"
        opt_out = False
        stale = False
        cur = pg_db_conn.cursor()
        evaluator.evaluate_vmaas([system_id, inventory_id, package_json, rh_account, opt_out, stale], cur)
        pg_db_conn.commit()
        sql = f"select sv.id, sv.system_id, cm.cve, sv.first_reported, sv.when_mitigated, sv.status_id \
                from system_vulnerabilities sv join cve_metadata cm on sv.cve_id = cm.id \
                where system_id = {system_id}"
        if cve:
            sql += f" and cm.cve = '{cve}'"
        cur.execute(sql)
        return cur.fetchall()

    def test_mitigation_1_single(self, evaluator, pg_db_conn):
        """Test that unmitigated CVE becomes mitigated."""
        rows = self._get_vulnerabilities(evaluator, pg_db_conn, cve="CVE-2017-7", system_id=3, inventory_id="INV-3",
                                         package_json='{"package_list": ["bash-0:4.2.46-20.el7_2.x86_64"]}')
        assert len(rows) == 1
        when_mitigated = rows[0][4]
        assert when_mitigated

    def test_mitigation_2_non_exist(self, evaluator, pg_db_conn):
        """Test that unmitigated CVE becomes mitigated."""
        # non existing package implies no CVEs
        rows = self._get_vulnerabilities(evaluator, pg_db_conn, cve="CVE-2017-6", system_id=4, inventory_id="INV-4",
                                         package_json='{"package_list": ["non_exist"]}')
        assert len(rows) == 1
        when_mitigated = rows[0][4]
        assert when_mitigated

    def test_mitigation_3_empty(self, evaluator, pg_db_conn):
        """Test that unmitigated CVE becomes mitigated."""
        # no packages implies no CVEs
        rows = self._get_vulnerabilities(evaluator, pg_db_conn, cve="CVE-2017-7", system_id=5, inventory_id="INV-5",
                                         package_json='{"package_list": []}')
        assert len(rows) == 1
        when_mitigated = rows[0][4]
        assert when_mitigated

    def test_double_mitigation(self, evaluator, pg_db_conn):
        """Test that unmitigated CVE becomes mitigated only once and timestamp is not updated twice."""
        rows = self._get_vulnerabilities(evaluator, pg_db_conn, cve="CVE-2017-8", system_id=3, inventory_id="INV-3",
                                         package_json='{"package_list": ["bash-0:4.2.46-20.el7_2.x86_64"]}')
        assert len(rows) == 1
        when_mitigated_1 = rows[0][4]
        rows = self._get_vulnerabilities(evaluator, pg_db_conn, cve="CVE-2017-8", system_id=3, inventory_id="INV-3",
                                         package_json='{"package_list": ["bash-0:4.2.46-20.el7_2.x86_64"]}')
        assert len(rows) == 1
        when_mitigated_2 = rows[0][4]
        assert when_mitigated_1 == when_mitigated_2

    def test_unmitigation_1(self, evaluator, pg_db_conn):
        """Test that mitigated CVE becomes unmitigated."""
        # send package needed to fix
        rows = self._get_vulnerabilities(evaluator, pg_db_conn, cve="CVE-2018-5", system_id=5, inventory_id="INV-5",
                                         package_json='{"package_list": ["bash-0:4.2.46-20.el7_2.x86_64"]}')
        assert len(rows) == 1
        when_mitigated = rows[0][4]
        assert when_mitigated is None

    def test_evaluate_vmaas_1_single(self, evaluator, pg_db_conn, monkeypatch, caplog):
        """Test evaluation of CVEs from VMaaS."""
        caplog.clear()
        monkeypatch.setattr(evaluator_module, 'WEBHOOKS_QUEUE', TestMqueueWriter())
        rows = self._get_vulnerabilities(evaluator, pg_db_conn, cve=None, system_id=0, inventory_id="INV-0",
                                         package_json='{"package_list": ["bash-0:4.2.46-20.el7_2.x86_64"]}')
        assert len(rows) == 3
        cves = [row[2] for row in rows]
        new_cves = ("CVE-2018-5", "CVE-2016-0634", "CVE-2016-9401")
        for new_cve in new_cves:   # check all new_cves are associated with that system
            assert new_cve in cves
        for row in rows:           # check all new_cves are not mitigated
            when_mitigated = row[4]
            assert when_mitigated is None
        assert caplog.records[1].msg['application'] == 'vulnerability'
        assert caplog.records[1].msg['event_type'] == 'new-host-cve'
        assert caplog.records[1].msg['level'] == '7to10'

    def test_evaluate_vmaas_2_empty(self, evaluator, pg_db_conn):
        """Test evaluation of CVEs from VMaaS."""

        rows = self._get_vulnerabilities(evaluator, pg_db_conn, cve=None, system_id=1, inventory_id="INV-1",
                                         package_json='{"package_list": []}')
        assert rows == []

    def test_evaluate_vmaas_3_non_exist(self, evaluator, pg_db_conn):
        """Test evaluation of CVEs from VMaaS."""
        rows = self._get_vulnerabilities(evaluator, pg_db_conn, cve=None, system_id=2, inventory_id="INV-2",
                                         package_json='{"package_list": ["non_exist"]}')
        assert len(rows) == 3
        cves = [row[2] for row in rows]
        new_cves = ("CVE-2018-5", "CVE-2016-0634", "CVE-2016-9401")
        for new_cve in new_cves:   # check all new_cves are associated with that system
            assert new_cve in cves
        for row in rows:           # check all new_cves are not mitigated
            when_mitigated = row[4]
            assert when_mitigated is None

    def test_evaluate_vmaas_4_force_400(self, evaluator, pg_db_conn, caplog):
        """Test evaluation of CVEs from VMaaS."""
        caplog.clear()
        inventory_id = "INV-0"
        self._get_vulnerabilities(evaluator, pg_db_conn, cve=None, system_id=0, inventory_id=inventory_id,
                                  package_json='{"package_list": ["FORCE_CODE_400"]}')
        joined_logs = "".join([rec.message for rec in caplog.records])
        assert "Error during request to VMaaS endpoint" in joined_logs
        assert f"Evaluating vulnerabilities for inventory_id: {inventory_id}" in joined_logs  # add to the other tests
