"""
Unit tests for evaulator module
"""
# pylint: disable=no-self-use
import pytest

from evaluator.evaluator import QueueEvaluator

SYSTEM_PLATFORM = [
    ("pkg_single", "INV-ID00-0000-0000", '{"package_list": ["bash-0:4.2.46-20.el7_2.x86_64"]}',
     "00000000", False, False),
    ("pkg_list_empty", "INV-ID00-0000-1111", '{"package_list": []}', "00000000", False, False),
    ("pkg_non_exist", "INV-ID00-0000-2222", '{"package_list": ["non_exist"]}', "00000000", False, False),
    ("force_400", "INV-ID00-0000-0000", '{"package_list": ["FORCE_CODE_400"]}', "00000000", False, False),
]

SYSTEM_PLATFORM_MITIGATION = [
    ("CVE-2017-5753", "INV-ID00-0000-3333", '{"package_list": ["bash-0:4.2.46-20.el7_2.x86_64"]}',
     "00000000", False, False),
    ("CVE-2017-5715", "INV-ID00-0000-4444", '{"package_list": ["non_exist"]}', "00000000", False, False),
    ("CVE-2017-5753", "INV-ID00-0000-5555", '{"package_list": []}', "00000000", False, False),
]
SYSTEM_PLATFORM_UNMITIGATION = (
    "CVE-2016-7543",
    "INV-ID00-0000-5555",
    '{"package_list": ["bash-0:4.2.46-20.el7_2.x86_64"]}',
    "00000000",
    False,
    False
)

# CVEs returned by vmaas_mock
NEW_CVES = ("CVE-2016-7543", "CVE-2016-0634", "CVE-2016-9401")


class QueueEvaluatorTest(QueueEvaluator):
    """QueueEvaluatorTest class inherits QueueEvaluator."""
    # pylint: disable=super-init-not-called

    def __init__(self, pg_db_conn):
        """Override __init__ to not init database, DB is initialized in pg_db_conn fixture."""
        self.conn = pg_db_conn
        self.impact_id_map = self._prepare_impact_id_map()


class TestEvaluator:
    """TestEvaluator class. Unit tests for vulnerability-evaluator."""

    @pytest.fixture(scope="module")
    def evaluator(self, pg_db_conn):
        """Setup Evaluator object."""
        # pylint: disable=too-many-function-args
        return QueueEvaluatorTest(pg_db_conn)

    @pytest.mark.parametrize(
        "system_platform", SYSTEM_PLATFORM_MITIGATION, ids=[p[2] for p in SYSTEM_PLATFORM_MITIGATION]
    )
    def test_mitigation(self, evaluator, pg_db_conn, system_platform):
        """Test that unmitigated CVE becomes mitigated."""
        evaluator.evaluate_vmaas(system_platform[1:])
        cur = pg_db_conn.cursor()
        cur.execute(
            f"select when_mitigated from system_vulnerabilities where "
            f"inventory_id = '{system_platform[1]}' and cve = '{system_platform[0]}'"
        )
        assert cur.fetchone()[0]

    def test_unmitigation(self, evaluator, pg_db_conn):
        """Test that mitigated CVE becomes unmitigated."""
        evaluator.evaluate_vmaas(SYSTEM_PLATFORM_UNMITIGATION[1:])
        cur = pg_db_conn.cursor()
        cur.execute(
            f"select when_mitigated from system_vulnerabilities where "
            f"inventory_id = '{SYSTEM_PLATFORM_UNMITIGATION[1]}' and cve = '{SYSTEM_PLATFORM_UNMITIGATION[0]}'"
        )
        assert not cur.fetchone()[0]

    @pytest.mark.parametrize("system_platform", SYSTEM_PLATFORM, ids=[p[0] for p in SYSTEM_PLATFORM])
    def test_evaluate_vmaas(self, evaluator, system_platform, caplog, pg_db_conn):
        """Test evaluation of CVEs from VMaaS."""
        caplog.clear()
        evaluator.evaluate_vmaas(system_platform[1:])
        # get records from logs
        logs = [rec.message for rec in caplog.records]
        assert f"Evaluating vulnerabilities for inventory_id: {system_platform[1]}" in logs

        if system_platform[0] == "force_400":
            # VMaaS Mock forced to return code 400
            for log in logs:
                try:
                    assert "Error during request to VMaaS endpoint" in log
                    break
                except AssertionError:
                    continue
            else:
                assert False
        else:
            cur = pg_db_conn.cursor()
            cur.execute(f"select cve from system_vulnerabilities where inventory_id = '{system_platform[1]}'")
            cves = [cve[0] for cve in cur.fetchall()]
            if system_platform[0] == "pkg_single":
                # assert that new cves for the system are unmitigated
                for new_cve in NEW_CVES:
                    assert new_cve in cves
                cur.execute(
                    f"select when_mitigated from system_vulnerabilities where "
                    f"inventory_id = '{system_platform[1]}' and cve in {NEW_CVES}"
                )
                assert not cur.fetchone()[0]
            # all the other CVEs should be mitigated
            cur.execute(
                f"select when_mitigated from system_vulnerabilities where "
                f"inventory_id = '{system_platform[1]}' and cve not in {NEW_CVES}"
            )
            for cve_mitigated in cur.fetchall():
                assert cve_mitigated[0]
