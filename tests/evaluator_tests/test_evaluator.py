# -*- coding: utf-8 -*-
# pylint: disable=no-self-use
"""
Unit tests for evaulator module
"""
import pytest
import evaluator.evaluator as evaluator


class TestEvaluator:
    """Unit tests for vulnerability-evaluator."""

    # All test coroutines will be treated as marked.
    pytestmark = pytest.mark.asyncio

    # @staticmethod
    async def _get_vulnerabilities(self, asyncio_conn, pg_db_conn, cve, system_id: int, inventory_id: str, package_json: str):
        rh_account = 0
        opt_out = False
        stale = False
        transaction = asyncio_conn.transaction()
        await transaction.start()
        await evaluator.evaluate_vmaas([system_id, inventory_id, package_json, rh_account, opt_out, stale], asyncio_conn)
        await transaction.commit()
        cur = pg_db_conn.cursor()
        sql = f"select sv.id, sv.system_id, cm.cve, sv.first_reported, sv.when_mitigated, sv.status_id \
                from system_vulnerabilities sv join cve_metadata cm on sv.cve_id = cm.id \
                where system_id = {system_id} and rh_account_id = {rh_account}"
        if cve:
            sql += f" and cm.cve = '{cve}'"
        cur.execute(sql)
        return cur.fetchall()

    async def test_mitigation_1_single(self, asyncio_conn, pg_db_conn):
        """Test that unmitigated CVE becomes mitigated."""
        rows = await self._get_vulnerabilities(asyncio_conn, pg_db_conn, "CVE-2017-7", system_id=3,
                                               inventory_id="00000000-0000-0000-0000-000000000003",
                                               package_json='{"package_list": ["bash-0:4.2.46-20.el7_2.x86_64"]}')
        assert len(rows) == 1
        when_mitigated = rows[0][4]
        assert when_mitigated

    async def test_mitigation_2_non_exist(self, asyncio_conn, pg_db_conn):
        """Test that unmitigated CVE becomes mitigated."""
        # non existing package implies no CVEs
        rows = await self._get_vulnerabilities(asyncio_conn, pg_db_conn, "CVE-2017-6", 4, "00000000-0000-0000-0000-000000000004",
                                               '{"package_list": ["non_exist"]}')
        assert len(rows) == 1
        when_mitigated = rows[0][4]
        assert when_mitigated

    async def test_mitigation_3_empty(self, asyncio_conn, pg_db_conn):
        """Test that unmitigated CVE becomes mitigated."""
        # no packages implies no CVEs
        rows = await self._get_vulnerabilities(asyncio_conn, pg_db_conn, cve="CVE-2017-7", system_id=5,
                                               inventory_id="00000000-0000-0000-0000-000000000005",
                                               package_json='{"package_list": []}')
        assert len(rows) == 1
        when_mitigated = rows[0][4]
        assert when_mitigated

    async def test_double_mitigation(self, asyncio_conn, pg_db_conn):
        """Test that unmitigated CVE becomes mitigated only once and timestamp is not updated twice."""
        rows = await self._get_vulnerabilities(asyncio_conn, pg_db_conn, cve="CVE-2017-8", system_id=3,
                                               inventory_id="00000000-0000-0000-0000-000000000003",
                                               package_json='{"package_list": ["bash-0:4.2.46-20.el7_2.x86_64"]}')
        assert len(rows) == 1
        when_mitigated_1 = rows[0][4]
        rows = await self._get_vulnerabilities(asyncio_conn, pg_db_conn, cve="CVE-2017-8", system_id=3,
                                               inventory_id="00000000-0000-0000-0000-000000000003",
                                               package_json='{"package_list": ["bash-0:4.2.46-20.el7_2.x86_64"]}')
        assert len(rows) == 1
        when_mitigated_2 = rows[0][4]
        assert when_mitigated_1 == when_mitigated_2

    async def test_unmitigation_1(self, asyncio_conn, pg_db_conn):
        """Test that mitigated CVE becomes unmitigated."""
        # send package needed to fix
        rows = await self._get_vulnerabilities(asyncio_conn, pg_db_conn, cve="CVE-2018-5", system_id=5,
                                               inventory_id="00000000-0000-0000-0000-000000000005",
                                               package_json='{"package_list": ["bash-0:4.2.46-20.el7_2.x86_64"]}')
        assert len(rows) == 1
        when_mitigated = rows[0][4]
        assert when_mitigated is None

    async def test_evaluate_vmaas_1_single(self, asyncio_conn, pg_db_conn):
        """Test evaluation of CVEs from VMaaS."""
        rows = await self._get_vulnerabilities(asyncio_conn, pg_db_conn, cve=None, system_id=0,
                                               inventory_id="00000000-0000-0000-0000-000000000000",
                                               package_json='{"package_list": ["bash-0:4.2.46-20.el7_2.x86_64"]}')
        assert len(rows) == 3
        cves = [row[2] for row in rows]
        new_cves = ("CVE-2018-5", "CVE-2016-0634", "CVE-2016-9401")
        for new_cve in new_cves:   # check all new_cves are associated with that system
            assert new_cve in cves
        for row in rows:           # check all new_cves are not mitigated
            when_mitigated = row[4]
            assert when_mitigated is None

    async def test_evaluate_vmaas_2_empty(self, asyncio_conn, pg_db_conn):
        """Test evaluation of CVEs from VMaaS."""

        rows = await self._get_vulnerabilities(asyncio_conn, pg_db_conn, cve=None, system_id=1,
                                               inventory_id="00000000-0000-0000-0000-000000000001",
                                               package_json='{"package_list": []}')
        assert rows == []

    async def test_evaluate_vmaas_3_non_exist(self, asyncio_conn, pg_db_conn):
        """Test evaluation of CVEs from VMaaS."""
        rows = await self._get_vulnerabilities(asyncio_conn, pg_db_conn, cve=None, system_id=2,
                                               inventory_id="00000000-0000-0000-0000-000000000002",
                                               package_json='{"package_list": ["non_exist"]}')
        assert len(rows) == 3
        cves = [row[2] for row in rows]
        new_cves = ("CVE-2018-5", "CVE-2016-0634", "CVE-2016-9401")
        for new_cve in new_cves:   # check all new_cves are associated with that system
            assert new_cve in cves
        for row in rows:           # check all new_cves are not mitigated
            when_mitigated = row[4]
            assert when_mitigated is None

    async def test_evaluate_vmaas_4_force_400(self, asyncio_conn, pg_db_conn, caplog):
        """Test evaluation of CVEs from VMaaS."""
        caplog.clear()
        inventory_id = "00000000-0000-0000-0000-000000000000"
        await self._get_vulnerabilities(asyncio_conn, pg_db_conn, cve=None, system_id=0, inventory_id=inventory_id,
                                        package_json='{"package_list": ["FORCE_CODE_400"]}')
        joined_logs = "".join([rec.message for rec in caplog.records])
        assert "Error during request to VMaaS endpoint" in joined_logs
        assert f"Evaluating vulnerabilities for inventory_id: {inventory_id}" in joined_logs  # add to the other tests
