# pylint: disable=no-self-use,invalid-name,too-many-public-methods
"""
Unit tests for RBAC manager.
"""
import pytest
import requests
from flask import g

import manager.rbac_manager
from .vuln_testcase import FlaskTestCase
from manager.rbac_filters import filter_excluded
from manager.rbac_manager import RbacAction
from manager.rbac_manager import RbacApp
from manager.rbac_manager import RbacException
from manager.rbac_manager import RbacManager
from manager.rbac_manager import RbacPermission
from manager.rbac_manager import RbacResource


RBAC_RESPONSE = {
    "data": [
        {
            "permission": "inventory:hosts:read",
            "resourceDefinitions": [
                {
                    "attributeFilter": {
                        "key": "group.id",
                        "value": [
                            "00000000-1111-0000-0000-000000000000",  # Group 1
                            "00000000-2222-0000-0000-000000000000",  # Group 2
                            None,  # No group (ungrouped hosts)
                        ],
                        "operation": "in",
                    }
                }
            ],
        },
        {"permission": "vulnerability:vulnerability_results:read"},
        {"permission": "vulnerability:system.opt_out:write"},
    ]
}
RBAC_RESPONSE_ANY = {
    "data": [
        {"permission": "vulnerability:*:*"},
        {"permission": "inventory:hosts:read"},
    ]
}
RBAC_RESPONSE_READ = {
    "data": [
        {"permission": "vulnerability:vulnerability_results:read"},
        {"permission": "vulnerability:system.opt_out:read"},
        {"permission": "inventory:hosts:read"},
    ]
}
RBAC_RESPONSE_NO_INVENTORY = {
    "data": [
        {"permission": "vulnerability:*:*"},
    ]
}
RBAC_RESPONSE_MULTIPLE = {
    "data": [
        {
            "permission": "inventory:hosts:read",
            "resourceDefinitions": [
                {
                    "attributeFilter": {
                        "key": "group.id",
                        "value": [
                            "00000000-1111-0000-0000-000000000000",
                        ],
                        "operation": "in",
                    }
                }
            ],
        },
        {
            "permission": "inventory:hosts:*",
            "resourceDefinitions": [
                {
                    "attributeFilter": {
                        "key": "group.id",
                        "value": [
                            "00000000-8888-0000-0000-000000000000",
                            None,
                        ],
                        "operation": "in",
                    }
                }
            ],
        },
    ]
}
RBAC_RESPONSE_UNGROUPED_ONLY = {
    "data": [
        {
            "permission": "inventory:hosts:read",
            "resourceDefinitions": [
                {
                    "attributeFilter": {
                        "key": "group.id",
                        "value": [None],  # only ungrouped hosts
                        "operation": "in",
                    }
                }
            ],
        }
    ]
}
RBAC_RESPONSE_NO_ACCESS = {
    "data": [
        {
            "permission": "inventory:hosts:read",
            "resourceDefinitions": [
                {
                    "attributeFilter": {
                        "key": "group.id",
                        "value": [],  # no hosts
                        "operation": "in",
                    }
                }
            ],
        },
        {
            "permission": "inventory:hosts:*",
            "resourceDefinitions": [
                {
                    "attributeFilter": {
                        "key": "group.id",
                        "value": [],  # no hosts
                        "operation": "in",
                    }
                }
            ],
        },
    ]
}
RBAC_PERM_VULN_RES = RbacPermission(RbacApp.VULNERABILITY, RbacResource.VULNERABILITY_RESULTS, RbacAction.READ)
RBAC_PERM_OPT_WRITE = RbacPermission(RbacApp.VULNERABILITY, RbacResource.SYSTEM_OPT_OUT, RbacAction.WRITE)
RBAC_PERM_OPT_READ = RbacPermission(RbacApp.VULNERABILITY, RbacResource.SYSTEM_OPT_OUT, RbacAction.READ)
RBAC_PERM_BR_STATUS = RbacPermission(RbacApp.VULNERABILITY, RbacResource.CVE_BUSINESS_RISK_AND_STATUS, RbacAction.WRITE)
RBAC_PERM_ADV_REPORT = RbacPermission(RbacApp.VULNERABILITY, RbacResource.ADVANCED_REPORT, RbacAction.READ)

RBAC_REQUIRED_PERMS = [[RBAC_PERM_OPT_WRITE, RBAC_PERM_VULN_RES]]
RBAC_REQUIRED_PERMS_MULTIPLE = [
    [RBAC_PERM_ADV_REPORT],
    [RBAC_PERM_OPT_WRITE, RBAC_PERM_VULN_RES],
    [RBAC_PERM_VULN_RES, RBAC_PERM_BR_STATUS],
]

RBAC_FILTER_VALUE_PERMS = {
    "test_field": (RBAC_REQUIRED_PERMS, True),
    "test_field2": (
        [[RBAC_PERM_OPT_WRITE, RBAC_PERM_ADV_REPORT]] + RBAC_REQUIRED_PERMS + [[RBAC_PERM_BR_STATUS, RBAC_PERM_OPT_WRITE]],
        "-sort",
    ),
    "test_field3": ([[RBAC_PERM_BR_STATUS]], "+sort"),
    "test_field4": (
        [
            [RBAC_PERM_BR_STATUS, RBAC_PERM_ADV_REPORT],
            [RBAC_PERM_VULN_RES, RBAC_PERM_ADV_REPORT],
            [RBAC_PERM_BR_STATUS, RBAC_PERM_OPT_WRITE],
        ],
        "+test",
    ),
}


class MockRbacResponse:
    """Mock for RBAC response"""

    def __init__(self, json_res, status_code):
        self.json_res = json_res
        self.status_code = status_code

    def json(self):
        """Mock of json method"""
        return self.json_res


@pytest.fixture(autouse=True)
def enable_granular_rbac(monkeypatch):
    """Fixture to enable granular RBAC feature flag"""
    monkeypatch.setattr(manager.rbac_manager.CFG, "granular_rbac", True)


class TestRbacManager(FlaskTestCase):
    """Test suite for rbac manager"""

    def test_rbac_permission_formating(self):
        """Test formatting of rbac permission"""
        perm = RbacPermission(RbacApp.VULNERABILITY, RbacResource.VULNERABILITY_RESULTS, RbacAction.WRITE)
        assert str(perm) == f"{RbacApp.VULNERABILITY}:{RbacResource.VULNERABILITY_RESULTS}:{RbacAction.WRITE}"

    def test_rbac_permission_eq(self):
        """Test equality check of permissions"""
        perm1 = RbacPermission(RbacApp.VULNERABILITY, RbacResource.CVE_BUSINESS_RISK_AND_STATUS, RbacAction.READ)
        perm2 = RbacPermission(RbacApp.VULNERABILITY, RbacResource.CVE_BUSINESS_RISK_AND_STATUS, RbacAction.READ)
        perm3 = RbacPermission(RbacApp.VULNERABILITY, RbacResource.SYSTEM_CVE_STATUS, RbacAction.ANY)
        assert perm1 == perm2
        assert perm1 != perm3

    def test_rbac_permission_any(self):
        """Test equality of ANY/* permissions"""
        perm_inv_any = RbacPermission(RbacApp.INVENTORY, RbacResource.ANY, RbacAction.ANY)
        perm_inv_hosts_any = RbacPermission(RbacApp.INVENTORY, RbacResource.HOSTS, RbacAction.ANY)
        perm_inv_hosts_read = RbacPermission(RbacApp.INVENTORY, RbacResource.HOSTS, RbacAction.READ)
        perm_inv_hosts_write = RbacPermission(RbacApp.INVENTORY, RbacResource.HOSTS, RbacAction.WRITE)
        perm_inv_any_write = RbacPermission(RbacApp.INVENTORY, RbacResource.ANY, RbacAction.WRITE)
        perm_inv_any_read = RbacPermission(RbacApp.INVENTORY, RbacResource.ANY, RbacAction.READ)

        # inventory:hosts:read != inventory:hosts:write
        assert perm_inv_hosts_read != perm_inv_hosts_write
        # inventory:hosts:read == inventory:hosts:*
        assert perm_inv_hosts_read == perm_inv_hosts_any
        # inventory:hosts:write == inventory:hosts:*
        assert perm_inv_hosts_write == perm_inv_hosts_any
        # inventory:hosts:read == inventory:*:*
        assert perm_inv_hosts_read == perm_inv_any
        # inventory:hosts:write == inventory:*:*
        assert perm_inv_hosts_write == perm_inv_any
        # inventory:hosts:read == inventory:*:read
        assert perm_inv_hosts_read == perm_inv_any_read
        # inventory:hosts:read != inventory:*:write
        assert perm_inv_hosts_read != perm_inv_any_write
        # inventory:*:read != inventory:*:write
        assert perm_inv_any_read != perm_inv_any_write
        # inventory:*:read == inventory:*:*
        assert perm_inv_any_read == perm_inv_any

    def _prepare_user_permissions(self, perms_res, rbac_mng, monkeypatch, status_code=200):
        monkeypatch.setattr(rbac_mng, "rbac_url", "rbac.url")
        monkeypatch.setattr(manager.rbac_manager.CFG, "disable_rbac", False)

        def _mock_get(*_, **__):
            return MockRbacResponse(perms_res, status_code)

        monkeypatch.setattr(requests, "get", _mock_get)
        perms, _ = rbac_mng.fetch_permissions(0)
        g.rbac_perms = perms  # pylint:disable=assigning-non-slot

    def test_fetch_permissions(self, monkeypatch):
        """Test permission fetching and parsing"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        perms, _ = rbac_mng.fetch_permissions(0)
        assert RBAC_PERM_VULN_RES in perms
        assert RBAC_PERM_OPT_WRITE in perms

    def test_fetch_groups(self, monkeypatch):
        """Test inventory groups parsing"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        _, group_ids = rbac_mng.fetch_permissions(0)
        assert group_ids is not None
        assert group_ids == [
            [{"id": "00000000-1111-0000-0000-000000000000"}],
            [{"id": "00000000-2222-0000-0000-000000000000"}],
            [],
        ]

    def test_fetch_groups_multiple(self, monkeypatch):
        """Test inventory groups parsing"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE_MULTIPLE, rbac_mng, monkeypatch)

        _, group_ids = rbac_mng.fetch_permissions(0)
        assert group_ids is not None
        assert group_ids == [
            [{"id": "00000000-1111-0000-0000-000000000000"}],
            [{"id": "00000000-8888-0000-0000-000000000000"}],
            [],
        ]

    def test_fetch_groups_no_inventory(self, monkeypatch):
        """Test inventory groups parsing - no invetory groups specified, global access"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE_ANY, rbac_mng, monkeypatch)

        _, group_ids = rbac_mng.fetch_permissions(0)
        assert group_ids == []

    def test_fetch_groups_ungrouped_only(self, monkeypatch):
        """Test inventory groups parsing - access to ungrouped systems only"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE_UNGROUPED_ONLY, rbac_mng, monkeypatch)

        _, group_ids = rbac_mng.fetch_permissions(0)
        assert group_ids == [[]]

    def test_fetch_groups_no_access(self, monkeypatch):
        """Test inventory groups parsing - empty array in `value` - no access to any group"""
        rbac_mng = RbacManager()
        with pytest.raises(RbacException):
            self._prepare_user_permissions(RBAC_RESPONSE_NO_ACCESS, rbac_mng, monkeypatch)

    def test_fetch_groups_no_permissions(self, monkeypatch):
        """Test inventory groups parsing - missing inv groups permission"""
        rbac_mng = RbacManager()
        with pytest.raises(RbacException):
            self._prepare_user_permissions(RBAC_RESPONSE_NO_INVENTORY, rbac_mng, monkeypatch)

    def test_fetch_rbac_unavailable(self, monkeypatch):
        """Test RBAC permission fetch with rbac not working"""
        rbac_mng = RbacManager()

        def _mock_get(*_, **__):
            raise requests.exceptions.RequestException

        monkeypatch.setattr(manager.rbac_manager.CFG, "disable_rbac", False)
        monkeypatch.setattr(requests, "get", _mock_get)

        with pytest.raises(RbacException):
            rbac_mng.fetch_permissions(0)

    def test_fetch_rbac_not_disabled(self, monkeypatch):
        """Test RBAC fetch with not set url and not disabled"""
        rbac_mng = RbacManager()
        monkeypatch.setattr(rbac_mng, "rbac_url", None)
        monkeypatch.setattr(manager.rbac_manager.CFG, "disable_rbac", False)

        with pytest.raises(RbacException):
            rbac_mng.fetch_permissions(0)

    def test_fetch_rbac_disabled(self, monkeypatch):
        """Test RBAC fetch with not set url and disabled RBAC"""
        rbac_mng = RbacManager()
        monkeypatch.setattr(rbac_mng, "rbac_url", None)
        monkeypatch.setattr(manager.rbac_manager.CFG, "disable_rbac", True)

        perms, group_ids = rbac_mng.fetch_permissions(0)
        # if rbac does not have set URL and is disabled return vulnerability:*:*
        assert perms == [
            RbacPermission(RbacApp.VULNERABILITY, RbacResource.ANY, RbacAction.ANY),
            RbacPermission(RbacApp.INVENTORY, RbacResource.HOSTS, RbacAction.READ),
        ]
        assert group_ids == []

    def test_need_permissions_has_single(self, monkeypatch):
        """Test permissions checking OR operator"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        @rbac_mng.need_permissions(RBAC_REQUIRED_PERMS)
        def test_fun():
            return True

        # user has one of requested permission sets, thus function should be run
        res = test_fun()
        assert res is True

    def test_need_permissions_hasnot_single(self, monkeypatch):
        """Test permissions checking OR operator wrong permissions"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        @rbac_mng.need_permissions([[RbacPermission(RbacApp.VULNERABILITY, RbacResource.CVE_BUSINESS_RISK_AND_STATUS, RbacAction.READ)]])
        def test_fun():
            return True

        # user has none of requested permission sets, return 403
        res = test_fun()
        assert res[1] == 403  # pylint:disable=unsubscriptable-object

    def test_need_permission_has_multiple(self, monkeypatch):
        """Test permission checking AND operator"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        @rbac_mng.need_permissions(RBAC_REQUIRED_PERMS)
        def test_fun():
            return True

        # user has one set of permission from permission sets, return true
        res = test_fun()
        assert res is True  # pylint:disable=unsubscriptable-object

    def test_need_permissions_hasnot_multiple(self, monkeypatch):
        """Test permission checking AND operator wrong permissions"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        @rbac_mng.need_permissions(
            [[RBAC_PERM_ADV_REPORT], [RBAC_PERM_BR_STATUS, RBAC_PERM_OPT_WRITE], [RBAC_PERM_VULN_RES, RBAC_PERM_ADV_REPORT]]
        )
        def test_fun():
            return True

        # user has none of requested permission sets, return 403
        res = test_fun()
        assert res[1] == 403  # pylint:disable=unsubscriptable-object

    def test_need_permissions_any(self, monkeypatch):
        """Test permissions for ANY permission"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE_ANY, rbac_mng, monkeypatch)

        @rbac_mng.need_permissions(RBAC_REQUIRED_PERMS)
        def test_fun():
            return True

        # user has vulnerability:*:* permission, thus function should be run
        res = test_fun()
        assert res is True

    def test_filter_value_perms_has_one(self, monkeypatch):
        """Test permissions for filter values"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        @rbac_mng.need_permissions_filter_value(RBAC_FILTER_VALUE_PERMS)
        def test_filter(*_, **__):
            return True

        # run the filter function with given filter value
        res = test_filter(test_field=True)

        # test_field has value True and user has given one permission set for filter, function should be run
        assert res is True

    def test_filter_value_perms_hasnot_one(self, monkeypatch):
        """Test permissions for filter values"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        @rbac_mng.need_permissions_filter_value(RBAC_FILTER_VALUE_PERMS)
        def test_filter(*_, **__):
            return True

        # run the filter function with given filter value
        res = test_filter(test_field3="+sort")

        # test_field3 has value +sort and user does not have any permission set from sets, return 403
        assert res[1] == 403  # pylint:disable=unsubscriptable-object

    def test_filter_value_perms_has_multiple(self, monkeypatch):
        """Test permissions for filter values"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        @rbac_mng.need_permissions_filter_value(RBAC_FILTER_VALUE_PERMS)
        def test_filter(*_, **__):
            return True

        # run the filter function with given filter value
        res = test_filter(test_field2="-sort")

        # test_field2 has value -sort and user user have permission set from sets, function should be run
        assert res is True

    def test_filter_value_perms_hasnot_multiple(self, monkeypatch):
        """Test permissions for filter values"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        @rbac_mng.need_permissions_filter_value(RBAC_FILTER_VALUE_PERMS)
        def test_filter(*_, **__):
            return True

        # run the filter function with given filter value
        res = test_filter(test_field4="+test")

        # test_field4 has value +test, but user does not any set of given permissions, return 403
        assert res[1] == 403  # pylint:disable=unsubscriptable-object

    def test_filter_value_perms_ignore(self, monkeypatch):
        """Test permissions for filter values, with ignored value"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        @rbac_mng.need_permissions_filter_value(RBAC_FILTER_VALUE_PERMS)
        def test_filter(*_, **__):
            return True

        # run the filter function with other filter value
        res = test_filter(test_field=False)

        # test_field has other value, thus permission check should be ignored
        assert res is True

    def test_filter_parameters_no_change(self, monkeypatch):
        """Test filter parameters when change is not needed
        (user has needed permissions)"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        def test_rbac_filter1(perms):
            if RBAC_PERM_VULN_RES not in perms:
                return {"test1": True}
            return None

        def test_rbac_filter2(perms):
            if RBAC_PERM_OPT_WRITE not in perms:
                return {"test2": True}
            return None

        @rbac_mng.filter_parameters([test_rbac_filter1, test_rbac_filter2])
        def test_handler(*_, **kwargs):
            return kwargs

        # user has vuln_res:read and opt_out:read permissions, arguments cannot be changed
        res = test_handler(test1=False, test2=False)
        assert res["test1"] is False
        assert res["test2"] is False

    def test_filter_parameters_change(self, monkeypatch):
        """Test filter parameters when change is needed
        (user does not have permissions)"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        def test_rbac_filter1(perms):
            if RBAC_PERM_BR_STATUS not in perms:
                return {"test1": True}
            return None

        def test_rbac_filter2(perms):
            if RBAC_PERM_OPT_READ not in perms:
                return {"test2": True}
            return None

        @rbac_mng.filter_parameters([test_rbac_filter1, test_rbac_filter2])
        def test_handler(*_, **kwargs):
            return kwargs

        res = test_handler()
        # user does not have br status or opt_out write perm, values must be edited
        assert res["test1"] is True
        assert res["test2"] is True

    def test_filter_parameters_excluded_filtered(self, monkeypatch):
        """Test filter parameters when change is needed
        (user does not have permissions)"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE, rbac_mng, monkeypatch)

        @rbac_mng.filter_parameters([filter_excluded])
        def test_handler(*_, **kwargs):
            return kwargs

        res = test_handler()
        # user does not have opt_out:read perms, cannot show excluded systems
        assert res["excluded"] == [False]

    def test_filter_parameters_excluded_unfiltered(self, monkeypatch):
        """Test filter parameters when change is needed
        (user does not have permissions)"""
        rbac_mng = RbacManager()
        self._prepare_user_permissions(RBAC_RESPONSE_READ, rbac_mng, monkeypatch)

        @rbac_mng.filter_parameters([filter_excluded])
        def test_handler(*_, **kwargs):
            return kwargs

        res = test_handler(excluded=[True, False])
        # user does have opt_out:read perms, systems need to be original value
        assert res["excluded"] == [True, False]
