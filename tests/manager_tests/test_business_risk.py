# -*- coding: utf-8 -*-
# pylint: disable=missing-docstring,too-many-public-methods,invalid-name
"""
Vulnerability manager tests.
"""
from .vuln_testcase import FlaskTestCase


class TestBusinessRisk(FlaskTestCase):

    def test_business_risk_list(self):
        risks = self.vfetch('business_risk')
        assert len(risks.body.data) == 5
        assert risks.body.data[0]['id'] == 0
        assert risks.body.data[0]['name'] == 'Not Defined'

    def test_missing_params(self):
        response = self.vfetch('cves/business_risk', method='PATCH',
                               json={'cve': 'CVE-2018-5'}).check_response(status_code=400)
        error_msg = 'At least one of the "business_risk_id" or "business_risk_text" parameters is required.'
        assert response.body.errors[0].detail == error_msg

    def test_set_risk_single(self):
        response = self.vfetch('cves/business_risk', method='PATCH',
                               json={'cve': 'CVE-2018-5', 'business_risk_id': 3,
                                     'business_risk_text': 'test_single'}).check_response()
        assert len(response.body.updated) == 1
        response = self.vfetch('cves/CVE-2018-5').check_response()
        assert response.body.data.attributes.business_risk_id == 3
        assert response.body.data.attributes.business_risk_text == 'test_single'

    def test_set_risk_multiple(self):
        response = self.vfetch('cves/business_risk', method='PATCH',
                               json={'cve': ['CVE-2018-1', 'CVE-2018-2'], 'business_risk_id': 1,
                                     'business_risk_text': 'test_multiple'}).check_response()
        assert len(response.body.updated) == 2

    def test_multiple_unknown_cves(self):
        response = self.vfetch('cves/business_risk', json={'cve': ['UNKNOWN-1', 'UNKNOWN-2'], 'business_risk_id': 0},
                               method='PATCH').check_response(status_code=404)
        assert response.body.errors[0].detail == 'At least one given CVE must exist'

    def test_unknown_cve(self):
        response = self.vfetch('cves/business_risk', json={'cve': ['UNKNOWN-1', 'CVE-2018-5'], 'business_risk_id': 0},
                               method='PATCH').check_response()
        assert len(response.body.updated) == 1

    def test_set_risk_only(self):
        # first set up both risk and text values
        self.vfetch('cves/business_risk', method='PATCH',
                    json={'cve': 'CVE-2018-5', 'business_risk_id': 1, 'business_risk_text': 'text'}).check_response()
        self.vfetch('cves/business_risk', method='PATCH',
                    json={'cve': 'CVE-2018-5', 'business_risk_id': 2}).check_response()
        response = self.vfetch('cves/CVE-2018-5').check_response()
        assert response.body.data.attributes.business_risk_id == 2
        assert response.body.data.attributes.business_risk_text == 'text'

    def test_set_text_only(self):
        # first set up both risk and text values
        self.vfetch('cves/business_risk', method='PATCH',
                    json={'cve': 'CVE-2018-5', 'business_risk_id': 1, 'business_risk_text': 'text'}).check_response()
        self.vfetch('cves/business_risk', method='PATCH',
                    json={'cve': 'CVE-2018-5', 'business_risk_text': 'text_only'}).check_response()
        response = self.vfetch('cves/CVE-2018-5').check_response()
        assert response.body.data.attributes.business_risk_id == 1
        assert response.body.data.attributes.business_risk_text == 'text_only'

    def test_invalid_risk_id(self):
        response = self.vfetch('cves/business_risk', method='PATCH',
                               json={'cve': 'CVE-2018-5', 'business_risk_id': 7}).check_response(status_code=400)
        assert response.body.errors[0].detail == 'business_risk_id=7 is invalid'
