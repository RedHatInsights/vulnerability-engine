"""Unit tests for status_handler"""
# pylint: disable=missing-docstring,too-many-public-methods,invalid-name
import pytest

from .vuln_testcase import FlaskTestCase

IMPACTS = {"Critical": 3, "Important": 2, "Moderate": 1, "Low": 0}
SORT_BY = ("impact", "synopsis", "cvss_score", "cvss2_score", "cvss3_score", "systems_affected", "public_date",)
IMPACT_FILTER = [
    ('1,2,3,4,5,6,7', 13),
    ('7', 5),
    ('4,5,6,7', 12)
]


class TestVulnerabilitiesHandler(FlaskTestCase):

    def test_vulnerabilities_cves(self):
        response = self.vfetch("vulnerabilities/cves?affecting=true").check_response()
        response2 = self.vfetch("vulnerabilities/cves/ids?affecting=true").check_response()
        assert len(response.body.data) == len(response2.body.data) == 13

    @pytest.mark.parametrize('value,expected', IMPACT_FILTER, ids=[x[0] for x in IMPACT_FILTER])
    def test_vulnerabilities_impact_filter(self, value, expected):
        response = self.vfetch('vulnerabilities/cves?affecting=true&impact={}'.format(value))
        response2 = self.vfetch('vulnerabilities/cves/ids?affecting=true&impact={}'.format(value))
        assert len(response.body.data) == len(response2.body.data) == expected == response.body.meta.total_items

    def test_vulnerabilities_impact_filter_wrong_arg(self):
        self.vfetch('vulnerabilities/cves?impact=nan').check_response(status_code=400)
        self.vfetch('vulnerabilities/cves/ids?impact=nan').check_response(status_code=400)

    @pytest.mark.parametrize('sort_by', SORT_BY, ids=SORT_BY)
    def test_cve_asc_sorting(self, sort_by):

        def get_score(record):
            return record.attributes.get("cvss3_score") or record.attributes.get("cvss2_score")

        response_asc = self.vfetch(
            "vulnerabilities/cves?affecting=true&page_size=100&sort={}".format(sort_by)
        ).check_response()

        if sort_by == "impact":
            values_asc = [IMPACTS[rec.attributes[sort_by]] for rec in response_asc.body.data]
        elif sort_by == "cvss_score":
            values_asc = [get_score(rec) for rec in response_asc.body.data]
        else:
            values_asc = [rec.attributes[sort_by] for rec in response_asc.body.data]

        if sort_by in ("cvss_score", "cvss2_score", "cvss3_score"):
            values_asc = [rec for rec in values_asc if rec]

        sorted_asc = sorted(values_asc)
        assert sorted_asc == values_asc

    def test_invalid_sorting(self):
        response = self.vfetch("vulnerabilities/cves?page_size=100&sort=INVALID").check_response(status_code=400)
        assert response.body.errors[0].detail == "Invalid sort column: INVALID"

    def test_cves_filtering_cvss(self):
        response = self.vfetch("vulnerabilities/cves?page_size=50&cvss_from=4.9&cvss_to=6.9").check_response()
        assert response.body.meta.cvss_from == 4.9
        assert response.body.meta.cvss_to == 6.9
        assert response.body.data  # so there's at least one record to test with
        for rec in response.body.data:
            score = rec.attributes.cvss3_score or rec.attributes.cvss2_score
            assert float(score) >= 4.9
            assert float(score) <= 6.9

    def test_cves_filtering_cvss_from(self):
        response = self.vfetch("vulnerabilities/cves?page_size=50&cvss_from=4.9").check_response()
        assert response.body.meta.cvss_from == 4.9
        assert response.body.data  # so there's at least one record to test with
        for rec in response.body.data:
            score = rec.attributes.cvss3_score or rec.attributes.cvss2_score
            assert float(score) >= 4.9

    def test_cves_filtering_cvss_to(self):
        response = self.vfetch("vulnerabilities/cves?page_size=50&cvss_to=6.9").check_response()
        assert response.body.meta.cvss_to == 6.9
        assert response.body.data  # so there's at least one record to test with
        for rec in response.body.data:
            score = rec.attributes.cvss3_score or rec.attributes.cvss2_score
            assert float(score) <= 6.9

    def test_cves_filter_string(self):
        search_str = "CVE-2018-"
        response = self.vfetch("vulnerabilities/cves?page_size=50&filter={}".format(search_str)).check_response()
        assert response.body.meta.filter == search_str
        for rec in response.body.data:
            assert search_str in rec.id or search_str in rec.attributes.description

    def test_cves_filtering_public(self):
        from_date = "2018-01-01"
        to_date = "2018-12-31"
        response = self.vfetch(
            "vulnerabilities/cves?page_size=50&public_from={}&public_to={}".format(from_date, to_date)
        ).check_response()

        assert response.body.meta.public_from.startswith(from_date)
        assert response.body.meta.public_to.startswith(to_date)
        for rec in response.body.data:
            assert rec.attributes.public_date >= from_date
            assert rec.attributes.public_date <= to_date

    def test_business_risk_filtering(self):
        response = self.vfetch('vulnerabilities/cves?business_risk_id=0').check_response()
        assert len(response.body.data) == 19
        response = self.vfetch('vulnerabilities/cves?business_risk_id=0,1').check_response()
        assert len(response.body.data) == 19
        response = self.vfetch('vulnerabilities/cves?business_risk_id=2').check_response()
        assert not response.body.data

    def test_status_filtering(self):
        response = self.vfetch('vulnerabilities/cves?status_id=0').check_response()
        assert len(response.body.data) == 19
        response = self.vfetch('vulnerabilities/cves?status_id=0,1').check_response()
        response2 = self.vfetch('vulnerabilities/cves/ids?status_id=0,1').check_response()
        assert len(response.body.data) == len(response2.body.data) == 19
        response = self.vfetch('vulnerabilities/cves?status_id=2').check_response()
        assert not response.body.data

    def test_vulnerabilities_rule_filter(self):
        response = self.vfetch('vulnerabilities/cves?affecting=true&rule_presence=true').check_response()
        response2 = self.vfetch('vulnerabilities/cves/ids?affecting=true&rule_presence=true').check_response()
        assert len(response.body.data) == len(response2.body.data) == 7  # 7 CVEs are associated with active rules
        response = self.vfetch('vulnerabilities/cves?affecting=true&rule_presence=false').check_response()
        response2 = self.vfetch('vulnerabilities/cves/ids?affecting=true&rule_presence=false').check_response()
        assert len(response.body.data) == len(response2.body.data) == 6

    def test_na_cvss_filter(self):
        """Test CVSS filter for n/a cvss ratings."""
        response = self.vfetch('vulnerabilities/cves?affecting=true&cvss_from=-1&cvss_to=-1').check_response()

        assert response.body.meta.cvss_from == -1.0
        assert response.body.meta.cvss_to == -1.0

        for rec in response.body.data:
            assert rec.attributes.cvss2_score is None
            assert rec.attributes.cvss3_score is None

    def test_na_normal_cvss_filter(self):
        """Test CVSS filter for both n/a and given range. """
        response = self.vfetch('vulnerabilities/cves?affecting=true&cvss_from=-1&cvss_to=5.9').check_response()
        assert response.body.meta.total_items == 6

        for rec in response.body.data:
            if rec.attributes.cvss3_score:
                assert float(rec.attributes.cvss3_score) <= 5.9
            elif rec.attributes.cvss2_score:
                assert float(rec.attributes.cvss2_score) <= 5.9

    def test_vulnerabilities_rule_filter_multiple_bools(self):
        """Test that multiple different bools, must have
           the same behaviour as not specified parameter"""
        response_bools = self.vfetch('vulnerabilities/cves?rule_presence=true,false').check_response()
        response_all = self.vfetch('vulnerabilities/cves?').check_response()

        assert response_bools.body.meta.total_items == response_all.body.meta.total_items

    def test_vulnerabilities_rule_filter_multiple_same_bools(self):
        """Test with multiple same bools"""
        response_multiple = self.vfetch('vulnerabilities/cves?rule_presence=true,true').check_response()
        response_single = self.vfetch('vulnerabilities/cves?rule_presence=true').check_response()

        assert response_multiple.body.meta.total_items == response_single.body.meta.total_items
        assert response_multiple.body.meta.rule_presence == 'True'

        response_multiple = self.vfetch('vulnerabilities/cves?rule_presence=false,false').check_response()
        response_single = self.vfetch('vulnerabilities/cves?rule_presence=false').check_response()

        assert response_multiple.body.meta.total_items == response_single.body.meta.total_items
        assert response_multiple.body.meta.rule_presence == 'False'

    def test_vulnerabilities_rule_filter_multiple_wrong(self):
        """Test for invalid boolean value in multiple booleans"""
        self.vfetch('vulnerabilities/cves?rule_presence=true,thisisnotbool').check_response(status_code=400)

    def test_vulnerabilities_affecting_filter(self):
        """Test for affecting filter"""
        response1 = self.vfetch('vulnerabilities/cves?affecting=true').check_response()
        response2 = self.vfetch('vulnerabilities/cves/ids?affecting=true').check_response()
        assert len(response1.body.data) == len(response2.body.data) == 13

        response1 = self.vfetch('vulnerabilities/cves?affecting=true,false').check_response()
        response2 = self.vfetch('vulnerabilities/cves/ids?affecting=true,false').check_response()
        assert len(response1.body.data) == len(response2.body.data) == 19

        response1 = self.vfetch('vulnerabilities/cves?affecting=false').check_response()
        response2 = self.vfetch('vulnerabilities/cves/ids?affecting=false').check_response()
        assert len(response1.body.data) == len(response2.body.data) == 6

        response1 = self.vfetch('vulnerabilities/cves?affecting=false,true').check_response()
        response2 = self.vfetch('vulnerabilities/cves/ids?affecting=false,true').check_response()
        assert len(response1.body.data) == len(response2.body.data) == 19

        response1 = self.vfetch('vulnerabilities/cves').check_response()
        response2 = self.vfetch('vulnerabilities/cves/ids').check_response()
        assert len(response1.body.data) == len(response2.body.data) == 19

    def test_filter_for_rules(self):
        response = self.vfetch('vulnerabilities/cves?filter=description')
        response2 = self.vfetch('vulnerabilities/cves')

        count = 0
        for item in response2.body.data:
            for rule in item.attributes.rules:
                if rule.description == 'description':
                    count += 1
                    break

        assert len(response.body.data) == 7
        assert len(response.body.data) == count

    def test_vulnerabilities_tags_filter(self):
        """Test vulnerabilies of systems with given tag"""
        response = self.vfetch('vulnerabilities/cves?affecting=true&tags=vulnerability/usage=server').check_response()
        assert len(response.body.data) == 13

    def test_vulnerabilities_tags_filter_multiple(self):
        """Test vulnerabilies of systems with given tags"""
        response = self.vfetch('vulnerabilities/cves?affecting=true&tags=vulnerability/usage=server,vulnerability/system_name=inv-7').check_response()
        assert len(response.body.data) == 12
        for cve in response.body.data:
            assert cve.attributes.systems_affected == 1

    def test_vulnerabilities_sap_filter(self):
        """Test sap filtered counts"""
        response = self.vfetch('vulnerabilities/cves?affecting=true&sap_system=true').check_response()
        assert len(response.body.data) == 13

    def test_vulnerabilities_sap_filter_counts(self):
        """Test counts with sap filter"""
        response_true = self.vfetch('vulnerabilities/cves?affecting=true&sap_system=true').check_response()
        response_false = self.vfetch('vulnerabilities/cves?affecting=true&sap_system=false').check_response()
        response_all = self.vfetch('vulnerabilities/cves?affecting=true&').check_response()

        assert len(response_true.body.data) == 13
        assert len(response_false.body.data) == 5
        assert len(response_all.body.data) == 13

        counts_true = {cve.attributes.synopsis: cve.attributes.systems_affected for cve in response_true.body.data}
        counts_false = {cve.attributes.synopsis: cve.attributes.systems_affected for cve in response_false.body.data}
        counts_all = {cve.attributes.synopsis: cve.attributes.systems_affected for cve in response_all.body.data}

        for cve in counts_all:
            assert counts_all[cve] == counts_true.get(cve, 0) + counts_false.get(cve, 0)

    def test_vulnerabilities_post(self):
        """Test vulnerabilities/cves POST"""
        response = self.vfetch('vulnerabilities/cves', method='POST', json={'cve_list': ['CVE-2016-1', 'CVE-2017-1']}).check_response()
        assert len(response.body.data) == response.body.meta.total_items == 2

    def test_vulnerabilities_post_default_sort(self):
        """Test vulnerabilities/cves POST default sorting by synopsis"""
        response = self.vfetch('vulnerabilities/cves', method='POST', json={'cve_list': ['CVE-2017-1', 'CVE-2016-1']}).check_response()
        assert response.body.data[0].id == 'CVE-2016-1'

    def test_vulnerabilities_post_sort(self):
        """Test vulnerabilities/cves POST sorting"""
        response = self.vfetch('vulnerabilities/cves?sort=-synopsis', method='POST', json={'cve_list': ['CVE-2016-1', 'CVE-2017-1']}).check_response()
        assert response.body.data[1].id == 'CVE-2016-1'

    def test_vulnerabilities_post_filter(self):
        """Test vulnerabilities/cves POST filter"""
        response = self.vfetch('vulnerabilities/cves?filter=CVE-2016-1', method='POST', json={'cve_list': ['CVE-2016-1', 'CVE-2017-1']}).check_response()
        assert len(response.body.data) == 1

    def test_cves_filtering_known_exploit(self):
        response = self.vfetch("vulnerabilities/cves?known_exploit=true").check_response()
        assert len(response.body.data) == 2

        response = self.vfetch("vulnerabilities/cves?known_exploit=false").check_response()
        assert len(response.body.data) == 17

    def test_vulnerabilities_multiple_bools(self):
        """Test multiple bools filters functionality"""
        response1 = self.vfetch('vulnerabilities/cves?rule_presence=true,false').check_response()
        response2 = self.vfetch('vulnerabilities/cves?rule_presence=false,true').check_response()
        assert len(response1.body.data) == len(response2.body.data)

        response1 = self.vfetch('vulnerabilities/cves?affecting=true,false').check_response()
        response2 = self.vfetch('vulnerabilities/cves?affecting=false,true').check_response()
        assert len(response1.body.data) == len(response2.body.data)

        response1 = self.vfetch('vulnerabilities/cves?known_exploit=true,false').check_response()
        response2 = self.vfetch('vulnerabilities/cves?known_exploit=false,true').check_response()
        assert len(response1.body.data) == len(response2.body.data)

    def test_vulnerabilities_multiple_bools_too_much_values(self):
        """Test if multiple bools filters can check repetition"""
        self.vfetch('vulnerabilities/cves?rule_presence=true,false,true,false').check_response(status_code=400)
        self.vfetch('vulnerabilities/cves?affecting=true,false,true,false').check_response(status_code=400)
        self.vfetch('vulnerabilities/cves?known_exploits=true,false,true,false').check_response(status_code=400)
