"""Unit tests for status_handler"""
# pylint: disable=missing-docstring,too-many-public-methods,invalid-name

from .vuln_testcase import FlaskTestCase

IMPACTS = {"Critical": 3, "Important": 2, "Moderate": 1, "Low": 0}


class TestVulnerabilitiesHandler(FlaskTestCase):

    def test_vulnerabilities_cves(self):
        response = self.vfetch("vulnerabilities/cves").check_response()
        assert len(response.body.data) == 14

    def test_vulnerabilities_show_all(self):
        response = self.vfetch('vulnerabilities/cves?show_all=true').check_response()
        assert len(response.body.data) == 17

    def test_vulnerabilities_severity_filter(self):
        values = [
            ('1,2,3,4,5,6,7', 14),
            ('7', 5),
            ('4,5,6,7', 13)
        ]

        for value, expected in values:
            response = self.vfetch('vulnerabilities/cves?severity={}'.format(value))
            assert len(response.body.data) == expected == response.body.meta.total_items

    def test_vulnerabilities_severity_filter_wrong_arg(self):
        self.vfetch('vulnerabilities/cves?severity=nan').check_response(status_code=400)

    def test_cve_asc_sorting(self):
        param_list = (
            "impact",
            "synopsis",
            "cvss_score",
            "cvss2_score",
            "cvss3_score",
            "systems_affected",
            "public_date",
        )

        def get_score(record):
            return record.attributes.get("cvss3_score") or record.attributes.get("cvss2_score")

        for sort_by in param_list:
            response_asc = self.vfetch(
                "vulnerabilities/cves?page_size=100&sort={}".format(sort_by)
            ).check_response()

            if sort_by == "impact":
                values_asc = [IMPACTS[rec.attributes[sort_by]] for rec in response_asc.body.data]
            elif sort_by == "cvss_score":
                values_asc = [get_score(rec) for rec in response_asc.body.data]
            else:
                values_asc = [rec.attributes[sort_by] for rec in response_asc.body.data]

            if sort_by in ("cvss_score", "cvss2_score", "cvss3_score"):
                values_asc = [rec for rec in values_asc if rec]

            sorted_asc = sorted(values_asc)
            assert sorted_asc == values_asc

    def test_invalid_sorting(self):
        response = self.vfetch("vulnerabilities/cves?page_size=100&sort=INVALID").check_response(status_code=400)
        assert response.body.errors[0].detail == "Invalid sort column: INVALID"

    def test_cves_filtering_cvss(self):
        response = self.vfetch("vulnerabilities/cves?page_size=50&cvss_from=4.9&cvss_to=6.9").check_response()
        assert response.body.meta.cvss_from == 4.9
        assert response.body.meta.cvss_to == 6.9
        for rec in response.body.data:
            score = rec.attributes.cvss3_score or rec.attributes.cvss2_score
            assert float(score) >= 4.9
            assert float(score) <= 6.9

    def test_cves_filter_string(self):
        search_str = "CVE-2018-"
        response = self.vfetch("vulnerabilities/cves?page_size=50&filter={}".format(search_str)).check_response()
        assert response.body.meta.filter == search_str
        for rec in response.body.data:
            assert search_str in rec.id or search_str in rec.attributes.description

    def test_cves_filtering_public(self):
        from_date = "2018-01-01"
        to_date = "2018-12-31"
        response = self.vfetch(
            "vulnerabilities/cves?page_size=50&public_from={}&public_to={}".format(from_date, to_date)
        ).check_response()

        assert response.body.meta.public_from.startswith(from_date)
        assert response.body.meta.public_to.startswith(to_date)
        for rec in response.body.data:
            assert rec.attributes.public_date >= from_date
            assert rec.attributes.public_date <= to_date
