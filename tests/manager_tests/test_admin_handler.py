"""
Vulnerability manager tests - Admin Handler.
"""
from functools import reduce

import datetime
import subprocess
import requests
import psycopg2

from common.peewee_model import DB
from .vuln_testcase import FlaskTestCaseAdmin

PID = 1368
VACUUMED_TABLE = "system_platform"
VACUUMED_USER_TABLES = ["system_vulnerabilities_active_184",
                        "system_vulnerabilities_inactive"]

QUERIES_RESPONSE = {
    "queries": [
        {
            "app_name": "psql",
            "db_name": "vulnerability",
            "pid": PID,
            "query": "select * from system_platform;",
            "query_start": "2021-08-05 08:08:07.774124+00:00",
            "running_time": "0:00:32.983505",
            "username": "postgres",
            "wait_event": "relation",
            "wait_event_type": "Lock"
        }
    ]
}

BLOAT_TABLE_RESPONSE = {
    "dead_tuple_count": 9,
    "dead_tuple_len": 2096,
    "dead_tuple_percent": 25.59,
    "free_percent": 26.71,
    "free_space": 2188,
    "table_len": 8192,
    "tuple_count": 17,
    "tuple_len": 3776,
    "tuple_percent": 46.09
}


class TestAdminManager(FlaskTestCaseAdmin):
    """Test suite for admin manager"""

    @staticmethod
    def _taskomatic_mock_put(path):

        class Response:
            """Response mock class"""
            def __init__(self, status_code):
                self.status_code = status_code

        jobs = ["db_metrics", "delete_systems", "rules_git_sync", "stale_systems",
                "usage_metrics"]
        res = reduce(lambda acc, job: True if acc else job in path, jobs, False)
        if not res:
            return Response(400)
        return Response(200)

    @staticmethod
    def _vmaas_sync_mock_put(path):
        if "/api/v1/sync" not in path:
            raise Exception("sync not called correctly")

    @staticmethod
    def _vmaas_re_evaluate_mock_put(path):
        if "/api/v1/re-evaluate" not in path:
            raise Exception("re-evaluation not called correctly")

    @staticmethod
    def _cve_delete_mock_put(path):
        if "/api/v1/cves" not in path:
            raise Exception("CVE deletion not called properly")

    @staticmethod
    def _query_kill_mock_sql(query, *_, **__):
        if f"SELECT pg_terminate_backend({PID})" not in query:
            raise Exception("Kill query not executed properly")

    @staticmethod
    def _vacuum_table_mock(cmd, *_, **__):
        for cmd_part in ["pg_repack", "-t", VACUUMED_TABLE]:
            if cmd_part not in cmd:
                raise Exception("pg_repack called incorrectly")

    @staticmethod
    def _vacuum_table_user_mock(cmd, *_, **__):
        for cmd_part in (["pg_repack", "-t"] + VACUUMED_USER_TABLES):
            if cmd_part not in cmd:
                raise Exception("pg_repack called incorrectly")

    def test_missing_in_inventory(self):
        """Test systems/missing_in_inventory endpoint."""
        count = self.vfetch("systems/missing_in_inventory")
        assert count.body == 1

    def test_taskomatic_run_correct_job(self, monkeypatch):
        """Test taskomatic/run/{job_name} endpoint with correct job"""
        monkeypatch.setattr(requests, "put", self._taskomatic_mock_put)
        res = self.vfetch("taskomatic/run/stale_systems", method="put")
        assert res.raw.status_code == 204

    def test_taskomatic_run_wrong_job(self, monkeypatch):
        """Test taskomatic/run/{job_name} endpoint with incorrect job"""
        monkeypatch.setattr(requests, "put", self._taskomatic_mock_put)
        res = self.vfetch("taskomatic/run/nonexisting_job", method="put")
        assert res.raw.status_code == 404

    def test_vmaas_sync_call(self, monkeypatch):
        """Test vmaas sync request call"""
        monkeypatch.setattr(requests, "put", self._vmaas_sync_mock_put)
        self.vfetch("vmaas/sync", method="put")

    def test_vmaas_re_evaluate_call(self, monkeypatch):
        """Test vmaas re-evaluation call"""
        monkeypatch.setattr(requests, "put", self._vmaas_re_evaluate_mock_put)
        self.vfetch("vmaas/re-evaluate", method="put")

    def test_delete_cve_call(self, monkeypatch):
        """Test delete cve call"""
        monkeypatch.setattr(requests, "delete", self._cve_delete_mock_put)
        self.vfetch("cves/CVE-2017-1", method="delete")

    def test_stats_deletion(self):
        """Test deletion of statistics"""
        self.vfetch("statistics/2080-01-01", method="delete")
        res = DB.execute_sql("select count(*) from usage_statistics")
        res = res.fetchall()[0][0]
        assert res == 0

    def test_queries(self):
        """Test running queries endpoint"""
        res = self.vfetch("database/queries")
        assert res.body == {"queries": []}

    def test_missing_in_inventory_del(self):
        """Test deletion of systems/missing_in_inventory"""
        self.vfetch("systems/missing_in_inventory", method="delete")
        count = self.vfetch("systems/missing_in_inventory")
        assert count.body == "0\n"

    def test_queries_some(self, monkeypatch):
        """Test queries endpoint with mock stucked query"""
        def mock_fun(*_, **__):
            return [(PID, "vulnerability", "postgres", "psql",
                     datetime.datetime(2021, 8, 5, 8, 8, 7, 774124, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=0, name=None)),
                     datetime.timedelta(seconds=32, microseconds=983505),
                     "Lock", "relation", "select * from system_platform;")]

        monkeypatch.setattr(DB, "execute_sql", mock_fun)
        res = self.vfetch("database/queries")
        assert res.body == QUERIES_RESPONSE

    def test_queries_kill(self, monkeypatch):
        """Test query kill command"""
        monkeypatch.setattr(DB, "execute_sql", self._query_kill_mock_sql)
        self.vfetch(f"database/query/{PID}")

    def test_table_bloat(self, monkeypatch):
        """Test bloat endpoint"""
        class MockDbRes:
            """Mock of result from db"""
            @staticmethod
            def fetchone():
                """Mock for fetchone cursor method"""
                return (8192, 17, 3776, 46.09, 9, 2096, 25.59, 2188, 26.71)

        monkeypatch.setattr(DB, "execute_sql", lambda _, __: MockDbRes())
        res = self.vfetch("database/bloat/table/system_platform")
        assert res.body == BLOAT_TABLE_RESPONSE

    def test_table_vacuum(self, monkeypatch):
        """Test table vacuum"""
        monkeypatch.setattr(subprocess, "Popen", self._vacuum_table_mock)
        self.vfetch(f"database/vacuum/table/{VACUUMED_TABLE}")

    def test_user_vacuum(self, monkeypatch):
        """Test user vacuum"""
        class MockDbRes:
            """Mock of result from db"""
            rowcount = 2

            def __iter__(self):
                return iter(VACUUMED_USER_TABLES)

        monkeypatch.setattr(DB, "execute_sql", lambda _, __: MockDbRes())
        monkeypatch.setattr(subprocess, "Popen", self._vacuum_table_user_mock)
        self.vfetch("database/vacuum/user/1")
