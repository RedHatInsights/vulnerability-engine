"""Unit tests for report handler"""
# pylint: disable=missing-docstring,too-many-public-methods,invalid-name

import json

from manager.report_handler import GetExecutive
from .vuln_testcase import FlaskTestCase


class TestReportHandler(FlaskTestCase):

    def test_executive_report(self):
        report = self.vfetch('report/executive').check_response()
        assert report.body.system_count == 8
        assert report.body.cves_total == 13
        assert report.body.top_cves[0].synopsis == 'CVE-2017-1'
        assert report.body.top_cves[0].systems_affected == 3
        assert report.body.top_cves[0].cvss3_score == '9.900'
        assert report.body.top_cves[1].synopsis == 'CVE-2017-6'
        assert report.body.top_cves[1].systems_affected == 3
        assert report.body.top_cves[1].cvss3_score == '5.600'

    def test_executive_report_no_org(self):
        response = self.raw_get('/api/vulnerability/v1/report/executive', headers=self._make_header({'identity': {'account_number': '666'}, 'entitlements': {
            'smart_management': {'is_entitled': True}}})).check_response()
        assert json.loads(response.data) == GetExecutive.default_retval

    def test_executive_report_no_systems(self):
        response = self.raw_get('/api/vulnerability/v1/report/executive', headers=self._make_header({'identity': {'account_number': '3'}, 'entitlements': {
            'smart_management': {'is_entitled': True}}})).check_response()
        assert json.loads(response.data) == GetExecutive.default_retval

    def test_executive_report_no_vuln(self):
        response = self.raw_get('/api/vulnerability/v1/report/executive', headers=self._make_header({'identity': {'account_number': '2'}, 'entitlements': {
            'smart_management': {'is_entitled': True}}})).check_response()
        expected_retval = GetExecutive.default_retval.copy()
        expected_retval['system_count'] = 1
        assert json.loads(response.data) == expected_retval
