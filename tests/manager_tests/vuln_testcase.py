# -*- coding: utf-8 -*-
"""
Methods for vulnerability API testing.
"""
import base64
import json

import pytest

from box import Box
from manager import main
from .schemas import SCHEMA_MAP

URL_BASE = "/api/vulnerability/v1"

INTERNAL_IDENTITY = {
    "identity": {
        "account_number": "00000000",
        "type": "User",
        "user": {
            "username": "jdoe@acme.com",
            "email": "jdoe@acme.com",
            "first_name": "john",
            "last_name": "doe",
            "is_active": True,
            "is_org_admin": False,
            "is_internal": False,
            "locale": "en_US",
        },
        "internal": {"org_id": 3_340_851, "auth_type": "basic-auth", "auth_time": 6300},
        "entitlements": {"smart_management": {"is_entitled": True}},
    }
}

RH_IDENTITY_HEADER = {
    "x-rh-identity": base64.b64encode(json.dumps(INTERNAL_IDENTITY).encode("utf-8"))
}


@pytest.mark.usefixtures('client_class')
class FlaskTestCase:
    """Base class for vulnerability engine manager test cases"""

    @pytest.fixture
    def app(self):  # pylint: disable=no-self-use
        """Fixture for the application"""
        connexion_app = main.create_app()
        return connexion_app.app

    def vfetch(self, path, **kwargs):
        """Fetch method for vulnerability API."""
        path = "{}/{}".format(URL_BASE, path.lstrip("/"))
        headers = kwargs.get("headers") or {}
        headers.update(RH_IDENTITY_HEADER)
        kwargs["headers"] = headers
        if 'data' in kwargs or 'json' in kwargs:
            headers.update({'Content-type': 'application/json'})
        method = kwargs.get('method', 'get')
        if method.upper() == 'PATCH':
            response = self.client.patch(path, **kwargs)  # pylint: disable=no-member
        elif method.upper() == 'POST':
            response = self.client.post(path, **kwargs)  # pylint: disable=no-member
        else:
            response = self.client.get(path, **kwargs)  # pylint: disable=no-member
        return EngineResponse(response, path)

    def raw_get(self, path):
        """Raw get to an URI without headers"""
        response = self.client.get(path)  # pylint: disable=no-member
        return EngineResponse(response, path)


class EngineResponse:
    """API response representation."""

    def __init__(self, response, path):
        self.raw = response
        self.body = self.load(response)
        self.path = path

    @staticmethod
    def load(response):
        """Loads the response content."""
        parsed = None
        try:
            parsed = json.loads(response.data)
        # pylint: disable=broad-except
        except Exception:
            pass

        if not parsed and response.data:
            parsed = str(response.data, "utf-8")

        try:
            return Box(parsed, box_it_up=True)
        except ValueError:
            return parsed or Box()

    def validate_schema(self):
        """Validates response against schema."""
        for path, schema in SCHEMA_MAP.items():
            if path in self.path:
                schema.validate(self.body)
                break

    # pylint: disable=invalid-name
    @property
    def ok(self):
        """Checks if response has return code that indicates success."""
        if self.raw and self.raw.status_code >= 200 and self.raw.status_code < 400:
            return True
        return False

    def check_response(self, status_code=None, validate=True):
        """Asserts that the response HTTP status code and content is as expected."""
        if status_code:
            if self.raw.status_code != status_code:
                raise AssertionError(
                    "Expected status code {}, got {}".format(status_code, self.raw.status_code)
                )
        elif not self.ok:
            raise AssertionError("Request failed with {}".format(self.raw.status_code))

        try:
            if self.ok and "errors" in self.body:
                raise AssertionError("Errors returned: {}".format(self.body.errors))
        except TypeError:
            pass

        if validate and self.ok:
            self.validate_schema()

        return self

    def __getattr__(self, name):
        return getattr(self.raw, name)

    def __repr__(self):
        return "<EngineResponse(raw={!r})>".format(self.raw)
