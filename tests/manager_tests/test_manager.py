# -*- coding: utf-8 -*-
# pylint: disable=missing-docstring,too-many-public-methods,invalid-name
"""
Vulnerability manager tests.
"""
from common import database_handler

from ..utils import restore_db
from .vuln_testcase import FlaskTestCase

IMPACTS = {"Critical": 3, "Important": 2, "Moderate": 1, "Low": 0}


def tearDownModule():
    restore_db(database_handler.pg_testing)


class TestSystemHandler(FlaskTestCase):
    def test_apidoc(self):
        response = self.raw_get("/api/vulnerability/openapi.json").check_response()
        assert response.body.info.title == "Vulnerability Engine Manager"

    def test_version(self):
        response = self.raw_get("/api/vulnerability/version").check_response()
        assert response.body == "unknown"

    def test_cves_affected_systems(self):
        response = self.vfetch("cves/CVE-2016-0800/affected_systems").check_response()
        assert len(response.body.data) == 4

    def test_cves_affected_systems_st_1(self):
        self.vfetch("cves/CVE-2016-0800/affected_systems?status_id=2,nan").check_response(status_code=400)

    def test_cves_affected_systems_st_2(self):
        response = self.vfetch("cves/CVE-2016-0800/affected_systems?status_id=3").check_response()
        assert not response.body.data

    def test_cves_affected_systems_st_3(self):
        response = self.vfetch("cves/CVE-2016-0800/affected_systems?status_id=4,5,6").check_response()
        assert len(response.body.data) == 1

    def test_invalid_cves_affected_systems(self):
        self.vfetch("cves/CVE-INVALID/affected_systems").check_response(status_code=404)

    def test_systems(self):
        response = self.vfetch("systems").check_response()
        assert len(response.body.data) == 3

    def test_systems_cves_not_exists(self):
        self.vfetch("systems/INV-INVALID/cves").check_response(status_code=404)

    def test_systems_cves_not_evaluated(self):
        self.vfetch("systems/INV-ID00-0000-0000/cves").check_response(status_code=404)

    def test_systems_cves_evaluated(self):
        response = self.vfetch("systems/INV-ID00-0000-4444/cves").check_response()
        assert len(response.body.data) == 2

    def test_systems_cves_st_1(self):
        self.vfetch("systems/INV-ID00-0000-4444/cves?status_id=1,nan").check_response(status_code=400)

    def test_systems_cves_st_2(self):
        response = self.vfetch("systems/INV-ID00-0000-4444/cves?status_id=2").check_response()
        assert not response.body.data

    def test_systems_cves_st_3(self):
        response = self.vfetch("systems/INV-ID00-0000-4444/cves?status_id=3,4").check_response()
        assert len(response.body.data) == 2

    def test_vulnerabilities_cves(self):
        response = self.vfetch("vulnerabilities/cves").check_response()
        assert len(response.body.data) == 14

    def test_vulnerabilities_show_all(self):
        response = self.vfetch('vulnerabilities/cves?show_all=true').check_response()
        assert len(response.body.data) == 17

    def test_vulnerabilities_severity_filter(self):
        values = [
            ('1,2,3,4,5,6,7', 14),
            ('7', 5),
            ('4,5,6,7', 13)
        ]

        for value, expected in values:
            response = self.vfetch('vulnerabilities/cves?severity={}'.format(value))
            assert len(response.body.data) == expected == response.body.meta.total_items

    def test_vulnerabilities_severity_filter_wrong_arg(self):
        self.vfetch('vulnerabilities/cves?severity=nan').check_response(status_code=400)

    def test_cve_asc_sorting(self):
        param_list = (
            "impact",
            "synopsis",
            "cvss_score",
            "cvss2_score",
            "cvss3_score",
            "systems_affected",
            "public_date",
        )

        def get_score(record):
            return record.attributes.get("cvss3_score") or record.attributes.get("cvss2_score")

        for sort_by in param_list:
            response_asc = self.vfetch(
                "vulnerabilities/cves?page_size=100&sort={}".format(sort_by)
            ).check_response()

            if sort_by == "impact":
                values_asc = [IMPACTS[rec.attributes[sort_by]] for rec in response_asc.body.data]
            elif sort_by == "cvss_score":
                values_asc = [get_score(rec) for rec in response_asc.body.data]
            else:
                values_asc = [rec.attributes[sort_by] for rec in response_asc.body.data]

            if sort_by in ("cvss_score", "cvss2_score", "cvss3_score"):
                values_asc = [rec for rec in values_asc if rec]

            sorted_asc = sorted(values_asc)
            assert sorted_asc == values_asc

    def test_invalid_sorting(self):
        response = self.vfetch("vulnerabilities/cves?page_size=100&sort=INVALID").check_response(status_code=400)
        assert response.body.errors[0].detail == "Invalid sort column: INVALID"

    def test_cves_filtering_cvss(self):
        response = self.vfetch("vulnerabilities/cves?page_size=50&cvss_from=4.9&cvss_to=6.9").check_response()
        assert response.body.meta.cvss_from == 4.9
        assert response.body.meta.cvss_to == 6.9
        for rec in response.body.data:
            score = rec.attributes.cvss3_score or rec.attributes.cvss2_score
            assert float(score) >= 4.9
            assert float(score) <= 6.9

    def test_cves_filtering_public(self):
        from_date = "2018-01-01"
        to_date = "2018-12-31"
        response = self.vfetch(
            "vulnerabilities/cves?page_size=50&public_from={}&public_to={}".format(from_date, to_date)
        ).check_response()

        assert response.body.meta.public_from.startswith(from_date)
        assert response.body.meta.public_to.startswith(to_date)
        for rec in response.body.data:
            assert rec.attributes.public_date >= from_date
            assert rec.attributes.public_date <= to_date

    def test_cves_filter_string(self):
        search_str = "CVE-2018-"
        response = self.vfetch("vulnerabilities/cves?page_size=50&filter={}".format(search_str)).check_response()
        assert response.body.meta.filter == search_str
        for rec in response.body.data:
            assert search_str in rec.id or search_str in rec.attributes.description

    def test_opt_out_filtering(self):
        hidden = self.vfetch("systems?opt_out=true").check_response()
        assert not hidden.body.data
        visible = self.vfetch("systems?opt_out=false").check_response()
        all_systems = self.vfetch("systems").check_response()
        assert len(visible.body.data) == len(all_systems.body.data)

    def test_opt_out_invalid_params(self):
        self.vfetch("systems/INV-ID00-0000-4444/opt_out", data="", method="PATCH").check_response(status_code=400)
        self.vfetch("systems/INV-ID00-0000-4444/opt_out?value=123bla", data="", method="PATCH").check_response(
            status_code=400
        )
        self.vfetch("systems/IVALID-ID/opt_out?value=true", data="", method="PATCH").check_response(status_code=404)

    def test_opt_out(self):
        self.vfetch("systems/INV-ID00-0000-4444/opt_out?value=true", data="", method="PATCH")
        hidden = self.vfetch("systems?opt_out=true")
        assert len(hidden.body.data) == 1

        response = self.vfetch("systems/INV-ID00-0000-4444/cves").check_response(status_code=404)
        assert response.body.errors[0].detail == "inventory_id exists but is opted out"

        self.vfetch("systems/INV-ID00-0000-4444/opt_out?value=false", data="", method="PATCH")
        hidden = self.vfetch("systems?opt_out=true")
        assert not hidden.body.data

    def test_status_list(self):
        status = self.vfetch('status')
        assert len(status.body.data) == 7
        assert status.body.data[0]['id'] == 0
        assert status.body.data[0]['name'] == 'Not Reviewed'

    def test_status_invalid(self):
        self.vfetch('status', data='', method='PATCH').check_response(400)
        self.vfetch('status', data='{"cve":"CVE-2014-0160", "status_id":"2"}',
                    method='PATCH').check_response(400)
        self.vfetch('status', data='{"inventory_id": "INV-ID00-0000-0000", "status_id":"2"}',
                    method='PATCH').check_response(400)
        self.vfetch('status', data='{"inventory_id": "INV-ID00-0000-0000", "cve":"CVE-2014-0160", }',
                    method='PATCH').check_response(400)
        self.vfetch('status', data='{"inventory_id": "INV-ID00-0000-0000", "cve":"CVE-2014-0160", "status_id":"2"',
                    method='PATCH').check_response(400)
        self.vfetch('status', data='{"inventory_id": "INV-ID00-0000-0000", "cve":"CVE-2014-abcdef, "status_id":"2"}',
                    method='PATCH').check_response(400)
        self.vfetch('status', data='{"inventory_id": "INV-ID00-0000-0000", "cve":"CVE-2014-0160", "status_id":"a"}',
                    method='PATCH').check_response(400)
        self.vfetch('status', data='{"inventory_id": "INV-ID00-0000-1234", "cve":"CVE-2014-0160", "status_id":2}',
                    method='PATCH').check_response(404)

    def test_status(self):
        self.vfetch('status', data='{"inventory_id": "INV-ID00-0000-0000", "cve":"CVE-2014-0160", "status_id":2}',
                    method='PATCH').check_response()

    def test_limit_offset(self):
        response = self.vfetch('vulnerabilities/cves')
        assert len(response.body.data) == 14
        assert response.body.meta.limit == 25
        assert response.body.meta.offset == 0

        response = self.vfetch('vulnerabilities/cves?limit=2')
        assert len(response.body.data) == 2
        assert response.body.meta.limit == 2
        assert response.body.meta.offset == 0

        response = self.vfetch('vulnerabilities/cves?limit=3&offset=6')
        assert len(response.body.data) == 3
        assert response.body.meta.limit == 3
        assert response.body.meta.offset == 6

    def test_page_to_limit(self):
        response = self.vfetch('vulnerabilities/cves?page_size=5&page=3')
        assert response.body.meta.limit == 5
        assert response.body.meta.offset == 10

    def test_limit_to_page(self):
        response = self.vfetch('vulnerabilities/cves?limit=3&offset=6')
        assert response.body.meta.page_size == 3
        assert response.body.meta.page == 3

    def test_links(self):
        response = self.vfetch('vulnerabilities/cves')
        assert response.body.links.first
        assert response.body.links.previous
        assert response.body.links.next
        assert response.body.links.last

    def test_bad_pagination(self):
        self.vfetch('vulnerabilities/cves?limit=-3&offset=6').check_response(400)
        self.vfetch('vulnerabilities/cves?limit=0&offset=6').check_response(400)
        self.vfetch('vulnerabilities/cves?limit=zzz&offset=6').check_response(400)
        self.vfetch('vulnerabilities/cves?limit=2&offset=666').check_response(400)
        self.vfetch('vulnerabilities/cves?page=0&page_size=5').check_response(400)
        self.vfetch('vulnerabilities/cves?page=-1&page_size=5').check_response(400)
        self.vfetch('vulnerabilities/cves?page=666&page_size=5').check_response(400)
        self.vfetch('vulnerabilities/cves?offset=666&page=666').check_response(400)

    def test_args_in_links(self):
        response = self.vfetch('vulnerabilities/cves?limit=2&offset=2&cvss_from=6')
        assert 'cvss_from=6' in response.body.links.first
        response = self.vfetch('vulnerabilities/cves?limit=2&offset=2&cvss_from=').check_response(status_code=400)
        response = self.vfetch('vulnerabilities/cves?limit=2&offset=2&public_from=2018-01-01')
        assert 'public_from=2018-01-01' in response.body.links.first
        response = self.vfetch('vulnerabilities/cves?limit=2&offset=0&show_all=true')
        assert 'show_all=True' in response.body.links.first
        response = self.vfetch('vulnerabilities/cves?limit=2&offset=0&show_all=false')
        assert 'show_all=False' in response.body.links.first
        response = self.vfetch('systems?opt_out=true&limit=5')
        assert 'opt_out=True' in response.body.links.first
        response = self.vfetch('systems?limit=2&offset=0&opt_out=false')
        assert 'opt_out=False' in response.body.links.first

    @classmethod
    def _evaluate_link(cls, link):
        valid_attrs = ['page', 'page_size', 'limit', 'offset', 'cvss_from', 'cvss_to', 'opt_out', 'inventory_id']
        attrs = []
        errors = {'multiple_ques':False, 'multiple_attr':False, 'bad_attr':False, 'empty_attr':False}
        split_link = link.split('?')
        errors['multiple_ques'] = len(split_link) > 2
        split_attr = split_link[-1:].split('&') if errors['multiple_ques'] else split_link[1].split('&')
        for attr in split_attr:
            (k, v) = attr.split('=')
            errors['multiple_attr'] |= k in attrs
            errors['bad_attr'] |= not k in valid_attrs
            errors['empty_attr'] |= not v
        return errors

    def test_link_sanity(self):
        # Test for commentsa from demo/review
        # No empty attrs, only expected attrs, no multiple attrs, no multiple '?'
        # Note: all of first/prev/next/last behave the same, test one
        response = self.vfetch('vulnerabilities/cves')
        errs = self._evaluate_link(response.body.links.first)
        assert not errs['multiple_ques']
        assert not errs['multiple_attr']
        assert not errs['bad_attr']
        assert not errs['empty_attr']
