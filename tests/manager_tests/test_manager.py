# -*- coding: utf-8 -*-
# pylint: disable=missing-docstring,too-many-public-methods,invalid-name
"""
Vulnerability manager tests.
"""
from manager import main

from .vuln_testcase import VulnHTTPTestCase

IMPACTS = {"Critical": 3, "Important": 2, "Moderate": 1, "Low": 0}


class ManagerHTTPTestCase(VulnHTTPTestCase):
    def get_app(self):
        return main.ServerApplication()


class TestSystemHandler(ManagerHTTPTestCase):
    def test_apidoc(self):
        response = self.vfetch("openapi.json").check_response()
        assert response.body.info.title == "Vulnerability Engine Manager"

    def test_version(self):
        response = self.vfetch("version").check_response()
        assert response.body == "unknown"

    def test_cves_affected_systems(self):
        response = self.vfetch("cves/CVE-2016-0800/affected_systems").check_response()
        assert len(response.body.data) == 4

    def test_cves_affected_systems_st_1(self):
        self.vfetch("cves/CVE-2016-0800/affected_systems?status_id=2,nan").check_response(status_code=400)

    def test_cves_affected_systems_st_2(self):
        response = self.vfetch("cves/CVE-2016-0800/affected_systems?status_id=3").check_response()
        assert not response.body.data

    def test_cves_affected_systems_st_3(self):
        response = self.vfetch("cves/CVE-2016-0800/affected_systems?status_id=4,5,6").check_response()
        assert len(response.body.data) == 1

    def test_invalid_cves_affected_systems(self):
        self.vfetch("cves/CVE-INVALID/affected_systems").check_response(status_code=404)

    def test_systems(self):
        response = self.vfetch("systems").check_response()
        assert len(response.body.data) == 3

    def test_systems_cves_not_exists(self):
        self.vfetch("systems/INV-INVALID/cves").check_response(status_code=404)

    def test_systems_cves_not_evaluated(self):
        self.vfetch("systems/INV-ID00-0000-0000/cves").check_response(status_code=404)

    def test_systems_cves_evaluated(self):
        response = self.vfetch("systems/INV-ID00-0000-4444/cves").check_response()
        assert len(response.body.data) == 2

    def test_systems_cves_st_1(self):
        self.vfetch("systems/INV-ID00-0000-4444/cves?status_id=1,nan").check_response(status_code=400)

    def test_systems_cves_st_2(self):
        response = self.vfetch("systems/INV-ID00-0000-4444/cves?status_id=2").check_response()
        assert not response.body.data

    def test_systems_cves_st_3(self):
        response = self.vfetch("systems/INV-ID00-0000-4444/cves?status_id=3,4").check_response()
        assert len(response.body.data) == 2

    def test_vulnerabilities_cves(self):
        response = self.vfetch("vulnerabilities/cves").check_response()
        assert len(response.body.data) == 14

    def test_cve_asc_sorting(self):
        param_list = (
            "impact",
            "synopsis",
            "cvss_score",
            "cvss2_score",
            "cvss3_score",
            "systems_affected",
            "public_date",
        )

        def get_score(record):
            return record.attributes.get("cvss3_score") or record.attributes.get("cvss2_score")

        for sort_by in param_list:
            with self.subTest():
                response_asc = self.vfetch(
                    "vulnerabilities/cves?page_size=100&sort={}".format(sort_by)
                ).check_response()

                if sort_by == "impact":
                    values_asc = [IMPACTS[rec.attributes[sort_by]] for rec in response_asc.body.data]
                elif sort_by == "cvss_score":
                    values_asc = [get_score(rec) for rec in response_asc.body.data]
                else:
                    values_asc = [rec.attributes[sort_by] for rec in response_asc.body.data]

                if sort_by in ("cvss_score", "cvss2_score", "cvss3_score"):
                    values_asc = [rec for rec in values_asc if rec]

                sorted_asc = sorted(values_asc)
                assert sorted_asc == values_asc

    def test_invalid_sorting(self):
        response = self.vfetch("vulnerabilities/cves?page_size=100&sort=INVALID").check_response(status_code=400)
        assert response.body.errors[0].detail == "Invalid sort column: INVALID"

    def test_cves_filtering_cvss(self):
        response = self.vfetch("vulnerabilities/cves?page_size=50&cvss_from=4.9&cvss_to=6.9").check_response()
        assert response.body.meta.cvss_from == 4.9
        assert response.body.meta.cvss_to == 6.9
        for rec in response.body.data:
            score = rec.attributes.cvss3_score or rec.attributes.cvss2_score
            assert float(score) >= 4.9
            assert float(score) <= 6.9

    def test_cves_filtering_public(self):
        from_date = "2018-01-01"
        to_date = "2018-12-31"
        response = self.vfetch(
            "vulnerabilities/cves?page_size=50&public_from={}&public_to={}".format(from_date, to_date)
        ).check_response()

        assert response.body.meta.public_from.startswith(from_date)
        assert response.body.meta.public_to.startswith(to_date)
        for rec in response.body.data:
            assert rec.attributes.public_date >= from_date
            assert rec.attributes.public_date <= to_date

    def test_cves_filter_string(self):
        search_str = "CVE-2018-"
        response = self.vfetch("vulnerabilities/cves?page_size=50&filter={}".format(search_str)).check_response()
        assert response.body.meta.filter == search_str
        for rec in response.body.data:
            assert search_str in rec.id or search_str in rec.attributes.description

    def test_opt_out_filtering(self):
        hidden = self.vfetch("systems?opt_out=true").check_response()
        assert not hidden.body.data
        visible = self.vfetch("systems?opt_out=false").check_response()
        all_systems = self.vfetch("systems").check_response()
        assert len(visible.body.data) == len(all_systems.body.data)

    def test_opt_out_invalid_params(self):
        self.vfetch("systems/INV-ID00-0000-4444/opt_out", body="", method="PATCH").check_response(status_code=400)
        self.vfetch("systems/INV-ID00-0000-4444/opt_out?value=123bla", body="", method="PATCH").check_response(
            status_code=400
        )
        self.vfetch("systems/IVALID-ID/opt_out?value=true", body="", method="PATCH").check_response(status_code=404)

    def test_opt_out(self):
        self.vfetch("systems/INV-ID00-0000-4444/opt_out?value=true", body="", method="PATCH")
        hidden = self.vfetch("systems?opt_out=true")
        assert len(hidden.body.data) == 1

        response = self.vfetch("systems/INV-ID00-0000-4444/cves").check_response(status_code=404)
        assert response.body.errors[0].detail == "inventory_id exists but is opted out"

        self.vfetch("systems/INV-ID00-0000-4444/opt_out?value=false", body="", method="PATCH")
        hidden = self.vfetch("systems?opt_out=true")
        assert not hidden.body.data
