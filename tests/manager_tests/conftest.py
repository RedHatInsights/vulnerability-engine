# -*- coding: utf-8 -*-
# pylint:disable=missing-docstring
import os
import shutil
import tempfile

import psycopg2
import pytest
from peewee import PostgresqlDatabase

from ..utils import restore_db
from ..utils import truncate_db_version
from common import database_handler
from common import peewee_database

peewee_database.DB = PostgresqlDatabase(None)

POSTGRESQL_USER = "ve_db_user_manager"
POSTGRESQL_PASSWORD = "ve_db_user_manager_pwd"

PROMETHEUS_MULTIPROC_DIR = None


@pytest.fixture(scope="session", autouse=True)
def peewee_db(pg_db_session):
    """Initializes database for peewee."""
    database = peewee_database.DB
    db_env = pg_db_session.dsn()

    database.init(db_env["database"], user=POSTGRESQL_USER, password=POSTGRESQL_PASSWORD, host=db_env["host"], port=db_env["port"])

    return database


@pytest.fixture(scope="module", autouse=True)
def module_cleanup(request):
    def db_cleanup():
        restore_db(database_handler.pg_testing)

    request.addfinalizer(db_cleanup)


@pytest.fixture(scope="session", autouse=True)
def prometheus_multiproc_dir():
    global PROMETHEUS_MULTIPROC_DIR  # pylint: disable=global-statement
    PROMETHEUS_MULTIPROC_DIR = tempfile.mkdtemp()
    os.environ["prometheus_multiproc_dir"] = PROMETHEUS_MULTIPROC_DIR


@pytest.fixture(scope="session", autouse=True)
def rm_prometheus_multiproc_dir(request):
    def dir_cleanup():
        shutil.rmtree(PROMETHEUS_MULTIPROC_DIR)

    request.addfinalizer(dir_cleanup)


@pytest.fixture
def trunc_db_version(request):
    def db_cleanup():
        restore_db(database_handler.pg_testing)

    request.addfinalizer(db_cleanup)
    truncate_db_version(database_handler.pg_testing)


@pytest.fixture(scope="module")
def pg_db_conn(pg_db_mod):
    """Returns connection to PostgreSQL database."""
    conn = psycopg2.connect(**pg_db_mod.dsn())
    yield conn
    conn.close()
