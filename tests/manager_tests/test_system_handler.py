"""Unit tests for status_handler"""
# pylint: disable=missing-docstring,too-many-public-methods,invalid-name

import dateutil.parser
import pytest

from .vuln_testcase import FlaskTestCase

IMPACT_FILTER = [
    ('1,2,3,4,5,6,7', 12),
    ('7', 5),
    ('4,5,6,7', 11)
]

RHEL_VERSION_FILTER = [
    ('8', 6),
    ('8.1', 0),
    ('8.2,8.3', 6),
    ('10', 0),
    ('8.9999', 0),
    ('7', 12),
    ('6.8,6.9,6.10,7.0,7.1,7.2,7.3,7.4,7.5,7.6,7.7,7.8,7.9,7.10,8.0,8.1,8.2,8.3,8.4', 18),
    ('6,7,8', 18),
    ('6,7,8.2', 15),
    ('7.3', 11),
]

INV_5_TAGS = [{"namespace": "vulnerability", "key": "system_name", "value": "inv-5"}, {"namespace": "vulnerability", "key": "usage", "value": "NAS"}]
INV_17_TAGS = [{"namespace": "vulnerability", "key": "system_name", "value": "inv-17"}]

SYSTEMS_SERVER_TAGS = ["00000000-0000-0000-0000-000000000003", "00000000-0000-0000-0000-000000000007"]
SAP_SYSTEMS = ["00000000-0000-0000-0000-000000000004", "00000000-0000-0000-0000-000000000005", "00000000-0000-0000-0000-000000000006",
               "00000000-0000-0000-0000-000000000007", "00000000-0000-0000-0000-000000000015", "00000000-0000-0000-0000-000000000029",
               "00000000-0000-0000-0000-000000000032"]
ANSIBLE_SYSTEMS = ["00000000-0000-0000-0000-000000000022", "00000000-0000-0000-0000-000000000023", "00000000-0000-0000-0000-000000000024",
                   "00000000-0000-0000-0000-000000000028", "00000000-0000-0000-0000-000000000029", "00000000-0000-0000-0000-000000000031"]
MSSQL_SYSTEMS = ["00000000-0000-0000-0000-000000000025", "00000000-0000-0000-0000-000000000026", "00000000-0000-0000-0000-000000000027",
                 "00000000-0000-0000-0000-000000000028", "00000000-0000-0000-0000-000000000030", "00000000-0000-0000-0000-000000000031",
                 "00000000-0000-0000-0000-000000000032"]


class TestSystemHandler(FlaskTestCase):

    @pytest.mark.parametrize('value,expected', RHEL_VERSION_FILTER, ids=[x[0] for x in RHEL_VERSION_FILTER])
    def test_system_rhel_version(self, value, expected):
        """Test SYSTEM_RHEL_VERSION filter"""
        response = self.vfetch('systems?rhel_version={}'.format(value)).check_response()
        assert len(response.body.data) == expected

    def test_systems(self):
        response = self.vfetch("systems?excluded=false").check_response()
        response2 = self.vfetch('systems/ids?excluded=false').check_response()
        assert len(response.body.data) == len(response2.body.data) == 18 == response.body.meta.total_items

    def test_empty_uuid(self):
        response = self.vfetch('systems?uuid=').check_response()
        assert len(response.body.data) == 19

    def test_systems_cves_not_exists(self):
        self.vfetch("systems/b1f21450-0000-1111-2222-000000000000/cves").check_response(status_code=404)

    def test_systems_cves_not_evaluated(self):
        self.vfetch("systems/00000000-0000-0000-0000-000000000000/cves").check_response(status_code=404)

    def test_systems_cves_evaluated(self):
        response = self.vfetch("systems/00000000-0000-0000-0000-000000000004/cves").check_response()
        response2 = self.vfetch("systems/00000000-0000-0000-0000-000000000004/cves/ids").check_response()
        assert len(response.body.data) == len(response2.body.data) == 2

    def test_systems_cves_for_edge(self):
        response = self.vfetch("systems/00000000-0000-0000-0000-000000000020/cves").check_response()
        response2 = self.vfetch("systems/00000000-0000-0000-0000-000000000020/cves/ids").check_response()

        assert len(response.body.data) == len(response2.body.data) == 1

        response = self.vfetch("systems/00000000-0000-0000-0000-000000000021/cves").check_response()
        response2 = self.vfetch("systems/00000000-0000-0000-0000-000000000021/cves/ids").check_response()

        assert len(response.body.data) == len(response2.body.data) == 1

    def test_systems_cves_st_1(self):
        self.vfetch("systems/00000000-0000-0000-0000-000000000004/cves?status_id=1,nan").check_response(status_code=400)

    def test_systems_cves_st_2(self):
        response = self.vfetch("systems/00000000-0000-0000-0000-000000000004/cves?status_id=2").check_response()
        response2 = self.vfetch('systems/00000000-0000-0000-0000-000000000004/cves/ids?status_id=2').check_response()
        assert not response.body.data
        assert not response2.body.data

    def test_systems_cves_st_3(self):
        response = self.vfetch("systems/00000000-0000-0000-0000-000000000004/cves?status_id=3,4").check_response()
        response2 = self.vfetch('systems/00000000-0000-0000-0000-000000000004/cves/ids?status_id=3,4').check_response()
        assert len(response.body.data) == len(response2.body.data) == 2

    def test_cvss_filter(self):
        response = self.vfetch(
            'systems/00000000-0000-0000-0000-000000000007/cves?cvss_from=4.9&cvss_to=6.9'
        ).check_response()
        assert response.body.meta.cvss_from == 4.9
        assert response.body.meta.cvss_to == 6.9
        assert response.body.data  # so there's at least one record to test with
        for rec in response.body.data:
            score = rec.attributes.cvss3_score or rec.attributes.cvss2_score
            assert float(score) >= 4.9
            assert float(score) <= 6.9
        response2 = self.vfetch('systems/00000000-0000-0000-0000-000000000007/cves/ids?cvss_from=4.9&cvss_to=6.9').check_response()
        assert len(response2.body.data) == 6

    def test_cvss_filter_from(self):
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000007/cves?cvss_from=4.9').check_response()
        assert response.body.meta.cvss_from == 4.9
        assert response.body.data  # so there's at least one record to test with
        for rec in response.body.data:
            score = rec.attributes.cvss3_score or rec.attributes.cvss2_score
            assert float(score) >= 4.9

    def test_cvss_filter_to(self):
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000007/cves?cvss_to=6.9').check_response()
        assert response.body.meta.cvss_to == 6.9
        assert response.body.data  # so there's at least one record to test with
        for rec in response.body.data:
            score = rec.attributes.cvss3_score or rec.attributes.cvss2_score
            assert float(score) <= 6.9

    def test_public_filter(self):
        response = self.vfetch(
            'systems/00000000-0000-0000-0000-000000000007/cves?public_from=2018-01-03T00:00:00+00:00&public_to=2018-08-09T00:00:00+00:00'
        ).check_response()
        assert response.body.meta.public_from == '2018-01-03T00:00:00Z'
        assert response.body.meta.public_to == '2018-08-09T00:00:00Z'
        start_date = dateutil.parser.parse('2018-01-03T00:00:00+00:00')
        end_date = dateutil.parser.parse('2018-08-09T00:00:00+00:00')
        for rec in response.body.data:
            date = dateutil.parser.parse(rec.attributes.public_date)
            assert start_date <= date
            assert date <= end_date

    def test_system_excluded_filter(self):
        """Test for excluded filter"""
        response1 = self.vfetch('systems?excluded=false').check_response()
        response2 = self.vfetch('systems/ids?excluded=false').check_response()
        assert len(response1.body.data) == len(response2.body.data) == 18

        response1 = self.vfetch('systems?excluded=true,false').check_response()
        response2 = self.vfetch('systems/ids?excluded=true,false').check_response()
        assert len(response1.body.data) == len(response2.body.data) == 19

        response1 = self.vfetch('systems?excluded=true').check_response()
        response2 = self.vfetch('systems/ids?excluded=true').check_response()
        assert len(response1.body.data) == len(response2.body.data) == 1

        response1 = self.vfetch('systems?excluded=false,true').check_response()
        response2 = self.vfetch('systems/ids?excluded=false,true').check_response()
        assert len(response1.body.data) == len(response2.body.data) == 19

    @pytest.mark.parametrize('value,expected', IMPACT_FILTER, ids=[x[0] for x in IMPACT_FILTER])
    def test_impact_filter(self, value, expected):
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000007/cves?impact={}'.format(value))
        assert len(response.body.data) == expected == response.body.meta.total_items

    def test_bulk_opt_out_single(self):
        response = self.vfetch('systems/opt_out', json={'inventory_id': '00000000-0000-0000-0000-000000000005', 'opt_out': True},
                               method='PATCH').check_response()
        assert response.body.updated == ['00000000-0000-0000-0000-000000000005']
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000005').check_response()
        assert response.body.data.opt_out
        response = self.vfetch('systems/opt_out', json={'inventory_id': '00000000-0000-0000-0000-000000000005', 'opt_out': False},
                               method='PATCH').check_response()

    def test_bulk_opt_out_multiple(self):
        response = self.vfetch('systems/opt_out', json={'inventory_id': ['00000000-0000-0000-0000-000000000005',
                                                                         '00000000-0000-0000-0000-000000000006'], 'opt_out': False},
                               method='PATCH').check_response()
        assert len(response.body.updated) == 2

    def test_bulk_opt_out_multiple_one_wrong(self):
        response = self.vfetch('systems/opt_out', json={'inventory_id': ['00000000-0000-0000-0000-000000000005', 'b1f21450-0000-1111-2222-000000000000'],
                                                        'opt_out': False},
                               method='PATCH').check_response()
        assert response.body.updated == ['00000000-0000-0000-0000-000000000005']

    def test_bulk_opt_out_404(self):
        self.vfetch('systems/opt_out', json={'inventory_id': ['b1f21450-0000-1111-2222-000000000000', 'b1f21450-3333-4444-5555-000000000000'],
                                             'opt_out': False},
                    method='PATCH').check_response(status_code=404)

    def test_bulk_opt_out_null(self):
        self.vfetch('systems/opt_out',
                    json="{'inventory_id': [null], 'opt_out': false}",
                    method='PATCH').check_response(status_code=400)

    def test_bulk_opt_out_invalid_char(self):
        self.vfetch('systems/opt_out',
                    json={'inventory_id': ['\u0000'], 'opt_out': False},
                    method='PATCH').check_response(status_code=400)

    def test_system_details(self):
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000004').check_response()
        assert response.body.data.last_evaluation is not None
        assert not response.body.data.opt_out

    def test_system_details_invalid_id(self):
        response = self.vfetch('systems/b1f21450-0000-1111-2222-000000000000').check_response(status_code=404)
        assert response.body.errors[0].detail == 'inventory_id must exist and inventory_id must be visible to user'

    def test_system_business_risk_filtering(self):
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000005/cves?business_risk_id=0').check_response()
        assert len(response.body.data) == 7
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000005/cves?business_risk_id=0,1').check_response()
        assert len(response.body.data) == 7
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000005/cves?business_risk_id=2').check_response()
        assert not response.body.data

    def test_display_name_filtering(self):
        response = self.vfetch('systems?filter=inv-5.example.com').check_response()
        response2 = self.vfetch('systems/ids?filter=inv-5.example.com').check_response()
        assert len(response.body.data) == len(response2.body.data) == 1

    def test_uuid_filtering(self):
        response = self.vfetch('systems?uuid=00000000-0000-0000-0000-000000000007').check_response()
        response2 = self.vfetch('systems/ids?uuid=00000000-0000-0000-0000-000000000007').check_response()
        assert len(response.body.data) == len(response2.body.data) == 1

    def test_uuid_and_display_name_filtering(self):
        response = self.vfetch('systems?filter=inv-7.example.com&uuid=00000000-0000-0000-0000-000000000007').check_response()
        assert len(response.body.data) == 1

    def test_uuid_different_display_name(self):
        """Filter different uuid and display name"""
        response = self.vfetch('systems?filter=inv-5.example.com&uuid=00000000-0000-0000-0000-000000000007').check_response()
        assert not response.body.data

    def test_empty_uuid_filter(self):
        response = self.vfetch('systems?uuid=&filter=inv-7.example.com').check_response()
        assert len(response.body.data) == 1

    def test_system_details_advisor_evaluated(self):
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000015').check_response()
        assert response.body.data.last_evaluation is None
        assert not response.body.data.opt_out
        assert response.body.data.rules_evaluation is not None

    def test_system_cves_rule_filter(self):
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000005/cves?rule_presence=true').check_response()
        cves_with_rule = len(response.body.data)
        assert cves_with_rule == 5
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000005/cves?rule_presence=false').check_response()
        cves_without_rule = len(response.body.data)
        assert cves_without_rule == 2
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000005/cves').check_response()
        assert len(response.body.data) == cves_with_rule + cves_without_rule

    def test_systems_stale_filter(self):
        response = self.vfetch('systems?stale=true')
        response2 = self.vfetch('systems/ids?stale=true')
        assert len(response.body.data) == len(response2.body.data) == 1

    def test_na_cvss_filter(self):
        """Test CVSS filter for n/a cvss ratings. """
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000003/cves?cvss_from=-1&cvss_to=-1').check_response()
        assert response.body.meta.cvss_from == -1.0
        assert response.body.meta.cvss_to == -1.0

        assert response.body.meta.total_items == 1

        for rec in response.body.data:
            assert rec.attributes.cvss2_score is None
            assert rec.attributes.cvss3_score is None

    def test_na_normal_cvss_filter(self):
        """Test CVSS filter for both n/a and given range. """
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000003/cves?cvss_from=-1&cvss_to=5.9').check_response()
        assert response.body.meta.total_items == 3

        for rec in response.body.data:
            if rec.attributes.cvss3_score:
                assert float(rec.attributes.cvss3_score) <= 5.9
            elif rec.attributes.cvss2_score:
                assert float(rec.attributes.cvss2_score) <= 5.9

    def test_cve_reporter(self):
        """Test reporter of CVE"""
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000005/cves?filter=CVE-2017-7').check_response()
        assert response.body.data[0].attributes.reporter == 1  # reported by VMaaS only

        response = self.vfetch('systems/00000000-0000-0000-0000-000000000007/cves?filter=CVE-2018-1').check_response()
        assert response.body.data[0].attributes.reporter == 2  # reported by rules only

        response = self.vfetch('systems/00000000-0000-0000-0000-000000000005/cves?filter=CVE-2018-1').check_response()
        assert response.body.data[0].attributes.reporter == 3  # reported by both VMaaS and rules

    def test_system_cves_rule_filter_multiple_bools(self):
        """Test that multiple different bools, must have
           the same behaviour as not specified parameter"""
        response_bools = self.vfetch('systems/00000000-0000-0000-0000-000000000003/cves?rule_presence=true,false').check_response()
        response_all = self.vfetch('systems/00000000-0000-0000-0000-000000000003/cves').check_response()

        assert response_bools.body.meta.total_items == response_all.body.meta.total_items

    def test_system_cves_rule_filter_multiple_same_bools(self):
        """Test with multiple same bools"""
        response_multiple = self.vfetch('systems/00000000-0000-0000-0000-000000000003/cves?rule_presence=true,true').check_response()
        response_single = self.vfetch('systems/00000000-0000-0000-0000-000000000003/cves?rule_presence=true').check_response()

        assert response_multiple.body.meta.total_items == response_single.body.meta.total_items
        assert response_multiple.body.meta.rule_presence == 'True'

    def test_system_cves_rule_filter_multiple_wrong(self):
        """Test for invalid boolean value in multiple booleans"""
        self.vfetch('systems/00000000-0000-0000-0000-000000000003/cves?rule_presence=true,thisisnotbool').check_response(status_code=400)

    def test_system_tags(self):
        """Fetch tags for systems"""
        response = self.vfetch('systems').check_response()
        inv_5 = False
        inv_17 = False
        for rec in response.body.data:
            if rec.id == "00000000-0000-0000-0000-000000000005":
                assert rec.attributes.tags == INV_5_TAGS
                inv_5 = True
            elif rec.id == "00000000-0000-0000-0000-000000000017":
                assert rec.attributes.tags == INV_17_TAGS
                inv_17 = True

        assert inv_5 is True
        assert inv_17 is True

    def test_system_specific_tags(self):
        """Fetch tags for single system"""
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000005').check_response()
        assert response.body.data.tags == INV_5_TAGS
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000017').check_response()
        assert response.body.data.tags == INV_17_TAGS

    def test_system_tags_filter(self):
        """Fetch systems by given tag"""
        response = self.vfetch('systems?tags=vulnerability/usage=server').check_response()
        assert response.data

        for rec in response.body.data:
            assert rec.attributes.inventory_id in SYSTEMS_SERVER_TAGS

    def test_system_tags_filter_multiple(self):
        """Fetch systems by given tags"""
        response = self.vfetch('systems?tags=vulnerability/usage=server,vulnerability/system_name=inv-3').check_response()
        assert response.data

        assert response.body.meta.total_items == 1
        for rec in response.body.data:
            assert rec.attributes.inventory_id == '00000000-0000-0000-0000-000000000003'

    def test_system_sap_filter(self):
        """Test sap system filter"""
        response = self.vfetch('systems?sap_system=true').check_response()
        for system in response.body.data:
            assert system.attributes.inventory_id in SAP_SYSTEMS

        response = self.vfetch('systems?sap_system=false').check_response()
        for system in response.body.data:
            assert system.attributes.inventory_id not in SAP_SYSTEMS

    def test_system_sap_filter_counts(self):
        """Test counts for returned systems using sap filter"""
        response_true = self.vfetch('systems?sap_system=true').check_response()
        response_false = self.vfetch('systems?sap_system=false').check_response()
        response_all = self.vfetch('systems').check_response()

        assert response_all.body.meta.total_items == (response_true.body.meta.total_items +
                                                      response_false.body.meta.total_items)

    def test_system_ansible_filter(self):
        """Test ansible system filter"""
        response = self.vfetch('systems?ansible=true').check_response()

        assert len(response.body.data) == len(ANSIBLE_SYSTEMS)
        for system in response.body.data:
            assert system.attributes.inventory_id in ANSIBLE_SYSTEMS

        response = self.vfetch('systems?ansible=false').check_response()
        for system in response.body.data:
            assert system.attributes.inventory_id not in ANSIBLE_SYSTEMS

    def test_system_mssql_filter(self):
        """Test mssql system filter"""
        response = self.vfetch('systems?mssql=true').check_response()

        assert len(response.body.data) == len(MSSQL_SYSTEMS)
        for system in response.body.data:
            assert system.attributes.inventory_id in MSSQL_SYSTEMS

        response = self.vfetch('systems?mssql=false').check_response()
        for system in response.body.data:
            assert system.attributes.inventory_id not in MSSQL_SYSTEMS

    def test_system_cves_known_exploit_filter(self):
        response = self.vfetch('systems/00000000-0000-0000-0000-000000000005/cves?known_exploit=true').check_response()
        exploited = len(response.body.data)
        assert exploited == 2

        response = self.vfetch('systems/00000000-0000-0000-0000-000000000005/cves?known_exploit=false').check_response()
        not_exploited = len(response.body.data)
        assert not_exploited == 5

        response = self.vfetch('systems/00000000-0000-0000-0000-000000000005/cves').check_response()
        assert len(response.body.data) == (exploited + not_exploited)

    def test_system_multiple_bools_too_much_values(self):
        """Test if multiple bools filters can check repetition"""
        self.vfetch("systems?excluded=true,false,true,false").check_response(status_code=400)

    def test_os_field(self):
        """Test OS data coming from cyndi"""
        response = self.vfetch('systems').check_response()
        assert 'os' in response.body.data[0].attributes
        assert isinstance(response.body.data[0].attributes.os, str)

    def test_os_sort(self):
        response = self.vfetch('systems?sort=os').check_response()
        data = [rec.attributes.os for rec in response.body.data]
        assert sorted(data) == data

        response = self.vfetch('systems?sort=-os').check_response()
        data = [rec.attributes.os for rec in response.body.data]
        assert sorted(data, reverse=True) == data
