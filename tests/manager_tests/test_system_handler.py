"""Unit tests for status_handler"""
# pylint: disable=missing-docstring,too-many-public-methods,invalid-name

import dateutil.parser
import pytest

from .vuln_testcase import FlaskTestCase

IMPACT_FILTER = [
    ('1,2,3,4,5,6,7', 12),
    ('7', 5),
    ('4,5,6,7', 11)
]

INV_5_TAGS = [{"namespace": "vulnerability", "key": "system_name", "value": "inv-5"}, {"namespace": "vulnerability", "key": "usage", "value": "NAS"}]
INV_17_TAGS = [{"namespace": "vulnerability", "key": "system_name", "value": "inv-17"}]

SYSTEMS_SERVER_TAGS = ["INV-3", "INV-7"]
SAP_SYSTEMS = ["INV-4", "INV-5", "INV-6", "INV-7", "INV-15"]


class TestSystemHandler(FlaskTestCase):

    def test_systems(self):
        response = self.vfetch("systems").check_response()
        response2 = self.vfetch('systems/ids').check_response()
        assert len(response.body.data) == len(response2.body.data) == 7 == response.body.meta.total_items

    def test_empty_uuid(self):
        response = self.vfetch('systems?uuid=').check_response()
        assert len(response.body.data) == 7

    def test_systems_cves_not_exists(self):
        self.vfetch("systems/INV-INVALID/cves").check_response(status_code=404)

    def test_systems_cves_not_evaluated(self):
        self.vfetch("systems/INV-0/cves").check_response(status_code=404)

    def test_systems_cves_evaluated(self):
        response = self.vfetch("systems/INV-4/cves").check_response()
        response2 = self.vfetch("systems/INV-4/cves/ids").check_response()
        assert len(response.body.data) == len(response2.body.data) == 2

    def test_systems_cves_st_1(self):
        self.vfetch("systems/INV-4/cves?status_id=1,nan").check_response(status_code=400)

    def test_systems_cves_st_2(self):
        response = self.vfetch("systems/INV-4/cves?status_id=2").check_response()
        response2 = self.vfetch('systems/INV-4/cves/ids?status_id=2').check_response()
        assert not response.body.data
        assert not response2.body.data

    def test_systems_cves_st_3(self):
        response = self.vfetch("systems/INV-4/cves?status_id=3,4").check_response()
        response2 = self.vfetch('systems/INV-4/cves/ids?status_id=3,4').check_response()
        assert len(response.body.data) == len(response2.body.data) == 2

    def test_cvss_filter(self):
        response = self.vfetch(
            'systems/INV-7/cves?cvss_from=4.9&cvss_to=6.9'
        ).check_response()
        assert response.body.meta.cvss_from == 4.9
        assert response.body.meta.cvss_to == 6.9
        assert response.body.data  # so there's at least one record to test with
        for rec in response.body.data:
            score = rec.attributes.cvss3_score or rec.attributes.cvss2_score
            assert float(score) >= 4.9
            assert float(score) <= 6.9
        response2 = self.vfetch('systems/INV-7/cves/ids?cvss_from=4.9&cvss_to=6.9').check_response()
        assert len(response2.body.data) == 6

    def test_cvss_filter_from(self):
        response = self.vfetch('systems/INV-7/cves?cvss_from=4.9').check_response()
        assert response.body.meta.cvss_from == 4.9
        assert response.body.data  # so there's at least one record to test with
        for rec in response.body.data:
            score = rec.attributes.cvss3_score or rec.attributes.cvss2_score
            assert float(score) >= 4.9

    def test_cvss_filter_to(self):
        response = self.vfetch('systems/INV-7/cves?cvss_to=6.9').check_response()
        assert response.body.meta.cvss_to == 6.9
        assert response.body.data  # so there's at least one record to test with
        for rec in response.body.data:
            score = rec.attributes.cvss3_score or rec.attributes.cvss2_score
            assert float(score) <= 6.9

    def test_public_filter(self):
        response = self.vfetch(
            'systems/INV-7/cves?public_from=2018-01-03T00:00:00+00:00&public_to=2018-08-09T00:00:00+00:00'
        ).check_response()
        assert response.body.meta.public_from == '2018-01-03T00:00:00Z'
        assert response.body.meta.public_to == '2018-08-09T00:00:00Z'
        start_date = dateutil.parser.parse('2018-01-03T00:00:00+00:00')
        end_date = dateutil.parser.parse('2018-08-09T00:00:00+00:00')
        for rec in response.body.data:
            date = dateutil.parser.parse(rec.attributes.public_date)
            assert start_date <= date
            assert date <= end_date

    @pytest.mark.parametrize('value,expected', IMPACT_FILTER, ids=[x[0] for x in IMPACT_FILTER])
    def test_impact_filter(self, value, expected):
        response = self.vfetch('systems/INV-7/cves?impact={}'.format(value))
        assert len(response.body.data) == expected == response.body.meta.total_items

    def test_opt_out_filtering(self):
        hidden = self.vfetch("systems?opt_out=true").check_response()
        hidden2 = self.vfetch('systems/ids?opt_out=true').check_response()
        assert not hidden.body.data
        assert not hidden2.body.data
        visible = self.vfetch("systems?opt_out=false").check_response()
        visible2 = self.vfetch('systems/ids?opt_out=false').check_response()
        all_systems = self.vfetch("systems").check_response()
        all_systems2 = self.vfetch('systems/ids').check_response()
        assert len(visible.body.data) == len(all_systems.body.data) == len(visible2.body.data) == len(all_systems2.body.data)

    def test_opt_out_invalid_params(self):
        self.vfetch("systems/INV-4/opt_out", data="", method="PATCH").check_response(status_code=400)
        self.vfetch("systems/INV-4/opt_out?value=123bla", data="", method="PATCH").check_response(
            status_code=400
        )
        self.vfetch("systems/IVALID-ID/opt_out?value=true", data="", method="PATCH").check_response(status_code=404)

    def test_opt_out(self):
        self.vfetch("systems/INV-4/opt_out?value=true", data="", method="PATCH")
        hidden = self.vfetch("systems?opt_out=true")
        assert len(hidden.body.data) == 1

        response = self.vfetch("systems?opt_out=true").check_response()
        assert len(response.body.data) == 1

        self.vfetch("systems/INV-4/opt_out?value=false", data="", method="PATCH")
        hidden = self.vfetch("systems?opt_out=true")
        assert not hidden.body.data

    def test_bulk_opt_out_single(self):
        response = self.vfetch('systems/opt_out', json={'inventory_id': 'INV-5', 'opt_out': True},
                               method='PATCH').check_response()
        assert response.body.updated == ['INV-5']
        response = self.vfetch('systems/INV-5').check_response()
        assert response.body.data.opt_out
        response = self.vfetch('systems/opt_out', json={'inventory_id': 'INV-5', 'opt_out': False},
                               method='PATCH').check_response()

    def test_bulk_opt_out_multiple(self):
        response = self.vfetch('systems/opt_out', json={'inventory_id': ['INV-5', 'INV-6'], 'opt_out': False},
                               method='PATCH').check_response()
        assert len(response.body.updated) == 2

    def test_bulk_opt_out_multiple_one_wrong(self):
        response = self.vfetch('systems/opt_out', json={'inventory_id': ['INV-5', 'NOT-EXISTING'], 'opt_out': False},
                               method='PATCH').check_response()
        assert response.body.updated == ['INV-5']

    def test_bulk_opt_out_404(self):
        self.vfetch('systems/opt_out', json={'inventory_id': ['NOT-EXISTING', 'ALSO-NOT-EXISTING'], 'opt_out': False},
                    method='PATCH').check_response(status_code=404)

    def test_bulk_opt_out_null(self):
        self.vfetch('systems/opt_out',
                    json="{'inventory_id': [null], 'opt_out': false}",
                    method='PATCH').check_response(status_code=400)

    def test_bulk_opt_out_invalid_char(self):
        self.vfetch('systems/opt_out',
                    json={'inventory_id': ['\u0000'], 'opt_out': False},
                    method='PATCH').check_response(status_code=400)

    def test_system_details(self):
        response = self.vfetch('systems/INV-4').check_response()
        assert response.body.data.last_evaluation is not None
        assert not response.body.data.opt_out

    def test_system_details_invalid_id(self):
        response = self.vfetch('systems/INV-INVALID').check_response(status_code=404)
        assert response.body.errors[0].detail == 'inventory_id must exist and inventory_id must be visible to user'

    def test_system_delete(self):
        self.vfetch("systems/INV-4", data="", method="DELETE").check_response()
        response = self.vfetch("systems/INV-4", data="", method="DELETE").check_response(status_code=404)
        assert response.body.errors[0].detail == 'inventory_id must exist and inventory_id must be visible to user'

    def test_system_delete_invalid_id(self):
        response = self.vfetch("systems/INV-INVALID", data="", method="DELETE").check_response(status_code=404)
        assert response.body.errors[0].detail == 'inventory_id must exist and inventory_id must be visible to user'

    def test_system_business_risk_filtering(self):
        response = self.vfetch('systems/INV-5/cves?business_risk_id=0').check_response()
        assert len(response.body.data) == 7
        response = self.vfetch('systems/INV-5/cves?business_risk_id=0,1').check_response()
        assert len(response.body.data) == 7
        response = self.vfetch('systems/INV-5/cves?business_risk_id=2').check_response()
        assert not response.body.data

    def test_display_name_filtering(self):
        response = self.vfetch('systems?filter=inv-5.example.com').check_response()
        response2 = self.vfetch('systems/ids?filter=inv-5.example.com').check_response()
        assert len(response.body.data) == len(response2.body.data) == 1

    def test_uuid_filtering(self):
        response = self.vfetch('systems?uuid=INV-7').check_response()
        response2 = self.vfetch('systems/ids?uuid=INV-7').check_response()
        assert len(response.body.data) == len(response2.body.data) == 1

    def test_uuid_and_display_name_filtering(self):
        response = self.vfetch('systems?filter=inv-7.example.com&uuid=INV-7').check_response()
        assert len(response.body.data) == 1

    def test_uuid_different_display_name(self):
        """Filter different uuid and display name"""
        response = self.vfetch('systems?filter=inv-5.example.com&uuid=INV-7').check_response()
        assert not response.body.data

    def test_empty_uuid_filter(self):
        response = self.vfetch('systems?uuid=&filter=inv-7.example.com').check_response()
        assert len(response.body.data) == 1

    def test_system_details_advisor_evaluated(self):
        response = self.vfetch('systems/INV-15').check_response()
        assert response.body.data.last_evaluation is None
        assert not response.body.data.opt_out
        assert response.body.data.rules_evaluation is not None

    def test_system_cves_rule_filter(self):
        response = self.vfetch('systems/INV-5/cves?security_rule=true').check_response()
        cves_with_rule = len(response.body.data)
        assert cves_with_rule == 5
        response = self.vfetch('systems/INV-5/cves?security_rule=false').check_response()
        cves_without_rule = len(response.body.data)
        assert cves_without_rule == 2
        response = self.vfetch('systems/INV-5/cves').check_response()
        assert len(response.body.data) == cves_with_rule + cves_without_rule

        response = self.vfetch('systems/INV-5/cves?rule_presence=true').check_response()
        cves_with_rule = len(response.body.data)
        assert cves_with_rule == 5
        response = self.vfetch('systems/INV-5/cves?rule_presence=false').check_response()
        cves_without_rule = len(response.body.data)
        assert cves_without_rule == 2
        response = self.vfetch('systems/INV-5/cves').check_response()
        assert len(response.body.data) == cves_with_rule + cves_without_rule

    def test_systems_stale_filter(self):
        response = self.vfetch('systems?stale=true')
        response2 = self.vfetch('systems/ids?stale=true')
        assert len(response.body.data) == len(response2.body.data) == 1

    def test_na_cvss_filter(self):
        """Test CVSS filter for n/a cvss ratings. """
        response = self.vfetch('systems/INV-3/cves?cvss_from=-1&cvss_to=-1').check_response()
        assert response.body.meta.cvss_from == -1.0
        assert response.body.meta.cvss_to == -1.0

        assert response.body.meta.total_items == 1

        for rec in response.body.data:
            assert rec.attributes.cvss2_score is None
            assert rec.attributes.cvss3_score is None

    def test_na_normal_cvss_filter(self):
        """Test CVSS filter for both n/a and given range. """
        response = self.vfetch('systems/INV-3/cves?cvss_from=-1&cvss_to=5.9').check_response()
        assert response.body.meta.total_items == 4

        for rec in response.body.data:
            if rec.attributes.cvss3_score:
                assert float(rec.attributes.cvss3_score) <= 5.9
            elif rec.attributes.cvss2_score:
                assert float(rec.attributes.cvss2_score) <= 5.9

    def test_cve_reporter(self):
        """Test reporter of CVE"""
        response = self.vfetch('systems/INV-5/cves?filter=CVE-2017-7').check_response()
        assert response.body.data[0].attributes.reporter == 1  # reported by VMaaS only

        response = self.vfetch('systems/INV-7/cves?filter=CVE-2018-1').check_response()
        assert response.body.data[0].attributes.reporter == 2  # reported by rules only

        response = self.vfetch('systems/INV-5/cves?filter=CVE-2018-1').check_response()
        assert response.body.data[0].attributes.reporter == 3  # reported by both VMaaS and rules

    def test_system_cves_rule_filter_multiple_bools(self):
        """Test that multiple different bools, must have
           the same behaviour as not specified parameter"""
        response_bools = self.vfetch('systems/INV-3/cves?rule_presence=true,false').check_response()
        response_all = self.vfetch('systems/INV-3/cves').check_response()

        assert response_bools.body.meta.total_items == response_all.body.meta.total_items

    def test_system_cves_rule_filter_multiple_same_bools(self):
        """Test with multiple same bools"""
        response_multiple = self.vfetch('systems/INV-3/cves?rule_presence=true,true,true,true').check_response()
        response_single = self.vfetch('systems/INV-3/cves?rule_presence=true').check_response()

        assert response_multiple.body.meta.total_items == response_single.body.meta.total_items
        assert response_multiple.body.meta.rule_presence == 'True'

    def test_system_cves_rule_filter_multiple_wrong(self):
        """Test for invalid boolean value in multiple booleans"""
        self.vfetch('systems/INV-3/cves?rule_presence=true,thisisnotbool').check_response(status_code=400)

    def test_system_tags(self):
        """Fetch tags for systems"""
        response = self.vfetch('systems').check_response()
        inv_5 = False
        inv_17 = False
        for rec in response.body.data:
            if rec.id == "INV-5":
                assert rec.attributes.tags == INV_5_TAGS
                inv_5 = True
            elif rec.id == "INV-17":
                assert rec.attributes.tags == INV_17_TAGS
                inv_17 = True

        assert inv_5 is True
        assert inv_17 is True

    def test_system_specific_tags(self):
        """Fetch tags for single system"""
        response = self.vfetch('systems/INV-5').check_response()
        assert response.body.data.tags == INV_5_TAGS
        response = self.vfetch('systems/INV-17').check_response()
        assert response.body.data.tags == INV_17_TAGS

    def test_system_tags_filter(self):
        """Fetch systems by given tag"""
        response = self.vfetch('systems?tags=vulnerability/usage=server').check_response()
        assert response.data

        for rec in response.body.data:
            assert rec.attributes.inventory_id in SYSTEMS_SERVER_TAGS

    def test_system_tags_filter_multiple(self):
        """Fetch systems by given tags"""
        response = self.vfetch('systems?tags=vulnerability/usage=server,vulnerability/system_name=inv-3').check_response()
        assert response.data

        assert response.body.meta.total_items == 1
        for rec in response.body.data:
            assert rec.attributes.inventory_id == 'INV-3'

    def test_system_sap_filter(self):
        """Test sap system filter"""
        response = self.vfetch('systems?sap_system=true').check_response()
        for system in response.body.data:
            assert system.attributes.inventory_id in SAP_SYSTEMS

        response = self.vfetch('systems?sap_system=false').check_response()
        for system in response.body.data:
            assert system.attributes.inventory_id not in SAP_SYSTEMS

    def test_system_sap_filter_counts(self):
        """Test counts for returned systems using sap filter"""
        response_true = self.vfetch('systems?sap_system=true').check_response()
        response_false = self.vfetch('systems?sap_system=false').check_response()
        response_all = self.vfetch('systems').check_response()

        assert response_all.body.meta.total_items == (response_true.body.meta.total_items +
                                                      response_false.body.meta.total_items)
