"""Unit tests for status_handler"""
# pylint: disable=missing-docstring,too-many-public-methods,invalid-name

import dateutil.parser
import pytest

from .vuln_testcase import FlaskTestCase

SEVERITY_FILTER = [
    ('1,2,3,4,5,6,7', 11),
    ('7', 5),
    ('4,5,6,7', 10)
]


class TestSystemHandler(FlaskTestCase):

    def test_systems(self):
        response = self.vfetch("systems").check_response()
        assert len(response.body.data) == 4 == response.body.meta.total_items

    def test_hide_satellite_managed_systems(self):
        response = self.vfetch('systems', headers={'Hide-Satellite-Managed': True}).check_response()
        assert len(response.body.data) == 3 == response.body.meta.total_items

    def test_hide_satellite_managed_systems_cves(self):
        response = self.vfetch('systems/INV-ID00-0000-7777/cves',
                               headers={'Hide-Satellite-Managed': True}).check_response(status_code=404)
        assert response.body.errors[0].detail == 'inventory_id must exist and inventory_id must be visible to user'

    def test_systems_cves_not_exists(self):
        self.vfetch("systems/INV-INVALID/cves").check_response(status_code=404)

    def test_systems_cves_not_evaluated(self):
        self.vfetch("systems/INV-ID00-0000-0000/cves").check_response(status_code=404)

    def test_systems_cves_evaluated(self):
        response = self.vfetch("systems/INV-ID00-0000-4444/cves").check_response()
        assert len(response.body.data) == 2

    def test_systems_cves_st_1(self):
        self.vfetch("systems/INV-ID00-0000-4444/cves?status_id=1,nan").check_response(status_code=400)

    def test_systems_cves_st_2(self):
        response = self.vfetch("systems/INV-ID00-0000-4444/cves?status_id=2").check_response()
        assert not response.body.data

    def test_systems_cves_st_3(self):
        response = self.vfetch("systems/INV-ID00-0000-4444/cves?status_id=3,4").check_response()
        assert len(response.body.data) == 2

    def test_cvss_filter(self):
        response = self.vfetch(
            'systems/INV-ID00-0000-7777/cves?cvss_from=4.9&cvss_to=6.9'
        ).check_response()
        assert response.body.meta.cvss_from == 4.9
        assert response.body.meta.cvss_to == 6.9
        for rec in response.body.data:
            score = rec.attributes.cvss3_score or rec.attributes.cvss2_score
            assert float(score) >= 4.9
            assert float(score) <= 6.9

    def test_public_filter(self):
        response = self.vfetch(
            'systems/INV-ID00-0000-7777/cves?public_from=2018-01-03T00:00:00+00:00&public_to=2018-08-09T00:00:00+00:00'
        ).check_response()
        assert response.body.meta.public_from == '2018-01-03T00:00:00Z'
        assert response.body.meta.public_to == '2018-08-09T00:00:00Z'
        start_date = dateutil.parser.parse('2018-01-03T00:00:00+00:00')
        end_date = dateutil.parser.parse('2018-08-09T00:00:00+00:00')
        for rec in response.body.data:
            date = dateutil.parser.parse(rec.attributes.public_date)
            assert start_date <= date
            assert date <= end_date

    @pytest.mark.parametrize('value,expected', SEVERITY_FILTER, ids=[x[0] for x in SEVERITY_FILTER])
    def test__severity_filter(self, value, expected):
        response = self.vfetch('systems/INV-ID00-0000-7777/cves?severity={}'.format(value))
        assert len(response.body.data) == expected == response.body.meta.total_items

    def test_opt_out_filtering(self):
        hidden = self.vfetch("systems?opt_out=true").check_response()
        assert not hidden.body.data
        visible = self.vfetch("systems?opt_out=false").check_response()
        all_systems = self.vfetch("systems").check_response()
        assert len(visible.body.data) == len(all_systems.body.data)

    def test_opt_out_invalid_params(self):
        self.vfetch("systems/INV-ID00-0000-4444/opt_out", data="", method="PATCH").check_response(status_code=400)
        self.vfetch("systems/INV-ID00-0000-4444/opt_out?value=123bla", data="", method="PATCH").check_response(
            status_code=400
        )
        self.vfetch("systems/IVALID-ID/opt_out?value=true", data="", method="PATCH").check_response(status_code=404)

    def test_opt_out(self):
        self.vfetch("systems/INV-ID00-0000-4444/opt_out?value=true", data="", method="PATCH")
        hidden = self.vfetch("systems?opt_out=true")
        assert len(hidden.body.data) == 1

        response = self.vfetch("systems/INV-ID00-0000-4444/cves").check_response(status_code=404)
        assert response.body.errors[0].detail == "inventory_id exists but is opted out"

        self.vfetch("systems/INV-ID00-0000-4444/opt_out?value=false", data="", method="PATCH")
        hidden = self.vfetch("systems?opt_out=true")
        assert not hidden.body.data
