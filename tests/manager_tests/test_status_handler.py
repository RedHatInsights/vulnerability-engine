"""Unit tests for status_handler"""
# pylint: disable=missing-docstring,too-many-public-methods,invalid-name

from .vuln_testcase import FlaskTestCase


class TestStatusHandler(FlaskTestCase):
    def test_status_list(self):
        status = self.vfetch("status")
        assert len(status.body.data) == 7
        assert status.body.data[0]["id"] == 0
        assert status.body.data[0]["name"] == "Not Reviewed"

    def test_status_invalid(self):
        self.vfetch("status", data="", method="PATCH").check_response(400)
        self.vfetch("status", data='{"cve":"CVE-2014-1", "status_id":"2"}', method="PATCH").check_response(400)
        self.vfetch("status", data='{"inventory_id": "00000000-0000-0000-0000-000000000000", "status_id":"2"}', method="PATCH").check_response(400)
        self.vfetch("status", data='{"inventory_id": "00000000-0000-0000-0000-000000000000", "cve":"CVE-2014-1", }', method="PATCH").check_response(400)
        self.vfetch(
            "status", data='{"inventory_id": "00000000-0000-0000-0000-000000000000", "cve":"CVE-2014-1", "status_id":"2"', method="PATCH"
        ).check_response(400)
        self.vfetch(
            "status", data='{"inventory_id": "00000000-0000-0000-0000-000000000000", "cve":"CVE-2014-abcdef, "status_id":"2"}', method="PATCH"
        ).check_response(400)
        self.vfetch(
            "status", data='{"inventory_id": "00000000-0000-0000-0000-000000000000", "cve":"CVE-2014-1", "status_id":"a"}', method="PATCH"
        ).check_response(400)
        self.vfetch(
            "status", data='{"inventory_id": "b1f21450-0000-1111-2222-000000000000", "cve":"CVE-2014-1", "status_id":2}', method="PATCH"
        ).check_response(404)

    def test_status(self):
        self.vfetch(
            "status", data='{"inventory_id": "00000000-0000-0000-0000-000000000005", "cve":"CVE-2014-1", "status_id":2}', method="PATCH"
        ).check_response()

    def test_status_many_systems(self):
        self.vfetch(
            "status",
            data="""{"inventory_id": ["00000000-0000-0000-0000-000000000004", "00000000-0000-0000-0000-000000000005"],
                                       "cve":"CVE-2014-1", "status_id":2}""",
            method="PATCH",
        ).check_response()

    def test_status_many_cves(self):
        self.vfetch(
            "status",
            data="""{"inventory_id": ["00000000-0000-0000-0000-000000000004", "00000000-0000-0000-0000-000000000005"],
                             "cve": ["CVE-2014-1", "CVE-2017-6"], "status_id":2}""",
            method="PATCH",
        ).check_response()

    def test_status_default_cve_level(self):
        self.vfetch("status", data='{"inventory_id": "00000000-0000-0000-0000-000000000005", "cve":"CVE-2014-1"}', method="PATCH").check_response()

    def test_status_all_systems(self):
        self.vfetch("status", data='{"cve":"CVE-2014-1", "status_id":4}', method="PATCH").check_response()

    def test_status_text(self):
        self.vfetch(
            "status", data='{"inventory_id": "00000000-0000-0000-0000-000000000004", "cve": "CVE-2014-1", "status_text": "justified"}', method="PATCH"
        ).check_response()

    def test_bad_status_id(self):
        self.vfetch(
            "status", data='{"inventory_id": "00000000-0000-0000-0000-000000000005", "cve":"CVE-2014-1", "status_id":19}', method="PATCH"
        ).check_response(status_code=400)


class TestCveStatus(FlaskTestCase):
    def test_missing_params(self):
        response = self.vfetch("cves/status", method="PATCH", json={"cve": "CVE-2018-5"}).check_response(status_code=400)
        error_msg = "At least one of the 'status_id' or 'status_text' parameters is required."
        assert response.body.errors[0].detail == error_msg

    def test_set_status_single(self):
        response = self.vfetch("cves/status", method="PATCH", json={"cve": "CVE-2018-5", "status_id": 3, "status_text": "test_single"}).check_response()
        assert len(response.body.updated) == 1
        response = self.vfetch("cves/CVE-2018-5").check_response()
        assert response.body.data.attributes.status_id == 3
        assert response.body.data.attributes.status_text == "test_single"

    def test_set_status_multiple(self):
        response = self.vfetch(
            "cves/status", method="PATCH", json={"cve": ["CVE-2018-1", "CVE-2018-2"], "status_id": 1, "status_text": "test_multiple"}
        ).check_response()
        assert len(response.body.updated) == 2

    def test_multiple_unknown_cves(self):
        response = self.vfetch("cves/status", json={"cve": ["UNKNOWN-1", "UNKNOWN-2"], "status_id": 0}, method="PATCH").check_response(status_code=404)
        assert response.body.errors[0].detail == "At least one given CVE must exist"

    def test_unknown_cve(self):
        response = self.vfetch("cves/status", json={"cve": ["UNKNOWN-1", "CVE-2018-5"], "status_id": 0}, method="PATCH").check_response()
        assert len(response.body.updated) == 1

    def test_set_status_only(self):
        # first set up both status and text values
        self.vfetch("cves/status", method="PATCH", json={"cve": "CVE-2018-5", "status_id": 1, "status_text": "text"}).check_response()
        self.vfetch("cves/status", method="PATCH", json={"cve": "CVE-2018-5", "status_id": 2}).check_response()
        response = self.vfetch("cves/CVE-2018-5").check_response()
        assert response.body.data.attributes.status_id == 2
        assert response.body.data.attributes.status_text == "text"

    def test_set_text_only(self):
        # first set up both status and text values
        self.vfetch("cves/status", method="PATCH", json={"cve": "CVE-2018-5", "status_id": 1, "status_text": "text"}).check_response()
        self.vfetch("cves/status", method="PATCH", json={"cve": "CVE-2018-5", "status_text": "text_only"}).check_response()
        response = self.vfetch("cves/CVE-2018-5").check_response()
        assert response.body.data.attributes.status_id == 1
        assert response.body.data.attributes.status_text == "text_only"

    def test_invalid_status_id(self):
        response = self.vfetch("cves/status", method="PATCH", json={"cve": "CVE-2018-5", "status_id": 70}).check_response(status_code=400)
        assert response.body.errors[0].detail == "status_id=70 is invalid"
