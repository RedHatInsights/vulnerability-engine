"""Unit tests for status_handler"""
# pylint: disable=missing-docstring,too-many-public-methods,invalid-name

from .vuln_testcase import FlaskTestCase


class TestStatusHandler(FlaskTestCase):

    def test_status_list(self):
        status = self.vfetch('status')
        assert len(status.body.data) == 7
        assert status.body.data[0]['id'] == 0
        assert status.body.data[0]['name'] == 'Not Reviewed'

    def test_status_invalid(self):
        self.vfetch('status', data='', method='PATCH').check_response(400)
        self.vfetch('status', data='{"cve":"CVE-2014-1", "status_id":"2"}',
                    method='PATCH').check_response(400)
        self.vfetch('status', data='{"inventory_id": "INV-0", "status_id":"2"}',
                    method='PATCH').check_response(400)
        self.vfetch('status', data='{"inventory_id": "INV-0", "cve":"CVE-2014-1", }',
                    method='PATCH').check_response(400)
        self.vfetch('status', data='{"inventory_id": "INV-0", "cve":"CVE-2014-1", "status_id":"2"',
                    method='PATCH').check_response(400)
        self.vfetch('status', data='{"inventory_id": "INV-0", "cve":"CVE-2014-abcdef, "status_id":"2"}',
                    method='PATCH').check_response(400)
        self.vfetch('status', data='{"inventory_id": "INV-0", "cve":"CVE-2014-1", "status_id":"a"}',
                    method='PATCH').check_response(400)
        self.vfetch('status', data='{"inventory_id": "INV-ID00-0000-1234", "cve":"CVE-2014-1", "status_id":2}',
                    method='PATCH').check_response(404)

    def test_status(self):
        self.vfetch('status', data='{"inventory_id": "INV-5", "cve":"CVE-2014-1", "status_id":2}',
                    method='PATCH').check_response()

    def test_bad_status_id(self):
        self.vfetch('status', data='{"inventory_id": "INV-5", "cve":"CVE-2014-1", "status_id":19}',
                    method='PATCH').check_response(status_code=400)
