# -*- coding: utf-8 -*-
# pylint: disable=missing-docstring,too-many-public-methods,invalid-name,protected-access
"""
ListView pagination tests.
"""
import math

from tornado.testing import AsyncHTTPTestCase

from common.peewee_model import SystemPlatform
from manager.base import InvalidArgumentException
from manager.list_view import ListView
from manager.main import ServerApplication

SORTABLE = {
    'inventory_id': SystemPlatform.inventory_id,
    'vmaas_json': SystemPlatform.vmaas_json,
    'last_evaluation': SystemPlatform.last_evaluation
    }
FILTERABLE = {
        'inventory_id':'INV-ID-0001',
        'cvss_from':'2001-01-01', 'cvss_to':'2020-01-01',
        'show_all':True, 'opt_out':True,
        'status_id':3
    }
QUERY = (SystemPlatform.select(SystemPlatform.inventory_id))
URI = 'http://localhost:6666/api/v1/vulnerability/systems'

TOTAL_ITEMS = 127
LIMIT = 5
LIST_ARGS = {
    'page': 4,
    'page_size': 5,
    'pages': 66,
    'limit': LIMIT,
    'offset': 15,
    'total_items': TOTAL_ITEMS
    }


class NoQueryListView(ListView):
    """Pseudo-view used to test the basic math/param-processing of ListView and links"""
    def __init__(self, query, sortable_columns, filterable_columns, list_args, uri, total):
        self.total_items = total
        super(NoQueryListView, self).__init__(query, sortable_columns, filterable_columns, list_args, uri)

    def _apply_args(self, args):
        # Intercept so we can ignore the query
        self.active_filter = 'foo'
        self.active_sort = 'bar'
        self.page = args["page"]
        self.page_size = args["page_size"]
        self.limit = args["limit"]
        self.offset = args["offset"]
        pages = math.ceil(self.total_items / self.page_size)
        self.pages = pages if pages > 0 else 1

        if self.page > self.pages:
            raise InvalidArgumentException("Requested page out of range: %s" % self.page)

        if self.offset > self.total_items:
            raise InvalidArgumentException("Requested starting offset out of range: %s" % self.offset)

class ListViewLinksTestCase(AsyncHTTPTestCase):

    def get_app(self):
        return ServerApplication()

    @classmethod
    def test_first(cls):
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert view._get_first(0, LIMIT, TOTAL_ITEMS) == 0
        assert view._get_first(2, LIMIT, TOTAL_ITEMS) == 0

    @classmethod
    def test_previous(cls):
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert view._get_previous(0, LIMIT, TOTAL_ITEMS) == 0
        assert view._get_previous(20, LIMIT, TOTAL_ITEMS) == 15
        assert view._get_previous(120, LIMIT, TOTAL_ITEMS) == 115
        assert view._get_previous(15, LIMIT, TOTAL_ITEMS) == 10
        assert view._get_previous(2, LIMIT, TOTAL_ITEMS) == 0

    @classmethod
    def test_next(cls):
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert view._get_next(0, LIMIT, TOTAL_ITEMS) == 5
        assert view._get_next(20, LIMIT, TOTAL_ITEMS) == 25
        assert view._get_next(120, LIMIT, TOTAL_ITEMS) == 125
        assert view._get_next(16, LIMIT, TOTAL_ITEMS) == 20
        assert view._get_next(2, LIMIT, TOTAL_ITEMS) == 5

    @classmethod
    def test_last(cls):
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert view._get_last(5, 5, TOTAL_ITEMS)
        assert view._get_last(0, 3, 1) == 0
        assert view._get_last(0, 3, 3) == 0
        assert view._get_last(0, 3, 5) == 3
        assert view._get_last(0, 3, 6) == 3
        assert view._get_last(0, 3, 7) == 6

    @classmethod
    def test_first_link(cls):
        LIST_ARGS['offset'] = 0
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        print(view._get_first_link())
        assert 'limit=%s' % (LIMIT) in view._get_first_link()
        assert 'offset=0' in view._get_first_link()

        assert view._get_previous(0, LIMIT, TOTAL_ITEMS) == 0
        assert view._get_previous(20, LIMIT, TOTAL_ITEMS) == 15
        assert view._get_previous(120, LIMIT, TOTAL_ITEMS) == 115
        assert view._get_previous(15, LIMIT, TOTAL_ITEMS) == 10
        assert view._get_previous(2, LIMIT, TOTAL_ITEMS) == 0

    @classmethod
    def test_prev_link(cls):
        LIST_ARGS['offset'] = 0
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert 'offset=0' in view._get_previous_link()

        LIST_ARGS['offset'] = 20
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert 'offset=15' in view._get_previous_link()

        LIST_ARGS['offset'] = 120
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert 'offset=115' in view._get_previous_link()

        LIST_ARGS['offset'] = 15
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert 'offset=10' in view._get_previous_link()

        LIST_ARGS['offset'] = 2
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert 'offset=0' in view._get_previous_link()

    @classmethod
    def test_next_link(cls):
        LIST_ARGS['offset'] = 0
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert 'offset=5' in view._get_next_link()

        LIST_ARGS['offset'] = 20
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert 'offset=25' in view._get_next_link()

        LIST_ARGS['offset'] = 120
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert 'offset=125' in view._get_next_link()

        LIST_ARGS['offset'] = 16
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert 'offset=20' in view._get_next_link()

        LIST_ARGS['offset'] = 2
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert 'offset=5' in view._get_next_link()

    @classmethod
    def test_last_link(cls):
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        assert 'offset=125' in view._get_last_link()

        args = LIST_ARGS.copy()
        args['page'] = 0
        args['page_size'] = 3
        args['offset'] = 0
        args['limit'] = 3
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, args, URI, 1)
        assert 'offset=0' in view._get_last_link()

        args['total_items'] = 3
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, args, URI, 3)
        assert 'offset=0' in view._get_last_link()

        args['total_items'] = 5
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, args, URI, 5)
        assert 'offset=3' in view._get_last_link()

        args['total_items'] = 6
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, args, URI, 6)
        assert 'offset=3' in view._get_last_link()

        args['total_items'] = 7
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, args, URI, 7)
        assert 'offset=6' in view._get_last_link()

    @classmethod
    def test_links_stanza(cls):
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        links = view.get_pagination_links()
        assert links['first'] == view._get_first_link()
        assert links['next'] == view._get_next_link()
        assert links['previous'] == view._get_previous_link()
        assert links['last'] == view._get_last_link()

    @classmethod
    def test_links_filters(cls):
        view = NoQueryListView(QUERY, SORTABLE, FILTERABLE, LIST_ARGS, URI, TOTAL_ITEMS)
        last_link = view._get_last_link()
        print("LAST_LINK [%s]" % (last_link))
        assert 'cvss_from=2001-01-01' in last_link
        assert 'cvss_to=2020-01-01' in last_link
        assert 'show_all=True' in last_link
        assert 'opt_out=True' in last_link
        assert 'status_id=3' in last_link
        assert 'inventory_id=INV-ID-0001' in last_link

        args = FILTERABLE.copy()
        print("ARGS : %s" % (args))
        del args['show_all']
        view = NoQueryListView(QUERY, SORTABLE, args, LIST_ARGS, URI, TOTAL_ITEMS)
        last_link = view._get_last_link()
        print("LAST_LINK [%s]" % (last_link))
        assert 'show_all=True' not in last_link
