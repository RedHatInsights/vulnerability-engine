# -*- coding: utf-8 -*-
# pylint: disable=missing-docstring,too-many-public-methods,invalid-name,protected-access,no-self-use
"""
ListView pagination tests.
"""
import math

from common.peewee_model import SystemPlatform
from manager.base import InvalidArgumentException
from manager.list_view import ListView

from .vuln_testcase import FlaskTestCase

SORTABLE = {
    'id': SystemPlatform.id,
    'inventory_id': SystemPlatform.inventory_id,
    'vmaas_json': SystemPlatform.vmaas_json,
    'last_evaluation': SystemPlatform.last_evaluation
}
DEFAULT_SORT = ['id']
FILTERABLE = {}
QUERY = (SystemPlatform.select(SystemPlatform.inventory_id))
URI = 'http://localhost:6666/api/v1/vulnerability/systems'

TOTAL_ITEMS = 127
LIMIT = 5
LIST_ARGS = {
    'page': 4,
    'page_size': 5,
    'pages': 66,
    'opt_out': 'foo',
    'limit': LIMIT,
    'offset': 15,
    'total_items': TOTAL_ITEMS,
    'filter': None,
    'sort': None,
    'data_format': 'json'
}

QUERY_ARGS = {
    'cvss_from': '2001-01-01', 'cvss_to': '2020-01-01',
    'show_all': True, 'opt_out': True,
    'status_id': 3,
    'inventory_id': '11111111-1111-1111-1111-000000000001'
}


class NoQueryListView(ListView):
    """Pseudo-view used to test the basic math/param-processing of ListView and links"""

    def __init__(self, query, sortable_columns, default_sort_columns, filterable_columns,
                 list_args, query_args, uri, total):
        self.total_items = total
        super(NoQueryListView, self).__init__(query, sortable_columns, default_sort_columns, filterable_columns,
                                              list_args, query_args, uri)

    def _get_total_items(self, total_items=None):
        # Intercept so we can ignore the query
        pages = math.ceil(self.total_items / self.list_args["page"])
        self.pages = pages if pages > 0 else 1

        # Check for out-of-range for whichever was received
        if (self.list_args["offset"] and self.list_args["offset"] > self.total_items) or \
                (self.list_args["page"] and self.list_args["page"] > self.pages):
            raise InvalidArgumentException("Requested start-point out of range: page %s/offset %s" %
                                           (self.list_args["page"], self.list_args["offset"]))


class TestLinks(FlaskTestCase):

    def test_previous(self):
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LIST_ARGS, QUERY_ARGS, URI, TOTAL_ITEMS)
        assert view._get_previous(0, LIMIT) == 0
        assert view._get_previous(20, LIMIT) == 15
        assert view._get_previous(120, LIMIT) == 115
        assert view._get_previous(15, LIMIT) == 10
        assert view._get_previous(2, LIMIT) == 0

    def test_next(self):
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LIST_ARGS, QUERY_ARGS, URI, TOTAL_ITEMS)
        assert view._get_next(0, LIMIT, TOTAL_ITEMS) == 5
        assert view._get_next(20, LIMIT, TOTAL_ITEMS) == 25
        assert view._get_next(120, LIMIT, TOTAL_ITEMS) == 125
        assert view._get_next(16, LIMIT, TOTAL_ITEMS) == 20
        assert view._get_next(2, LIMIT, TOTAL_ITEMS) == 5

    def test_last(self):
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LIST_ARGS, QUERY_ARGS, URI, TOTAL_ITEMS)
        assert view._get_last(5, TOTAL_ITEMS) == 125
        assert view._get_last(3, 1) == 0
        assert view._get_last(3, 3) == 0
        assert view._get_last(3, 5) == 3
        assert view._get_last(3, 6) == 3
        assert view._get_last(3, 7) == 6

    def test_first_link(self):
        LOCAL_LIST_ARGS = LIST_ARGS.copy()
        LOCAL_LIST_ARGS['offset'] = 0
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LOCAL_LIST_ARGS, QUERY_ARGS, URI,
                               TOTAL_ITEMS)
        assert 'limit=%s' % (LIMIT) in view._get_first_link()
        assert 'offset=0' in view._get_first_link()

        assert view._get_previous(0, LIMIT) == 0
        assert view._get_previous(20, LIMIT) == 15
        assert view._get_previous(120, LIMIT) == 115
        assert view._get_previous(15, LIMIT) == 10
        assert view._get_previous(2, LIMIT) == 0

    def test_prev_link(self):
        LOCAL_LIST_ARGS = LIST_ARGS.copy()
        LOCAL_LIST_ARGS['offset'] = 0
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LOCAL_LIST_ARGS, QUERY_ARGS, URI,
                               TOTAL_ITEMS)
        assert view._get_previous_link() is None

        LOCAL_LIST_ARGS['offset'] = 20
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LOCAL_LIST_ARGS, QUERY_ARGS, URI,
                               TOTAL_ITEMS)
        assert 'offset=15' in view._get_previous_link()

        LOCAL_LIST_ARGS['offset'] = 120
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LOCAL_LIST_ARGS, QUERY_ARGS, URI,
                               TOTAL_ITEMS)
        assert 'offset=115' in view._get_previous_link()

        LOCAL_LIST_ARGS['offset'] = 15
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LOCAL_LIST_ARGS, QUERY_ARGS, URI,
                               TOTAL_ITEMS)
        assert 'offset=10' in view._get_previous_link()

        LOCAL_LIST_ARGS['offset'] = 2
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LOCAL_LIST_ARGS, QUERY_ARGS, URI,
                               TOTAL_ITEMS)
        assert 'offset=0' in view._get_previous_link()

    def test_next_link(self):
        LOCAL_LIST_ARGS = LIST_ARGS.copy()
        LOCAL_LIST_ARGS['offset'] = 0
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LOCAL_LIST_ARGS, QUERY_ARGS, URI,
                               TOTAL_ITEMS)
        assert 'offset=5' in view._get_next_link()

        LOCAL_LIST_ARGS['offset'] = 20
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LOCAL_LIST_ARGS, QUERY_ARGS, URI,
                               TOTAL_ITEMS)
        assert 'offset=25' in view._get_next_link()

        LOCAL_LIST_ARGS['offset'] = 120
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LOCAL_LIST_ARGS, QUERY_ARGS, URI,
                               TOTAL_ITEMS)
        assert 'offset=125' in view._get_next_link()

        LOCAL_LIST_ARGS['offset'] = 16
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LOCAL_LIST_ARGS, QUERY_ARGS, URI,
                               TOTAL_ITEMS)
        assert 'offset=20' in view._get_next_link()

        LOCAL_LIST_ARGS['offset'] = 2
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LOCAL_LIST_ARGS, QUERY_ARGS, URI,
                               TOTAL_ITEMS)
        assert 'offset=5' in view._get_next_link()

    def test_last_link(self):
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LIST_ARGS, QUERY_ARGS, URI, TOTAL_ITEMS)
        assert 'offset=125' in view._get_last_link()

        args = LIST_ARGS.copy()
        args['page'] = 1
        args['page_size'] = 3
        args['offset'] = 0
        args['limit'] = 3
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, args, QUERY_ARGS, URI, 1)
        assert 'offset=0' in view._get_last_link()

        args['total_items'] = 3
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, args, QUERY_ARGS, URI, 3)
        assert 'offset=0' in view._get_last_link()

        args['total_items'] = 5
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, args, QUERY_ARGS, URI, 5)
        assert 'offset=3' in view._get_last_link()

        args['total_items'] = 6
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, args, QUERY_ARGS, URI, 6)
        assert 'offset=3' in view._get_last_link()

        args['total_items'] = 7
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, args, QUERY_ARGS, URI, 7)
        assert 'offset=6' in view._get_last_link()

    def test_links_stanza(self):
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LIST_ARGS, QUERY_ARGS, URI, TOTAL_ITEMS)
        links = view.get_pagination_links()
        assert links['first'] == view._get_first_link()
        assert links['next'] == view._get_next_link()
        assert links['previous'] == view._get_previous_link()
        assert links['last'] == view._get_last_link()

    def test_links_filters(self):
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, FILTERABLE, LIST_ARGS, QUERY_ARGS, URI, TOTAL_ITEMS)
        last_link = view._get_last_link()
        assert 'cvss_from=2001-01-01' in last_link
        assert 'cvss_to=2020-01-01' in last_link
        assert 'show_all=True' in last_link
        assert 'opt_out=True' in last_link
        assert 'status_id=3' in last_link
        assert 'inventory_id=11111111-1111-1111-1111-000000000001' in last_link

        args = QUERY_ARGS.copy()
        del args['show_all']
        view = NoQueryListView(QUERY, SORTABLE, DEFAULT_SORT, args, LIST_ARGS, args, URI, TOTAL_ITEMS)
        last_link = view._get_last_link()
        assert 'show_all=True' not in last_link
