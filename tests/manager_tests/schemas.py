# -*- coding: utf-8 -*-
# pylint: disable=invalid-name
"""
Schemas of responses.
"""
from schema import Optional, Or, Schema

_meta = {
    "page": int,
    "page_size": int,
    "total_items": int,
    "pages": int,
    "sort": Or(None, str),
    "filter": Or(None, str),
    "offset": int,
    "limit": int,
    "data_format": str
}

_links = {
    "first": str,
    "next": Or(None, str),
    "previous": Or(None, str),
    "last": str
}

_tags = {
    "namespace": str,
    "key": str,
    "value": Or(None, str)
}

_affected_system = {
    "type": "system",
    "id": str,
    "attributes": {
        "inventory_id": str,
        "display_name": Or(None, str),
        "cve_status_id": int,
        "reporter": int,
        "rule": Or(None, {
            "details": dict,
            "resolution": {
                "resolution": Or(None, str),
            },
            "rule": {
                "description": Or(None, str),
                "more_info": Or(None, str),
                "node_id": Or(None, int),
                "reason": Or(None, str),
                "rule_id": str
            }
        }),
        "status_id": int,
        "status_name": str,
        "status_text": Or(None, str),
        "last_evaluation": Or(str, None),
        "rules_evaluation": Or(str, None),
        "tags": Or([_tags], [])
    }
}

_system = {
    "type": "system",
    "id": str,
    "attributes": {"inventory_id": str, "rules_evaluation": Or(str, None),
                   "cve_count": Or(None, int), "display_name": Or(None, str), "last_evaluation": Or(str, None), "opt_out": bool,
                   "last_upload": Or(None, str), "stale_timestamp": Or(None, str), "stale_warning_timestamp": Or(None, str),
                   "tags": Or([_tags], [])},
}

_insights_rule = {
    'rule_id': str,
    'description': Or(str, None),
    'summary': Or(str, None),
    'generic': Or(str, None),
    'reboot_required': Or(bool, None),
    'playbook_count': Or(int, None),
    'change_risk': Or(int, None),
    'kbase_node_id': Or(int, None),
    'associated_cves': Or([str], []),
}

_insights_system_rule = {
    'rule_id': str,
    'description': Or(str, None),
    'summary': Or(str, None),
    'generic': Or(str, None),
    'reboot_required': Or(bool, None),
    'playbook_count': Or(int, None),
    'change_risk': Or(int, None),
    'kbase_node_id': Or(int, None),
}

_vulnerabilities_cve = {
    "type": "cve",
    "id": str,
    "attributes": {
        "business_risk": str,
        "business_risk_id": int,
        "business_risk_text": Or(None, str),
        "status": str,
        "status_id": int,
        "status_text": Or(None, str),
        "systems_affected": int,
        "synopsis": str,
        "public_date": Or(None, str),
        "impact": str,
        "description": str,
        "cvss2_score": Or(None, str),
        "cvss3_score": Or(None, str),
        "systems_status_divergent": int,
        "rules": Or([_insights_rule], []),
    },
}

_system_cve = {
    "type": "cve",
    "id": str,
    "attributes": {
        "business_risk": str,
        "business_risk_id": int,
        "business_risk_text": Or(None, str),
        "synopsis": str,
        "public_date": Or(None, str),
        "impact": str,
        "description": str,
        "cvss2_score": Or(None, str),
        "cvss3_score": Or(None, str),
        "cve_status_id": int,
        "reporter": int,
        "rule": Or(None, _insights_system_rule),
        "status": str,
        "status_id": int,
        "status_text": Or(None, str),
        "cve_status_text": Or(None, str)
    },
}

_vulnerabilities_meta = {
    "show_all": Or(None, bool),
    "cvss_from": Or(None, float),
    "cvss_to": Or(None, float),
    "public_from": Or(None, str),
    "public_to": Or(None, str),
    "impact": Or(None, str),
    "business_risk_id": Or(None, str),
    "status_id": Or(None, str),
    "system_count": Or(None, int),
    "rule_presence": Or(None, str),
    "security_rule": Or(None, bool)
}
_vulnerabilities_meta.update(_meta)

_vmaas_cves_data = {
    "impact": str,
    "public_date": Or(None, str),
    "synopsis": str,
    "description": str,
    "modified_date": Or(None, str),
    Optional("redhat_url"): Or(None, str),
    Optional("cvss2_score"): Or(None, str),
    "cvss3_score": Or(None, str),
    Optional("secondary_url"): Or(None, str),
    Optional("cvss2_metrics"): Or(None, str),
    "cvss3_metrics": Or(None, str),
    "business_risk": str,
    "business_risk_id": int,
    "business_risk_text": Or(None, str),
    "status": str,
    "status_id": int,
    "status_text": Or(None, str),
    "systems_status_detail": dict,
    "systems_status_divergent": int,
    "rules": Or([_insights_rule], []),
    "advisories_list": Or([str], [])
}

_system_meta = {
    "opt_out": Or(None, bool),
    "stale": Or(None, bool),
    "uuid": Or(None, str),
    "tags": Or(None, str),
    "sap_system": Or(None, bool)
}
_system_meta.update(_meta)

_system_cves_meta = {
    "cvss_from": Or(None, float),
    "cvss_to": Or(None, float),
    "public_from": Or(None, str),
    "public_to": Or(None, str),
    "impact": Or(None, str),
    "status_id": Or(None, str),
    "opt_out": bool,
    "business_risk_id": Or(None, str),
    "security_rule": Or(None, bool),
    "rule_presence": Or(None, str)
}
_system_cves_meta.update(_meta)

_system_details = {
    'data': {
        'last_evaluation': Or(str, None),
        'rules_evaluation': Or(str, None),
        'opt_out': bool,
        'stale': bool,
        'last_upload': Or(None, str),
        'tags': Or([_tags], [])
    }
}

_affected_systems_meta = {
    "status_id": Or(None, str),
    "security_rule": Or(None, str, bool),
    "uuid": Or(None, str),
    "rule_presence": Or(None, str),
    "rule_key": Or(None, str),
    "tags": Or(None, str),
    "sap_system": Or(None, bool)
}
_affected_systems_meta.update(_meta)

_cve = {"data": {"attributes": _vmaas_cves_data, "id": str, "type": "cve"}}


_vulnerabilities_cves = {"meta": _vulnerabilities_meta, "links": _links, "data": Or([_vulnerabilities_cve], [], str)}
_vulnerabilities_cves_ids = {"meta": _vulnerabilities_meta, "links": _links, "data": Or([str], [], str)}
_system_cves = {"meta": _system_cves_meta, "links": _links, "data": Or([_system_cve], [], str)}
_system_cves_ids = {"meta": _system_cves_meta, "links": _links, "data": Or([str], [], str)}
_systems = {"meta": _system_meta, "links": _links, "data": Or([_system], [], str)}
_systems_ids = {"meta": _system_meta, "links": _links, "data": Or([str], [], str)}
_affected_systems = {"meta": _affected_systems_meta, "links": _links, "data": Or([_affected_system], [], str)}
_affected_systems_ids = {"meta": _affected_systems_meta, "links": _links, "data": Or([str], [], str)}

_bulk_change = {
    'updated': list
}

_top_cve = {
    'cvss2_score': Or(None, str),
    'cvss3_score': Or(None, str),
    'description': str,
    'synopsis': str,
    'systems_affected': int
}

_severity_data = {
    'count': int,
    'percentage': float
}

_executive_report = {
    'cves_by_severity': {
        '0to3.9': _severity_data,
        '4to7.9': _severity_data,
        '8to10': _severity_data
    },
    'cves_total': int,
    'recent_cves': {
        'last7days': int,
        'last30days': int,
        'last90days': int
    },
    'system_count': int,
    'top_cves': Or([], [_top_cve])
}

cve = Schema(_cve)
vulnerabilities_cves = Schema(_vulnerabilities_cves)
vulnerabilities_cves_ids = Schema(_vulnerabilities_cves_ids)
systems = Schema(_systems)
systems_ids = Schema(_systems_ids)
affected_systems = Schema(_affected_systems)
affected_systems_ids = Schema(_affected_systems_ids)
system_cves = Schema(_system_cves)
system_cves_ids = Schema(_system_cves_ids)
system_details = Schema(_system_details)
opt_out = Schema(_bulk_change)
business_risk = Schema(_bulk_change)
status = Schema(_bulk_change)


SCHEMA_MAP = {
    ("GET", "/v1/cves/.+/affected_systems/ids"): affected_systems_ids,
    ("GET", "/v1/cves/.+/affected_systems"): affected_systems,
    ("GET", "/v1/cves/CVE-"): cve,
    ("GET", "/v1/vulnerabilities/cves/ids"): vulnerabilities_cves_ids,
    ("GET", "/v1/vulnerabilities/cves"): vulnerabilities_cves,
    ("GET", "/v1/systems/.+/cves/ids"): system_cves_ids,
    ("GET", "/v1/systems/.+/cves"): system_cves,
    ("GET", "/v1/systems/ids"): systems_ids,
    ("GET", "/v1/systems/.+"): system_details,
    ("GET", "/v1/systems"): systems,
    ("PATCH", '/v1/systems/opt_out'): opt_out,
    ('PATCH', '/v1/cves/business_risk'): business_risk,
    ('PATCH', '/v1/cves/status'): status,
}
