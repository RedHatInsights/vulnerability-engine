# -*- coding: utf-8 -*-
# pylint: disable=no-self-use
"""
Unit tests for advisor listener
"""

import asyncio
from copy import deepcopy
import pytest

from advisor_listener.advisor_listener import ADVISOR_QUEUE, CVES_CACHE, db_init_caches, db_import_cve, db_import_rule, \
    db_import_system, db_import_system_platform, RULES_CACHE, terminate
from common.database_handler import DatabasePool, DatabasePoolConnection

SYSTEM_DICT = {
    'rh_account': '0',
    'display_name': 'xxee',
    'inventory_id': None,
    'stale_timestamp': '2100-01-01',
    'stale_warning_timestamp': '2100-01-01',
    'culled_timestamp': '2100-01-01',
}


class TestAdvisorListener:
    """Tests for advisor listener"""

    @pytest.mark.asyncio
    async def test_terminate(self):
        """Test terminate"""
        loop = asyncio.new_event_loop()
        await terminate(0, loop)
        assert not loop.is_running()
        assert not ADVISOR_QUEUE.connected

    def test_init_caches(self, pg_db_conn):  # pylint: disable=unused-argument
        """Test init caches, THIS HAS TO BE FIRST TEST IN CASE YOU DO NOT WANT CALL db_init_caches EXPLICTLY IN YOUR TESTS"""
        with DatabasePool(1):
            db_init_caches()
        assert len(CVES_CACHE) == 17
        assert len(RULES_CACHE) == 7

    def test_import_cve(self, pg_db_conn):  # pylint: disable=unused-argument
        """Tests insertion of single CVE into database"""
        with DatabasePool(1):
            db_import_cve('CVE-2019-1')
        assert 'CVE-2019-1' in CVES_CACHE

    def test_import_rule(self, pg_db_conn):  # pylint: disable=unused-argument
        """Test inserting new rule into database"""
        with DatabasePool(1):
            db_import_rule('test_rule|ERROR_KEY', ['CVE-2018-1', 'CVE-2018-2'])
            assert 'test_rule|ERROR_KEY' in RULES_CACHE
        with DatabasePool(2):
            db_import_rule('test_rule|CVES_NOT_IN_DB', ['CVE-2020-1', 'CVE-2020-2'])
            assert 'test_rule|CVES_NOT_IN_DB' in RULES_CACHE

    def test_import_system_platform(self, pg_db_conn):  # pylint: disable=unused-argument
        """Test insertion of system data"""
        with DatabasePool(1):
            with DatabasePoolConnection() as conn:
                with conn.cursor() as cur:
                    system = deepcopy(SYSTEM_DICT)
                    system['inventory_id'] = 'INV-111'
                    db_import_system_platform(cur, system)  # import new system
                    db_import_system_platform(cur, system)  # update recently imported system

    def test_simple_import(self, pg_db_conn):  # pylint: disable=unused-argument
        """Test importing new system with one rule"""
        with DatabasePool(1):
            system = deepcopy(SYSTEM_DICT)
            system['inventory_id'] = 'INV-112'
            rule_hits = {}
            rule_hits[CVES_CACHE['CVE-2014-1']] = {
                'id': RULES_CACHE['CVE_2018_3639_cpu_kernel|CVE_2018_3639_CPU_BAD_MICROCODE_2'],
                'details': '{"detail_key": "detail_value"}'
            }
            db_import_system(system, rule_hits)
            # add a additional CVE to rule
            rule_hits[CVES_CACHE['CVE-2016-1']] = {
                'id': RULES_CACHE['CVE_2018_3639_cpu_kernel|CVE_2018_3639_CPU_BAD_MICROCODE_2'],
                'details': '{"detail_key": "detail_value"}'
            }
            db_import_system(system, rule_hits)
