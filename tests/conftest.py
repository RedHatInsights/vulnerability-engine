# -*- coding: utf-8 -*-
# pylint:disable=missing-docstring,redefined-outer-name
import os
import subprocess
import time

import pytest

from .utils import check_open_port, get_free_port, get_pg_class, restore_db, set_env, TESTS_DIR

VMAAS_MOCK = TESTS_DIR.joinpath("scripts", "vmaas_mock.py")
VMAAS_HOST = "localhost"
VMAAS_PORT = get_free_port()

DOWNLOAD_SERVER_MOCK = TESTS_DIR.joinpath("scripts", "download_server_mock.py")
DOWNLOAD_SERVER_HOST = "localhost"
DOWNLOAD_SERVER_PORT = get_free_port()

os.environ["VMAAS_HOST"] = f"http://{VMAAS_HOST}:{VMAAS_PORT}"
os.environ["DOWNLOAD_SERVER_HOST"] = f"http://{DOWNLOAD_SERVER_HOST}:{DOWNLOAD_SERVER_PORT}"


@pytest.fixture(scope="session")
def pg_class():
    """Setup PostgreSQL class."""
    postgres_class = get_pg_class()
    yield postgres_class
    postgres_class.clear_cache()


@pytest.fixture(scope="session")
def pg_db_session(pg_class):
    """Setup PostgreSQL in session scope."""
    postgresql = pg_class()
    set_env(postgresql)
    yield postgresql
    postgresql.stop()


@pytest.fixture(scope="module")
def pg_db_mod(pg_db_session):
    """Restores PostgreSQL in module scope."""
    yield pg_db_session
    restore_db(pg_db_session)


@pytest.fixture(scope="function")
def pg_db_func(pg_db_session):
    """Restores PostgreSQL in function scope."""
    yield pg_db_session
    restore_db(pg_db_session)


@pytest.fixture(scope="session", autouse=True)
def run_vmaas_mock():
    """Runs mocked VMaaS."""
    vmaas_mock = subprocess.Popen([str(VMAAS_MOCK), str(VMAAS_PORT)])
    for __ in range(10):
        if check_open_port(VMAAS_HOST, VMAAS_PORT):
            break
        time.sleep(0.1)

    yield vmaas_mock

    # teardown - stop vmaas_mock
    vmaas_mock.terminate()


@pytest.fixture(scope="session", autouse=True)
def run_download_server_mock():
    """Runs mocked download server."""
    download_server_mock = subprocess.Popen([str(DOWNLOAD_SERVER_MOCK), str(DOWNLOAD_SERVER_PORT)])
    for __ in range(10):
        if check_open_port(DOWNLOAD_SERVER_HOST, DOWNLOAD_SERVER_PORT):
            break
        time.sleep(0.1)

    yield download_server_mock

    # teardown - stop download_server_mock
    download_server_mock.terminate()
