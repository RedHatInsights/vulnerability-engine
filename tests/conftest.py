# -*- coding: utf-8 -*-
# pylint:disable=missing-docstring
import os
import subprocess
import tempfile

import psycopg2
import pytest
from peewee import SqliteDatabase
import testing.postgresql

from common import database_handler
from common import peewee_database

peewee_database.DB = SqliteDatabase(None)

_CURDIR = os.path.dirname(os.path.abspath(__file__))

SQLDATA = os.path.join(_CURDIR, "data", "ve_db_dev_data.sql")
VMAAS_MOCK = os.path.join(_CURDIR, "scripts", "vmaas_mock.py")

os.environ["POSTGRESQL_DATABASE"] = "unit_tests"
os.environ["POSTGRESQL_HOST"] = "127.0.0.1"
os.environ["VMAAS_HOST"] = "http://localhost:8080"


def init_db(db_file):
    """Initializes SQLite db for peewee."""
    from common import peewee_model

    model_names = (
        "SystemPlatform",
        "CveImpact",
        "Status",
        "CveMetadata",
        "SystemVulnerabilities",
    )
    models = [getattr(peewee_model, mname) for mname in model_names]

    database = peewee_database.DB
    open(db_file, "a").close()
    database.init(db_file)

    database.connect()
    database.create_tables(models)

    with open(SQLDATA) as data:
        sql = data.read()
    database.cursor().executescript(sql)

    database.close()

    return database


# pylint: disable=invalid-name
@pytest.fixture(scope="session", autouse=True)
def db():
    with tempfile.TemporaryDirectory() as tmpdirname:
        yield init_db("{}/vulnerability.db".format(tmpdirname))


@pytest.fixture(scope="session", autouse=True)
def run_vmaas_mock():
    """Run mocked VMaaS."""
    vmaas_mock = subprocess.Popen(VMAAS_MOCK)
    yield vmaas_mock
    # teardown - stop vmaas_mock
    vmaas_mock.terminate()


@pytest.fixture(scope="session")
def pg_db_conn():
    """Fixture for postgre db connection."""

    def _handler(postgresql):
        """Init DB with data."""
        conn = psycopg2.connect(**postgresql.dsn())
        cursor = conn.cursor()
        with open("database/ve_db_user_create_postgresql.sql", "r") as ve_db_user:
            cursor.execute(ve_db_user.read())
        with open("database/ve_db_postgresql.sql", "r") as ve_db:
            cursor.execute(ve_db.read())
        with open("database/ve_db_dev_data.sql", "r") as ve_db_dev_data:
            cursor.execute(ve_db_dev_data.read())
        cursor.close()
        conn.commit()
        conn.close()

    # Create temporary posgresql server
    # pylint: disable=invalid-name
    Postgresql = testing.postgresql.PostgresqlFactory(cache_initialized_db=True, on_initialized=_handler)
    postgresql = Postgresql()

    os.environ["POSTGRESQL_PORT"] = str(postgresql.dsn()["port"])
    database_handler.init_db()
    conn = psycopg2.connect(**postgresql.dsn())
    yield conn

    # teardown - close connection, stop postgresql
    conn.close()
    postgresql.stop()
