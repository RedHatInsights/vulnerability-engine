# -*- coding: utf-8 -*-
# pylint:disable=missing-docstring,no-member
import os
import socket
from contextlib import closing, contextmanager
from pathlib import Path

import psycopg2
import testing.postgresql

from common import database_handler

_CURFILE = Path(__file__).resolve()
TESTS_DIR = _CURFILE.parent
VULN_ENG_DIR = TESTS_DIR.parent

VE_USER = VULN_ENG_DIR.joinpath("database", "schema", "ve_db_user_create_postgresql.sql")
VE_PG = VULN_ENG_DIR.joinpath("database", "schema", "ve_db_postgresql.sql")
VE_DATA = VULN_ENG_DIR.joinpath("database", "schema", "ve_db_dev_data.sql")
TRUNCATE = TESTS_DIR.joinpath("data", "truncate_dev_data.sql")


def get_free_port():
    """Returns random free unprivileged port."""
    with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as sock:
        sock.bind(("", 0))
        __, port = sock.getsockname()
        return port
    return None


def check_open_port(host, port):
    """Checks that the port is open."""
    with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as sock:
        if sock.connect_ex((host, port)) == 0:
            return True
    return False


@contextmanager
def connect_pg(postgresql, **kwargs):
    """PostgreSQL cursor context manager."""
    conn = psycopg2.connect(**postgresql.dsn(**kwargs))
    cursor = conn.cursor()
    yield cursor
    cursor.close()
    conn.commit()
    conn.close()


def get_pg_class():
    """Setup PostgreSQL class."""

    def _handler(postgresql):
        """Initializes PostgreSQL with data."""
        with connect_pg(postgresql) as cursor:
            pg_env = postgresql.dsn()
            cursor.execute("CREATE USER ve_db_admin WITH CREATEROLE")
            cursor.execute("ALTER USER ve_db_admin WITH PASSWORD 've_db_admin_pwd'")
            cursor.execute(f"ALTER DATABASE {pg_env['database']} OWNER TO ve_db_admin")
        with connect_pg(postgresql, user="ve_db_admin") as cursor:
            cursor.execute(VE_USER.read_text())
            cursor.execute(VE_PG.read_text())
            cursor.execute(VE_DATA.read_text())

    # create temporary posgresql server
    # pylint: disable=invalid-name
    Postgresql = testing.postgresql.PostgresqlFactory(cache_initialized_db=True, on_initialized=_handler)

    return Postgresql


def set_env(postgresql):
    """Sets PostgreSQL related environment."""
    pg_env = postgresql.dsn()
    os.environ["POSTGRESQL_DATABASE"] = pg_env["database"]
    os.environ["POSTGRESQL_HOST"] = pg_env["host"]
    os.environ["POSTGRESQL_PORT"] = str(pg_env["port"])
    database_handler.init_db()
    database_handler.pg_testing = postgresql
    return pg_env


def restore_db(postgresql):
    """Restores data in PostgreSQL."""
    with connect_pg(postgresql) as cursor:
        cursor.execute(TRUNCATE.read_text())
        cursor.execute(VE_DATA.read_text())
