# -*- coding: utf-8 -*-
# pylint: disable=no-self-use
"""
Unit tests for vmaas_sync module
"""
import asyncio
import logging
import os
import pytest
from tornado.web import Application
import tornado.websocket
from common.database_handler import DatabasePool

from vmaas_sync.vmaas_sync import sync_cve_md, ServerApplication, LOGGER
from ..scripts.vmaas_mock import CVES_RESPONSE

class VmaasServerApplication(ServerApplication):
    """Subclass to override __init__ and ignore aiokafka setup"""
    def __init__(self): # pylint: disable=super-init-not-called
        handlers = None
        Application.__init__(self, handlers) # pylint: disable=non-parent-init-called
        self.instance = None
        self.vmaas_websocket_url = "ws://%s/" % os.getenv("VMAAS_WEBSOCKET_HOST", "vmaas_websocket:8082")
        self.vmaas_websocket = None
        self.reconnect_callback = None
        self.evaluator_queue = None
        self.webhook_queue = None

class TestMqueueWriter:
    """Pretends to know how to send kafka msgs"""
    @staticmethod
    async def _do_nothing():
        pass

    def send(self, msg):
        """send from cve sync"""
        LOGGER.info(msg)
        return asyncio.ensure_future(self._do_nothing())

    def send_list(self, msg_list):
        """send from re_evaluate_systems"""
        for msg in msg_list:
            LOGGER.info(msg['system_id'])
        return asyncio.ensure_future(self._do_nothing())

class TestVmaasSync:
    """Tests for vmaas_sync and friends"""

    def check_sync_logs(self, records, start_offset):
        """Check to see we got the expected msgs from sync_cve_md"""
        assert records[start_offset].msg == 'Syncing CVE metadata'
        assert records[start_offset+1].msg.startswith('Downloading CVE metadata')
        assert records[start_offset+2].msg.startswith('Importing CVE metadata')
        assert records[start_offset+3].msg.startswith('Finished importing CVE metadata')
        assert records[start_offset+4].msg['event_type'] == 'new-cve'
        assert records[start_offset+4].msg['level'] == '3to7'
        assert records[start_offset+5].msg == 'Finished syncing CVE metadata'

    def check_re_evaluate_logs(self, records, start_offset):
        """Check to see we got the expected msgs from re_evaluate_vmaas"""
        assert records[start_offset].msg == 'Re-evaluating all systems'
        assert records[start_offset+1].msg == 'INV-ID00-0000-0000'
        assert records[start_offset+2].msg == 'INV-ID00-0000-1111'
        assert records[start_offset+3].msg == 'INV-ID00-0000-2222'
        assert records[start_offset+4].msg == 'INV-ID00-0000-3333'
        assert records[start_offset+5].msg == 'INV-ID00-0000-4444'
        assert records[start_offset+6].msg == 'INV-ID00-0000-5555'
        assert records[start_offset+7].msg == 'INV-ID00-0000-6666'
        assert records[start_offset+8].msg == 'INV-ID00-0000-7777'

    def test_sync_cve_md_positive(self, pg_db_conn, monkeypatch, caplog, cleanup):  # pylint: disable=unused-argument
        """Test calling sync_cve_md with vmaas responding with data"""
        monkeypatch.setattr('vmaas_sync.vmaas_sync.vmaas_post_request',
                            lambda endpoint, cve_request, session: CVES_RESPONSE)

        with caplog.at_level(logging.INFO):
            with DatabasePool(1):
                result = sync_cve_md(TestMqueueWriter())
            assert result
        self.check_sync_logs(caplog.records, 0)
        caplog.clear()

    def test_sync_cve_md_negative(self, pg_db_conn, monkeypatch, caplog, cleanup):  # pylint: disable=unused-argument
        """Test calling sync_cve_md with vmaas responding with nothing"""
        monkeypatch.setattr('vmaas_sync.vmaas_sync.vmaas_post_request', lambda endpoint, cve_request, session: None)

        with caplog.at_level(logging.INFO):
            with DatabasePool(1):
                result = sync_cve_md(TestMqueueWriter())
            assert not result
        assert caplog.records[0].msg == 'Syncing CVE metadata'
        assert caplog.records[1].msg.startswith('Downloading CVE metadata')
        assert caplog.records[2].msg == 'Finished syncing CVE metadata'
        caplog.clear()

    @pytest.mark.asyncio
    async def test_re_evaluate_systems(self, pg_db_conn, monkeypatch, caplog): # pylint: disable=unused-argument
        """Test re_evaluate_systems()"""
        monkeypatch.setattr(ServerApplication, '_websocket_reconnect', lambda self: True)
        monkeypatch.setattr(tornado.websocket, 'websocket_connect', lambda: True)
        srvapp = VmaasServerApplication()
        srvapp.evaluator_queue = TestMqueueWriter() #mqueue.MQWriter(mqueue.EVALUATOR_TOPIC)

        with caplog.at_level(logging.INFO):
            with DatabasePool(1):
                await srvapp.re_evaluate_systems()
        self.check_re_evaluate_logs(caplog.records, 0)
        caplog.clear()

    @pytest.mark.asyncio
    async def test_read_websocket(self, pg_db_conn, monkeypatch, caplog): # pylint: disable=unused-argument
        """Test getting msg from mqueue - requires combined sync_cve/re-evaluate setup"""
        # prep for sync_cve_md
        monkeypatch.setattr('vmaas_sync.vmaas_sync.vmaas_post_request',
                            lambda endpoint, cve_request, session: CVES_RESPONSE)
        # prep for re_evaluate_systems
        monkeypatch.setattr(ServerApplication, '_websocket_reconnect', lambda self: True)
        monkeypatch.setattr(tornado.websocket, 'websocket_connect', lambda: True)
        srvapp = VmaasServerApplication()
        srvapp.evaluator_queue = TestMqueueWriter() #mqueue.MQWriter(mqueue.EVALUATOR_TOPIC)
        srvapp.webhook_queue = TestMqueueWriter()

        with caplog.at_level(logging.INFO):
            with DatabasePool(1):
                await srvapp._read_websocket_message('webapps-refreshed') # pylint: disable=protected-access

        assert caplog.records[0].msg == 'VMaaS cache refreshed'
        self.check_sync_logs(caplog.records, 1)
        self.check_re_evaluate_logs(caplog.records, 7)
        caplog.clear()

    def test_bogus_message(self, caplog):
        """Test getting EMPTY and UNRECOGNIZED msg from mqueue"""
        class EmptyWebsocket:
            """Lets us warn about websocket close-failure"""
            def __init__(self):
                self.close_reason = 'TEST'
                self.close_code = 666
        srvapp = VmaasServerApplication()
        srvapp.vmaas_websocket = EmptyWebsocket()

        with caplog.at_level(logging.INFO):
            srvapp._read_websocket_message(None) # pylint: disable=protected-access
        assert caplog.records[0].levelname == 'WARNING'
        assert caplog.record_tuples[0][2] == 'Connection to ws://vmaas_websocket:8082/ closed: TEST (666)'
        caplog.clear()

        with caplog.at_level(logging.INFO):
            srvapp._read_websocket_message('whatthehell?!?') # pylint: disable=protected-access
        assert not caplog.records
        caplog.clear()
