# -*- coding: utf-8 -*-
# pylint: disable=no-self-use
"""
Unit tests for vmaas_sync module
"""
import logging
import tornado.websocket
from common import mqueue
from common.database_handler import DatabaseHandler

from vmaas_sync.vmaas_sync import sync_cve_md, ServerApplication, LOGGER
from ..scripts.vmaas_mock import CVES_RESPONSE

class TestVmaasSync:
    """Tests for vmaas_sync and friends"""

    def check_sync_logs(self, records, start_offset):
        """Check to see we got the expected msgs from sync_cve_md"""
        assert records[start_offset].msg == 'Syncing CVE metadata'
        assert records[start_offset+1].msg.startswith('Downloading CVE metadata')
        assert records[start_offset+2].msg.startswith('Importing CVE metadata')
        assert records[start_offset+3].msg.startswith('Finished importing CVE metadata')
        assert records[start_offset+4].msg == 'Finished syncing CVE metadata'

    def check_re_evaluate_logs(self, records, start_offset):
        """Check to see we got the expected msgs from re_evaluate_vmaas"""
        assert records[start_offset].msg == 'Re-evaluating all systems'
        assert records[start_offset+1].msg == 'INV-ID00-0000-0000'
        assert records[start_offset+2].msg == 'INV-ID00-0000-1111'
        assert records[start_offset+3].msg == 'INV-ID00-0000-2222'
        assert records[start_offset+4].msg == 'INV-ID00-0000-3333'
        assert records[start_offset+5].msg == 'INV-ID00-0000-4444'
        assert records[start_offset+6].msg == 'INV-ID00-0000-5555'
        assert records[start_offset+7].msg == 'INV-ID00-0000-6666'
        assert records[start_offset+8].msg == 'INV-ID00-0000-7777'

    def test_sync_cve_md_positive(self, pg_db_conn, monkeypatch, caplog):
        """Test calling sync_cve_md with vmaas responding with data"""
        monkeypatch.setattr(DatabaseHandler, 'get_connection', lambda: pg_db_conn)
        monkeypatch.setattr('vmaas_sync.vmaas_sync.vmaas_post_request',
                            lambda endpoint, cve_request, session: CVES_RESPONSE)

        with caplog.at_level(logging.INFO):
            result = sync_cve_md()
            assert result
        self.check_sync_logs(caplog.records, 0)
        caplog.clear()

    def test_sync_cve_md_negative(self, pg_db_conn, monkeypatch, caplog):
        """Test calling sync_cve_md with vmaas responding with nothing"""
        monkeypatch.setattr(DatabaseHandler, 'get_connection', lambda: pg_db_conn)
        monkeypatch.setattr('vmaas_sync.vmaas_sync.vmaas_post_request', lambda endpoint, cve_request, session: None)

        with caplog.at_level(logging.INFO):
            result = sync_cve_md()
            assert not result
        assert caplog.records[0].msg == 'Syncing CVE metadata'
        assert caplog.records[1].msg.startswith('Downloading CVE metadata')
        assert caplog.records[2].msg == 'Finished syncing CVE metadata'
        caplog.clear()

    def test_re_evaluate_systems(self, pg_db_conn, monkeypatch, caplog):
        """Test re_evaluate_systems()"""

        monkeypatch.setattr(DatabaseHandler, 'get_connection', lambda: pg_db_conn)
        monkeypatch.setattr(mqueue.MQWriter, 'send', lambda self, sent_msg: LOGGER.info(sent_msg['system_id']))
        monkeypatch.setattr(ServerApplication, '_websocket_reconnect', lambda self: True)
        monkeypatch.setattr(tornado.websocket, 'websocket_connect', lambda: True)
        srvapp = ServerApplication()
        srvapp.evaluator_queue = mqueue.MQWriter(mqueue.EVALUATOR_TOPIC)

        with caplog.at_level(logging.INFO):
            srvapp.re_evaluate_systems()
        self.check_re_evaluate_logs(caplog.records, 0)
        caplog.clear()

    def test_read_websocket(self, pg_db_conn, monkeypatch, caplog):
        """Test getting msg from mqueue - requires combined sync_cve/re-evaluate setup"""
        # prep for sync_cve_md
        monkeypatch.setattr(DatabaseHandler, 'get_connection', lambda: pg_db_conn)
        monkeypatch.setattr('vmaas_sync.vmaas_sync.vmaas_post_request',
                            lambda endpoint, cve_request, session: CVES_RESPONSE)
        # prep for re_evaluate_systems
        monkeypatch.setattr(mqueue.MQWriter, 'send', lambda self, sent_msg: LOGGER.info(sent_msg['system_id']))
        monkeypatch.setattr(ServerApplication, '_websocket_reconnect', lambda self: True)
        monkeypatch.setattr(tornado.websocket, 'websocket_connect', lambda: True)
        srvapp = ServerApplication()
        srvapp.evaluator_queue = mqueue.MQWriter(mqueue.EVALUATOR_TOPIC)

        with caplog.at_level(logging.INFO):
            srvapp._read_websocket_message('webapps-refreshed') # pylint: disable=protected-access

        assert caplog.records[0].msg == 'VMaaS cache refreshed'
        self.check_sync_logs(caplog.records, 1)
        self.check_re_evaluate_logs(caplog.records, 6)
        caplog.clear()

    def test_bogus_message(self, caplog):
        """Test getting EMPTY and UNRECOGNIZED msg from mqueue"""
        class EmptyWebsocket:
            """Lets us warn about websocket close-failure"""
            def __init__(self):
                self.close_reason = 'TEST'
                self.close_code = 666
        srvapp = ServerApplication()
        srvapp.vmaas_websocket = EmptyWebsocket()

        with caplog.at_level(logging.INFO):
            srvapp._read_websocket_message(None) # pylint: disable=protected-access
        assert caplog.records[0].levelname == 'WARNING'
        assert caplog.record_tuples[0][2] == 'Connection to ws://vmaas_websocket:8082/ closed: TEST (666)'
        caplog.clear()

        with caplog.at_level(logging.INFO):
            srvapp._read_websocket_message('whatthehell?!?') # pylint: disable=protected-access
        assert not caplog.records
        caplog.clear()
