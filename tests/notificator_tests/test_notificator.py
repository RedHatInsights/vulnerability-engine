"""
Notificator unit tests
"""
import json

import pytest

from notificator.notificator import Notificator, NotificatorQueue
from notificator.notificator_queue import QueueItem
from common.peewee_model import NotificationType

EVALUATOR_RESULT_NEW_VULNS = {
    "rh_account_id": 0,
    "org_id": "0",
    "new_system_vulnerabilities_ids": [
        {"sys_vuln_id": 0, "cve_id": 1},
        {"sys_vuln_id": 1, "cve_id": 2},
        {"sys_vuln_id": 2, "cve_id": 3},
        {"sys_vuln_id": 3, "cve_id": 8},
    ],
    "mitigated_system_vulnerabilities_ids": [],
    "unmitigated_system_vulnerabilities_ids": [],
}

EVALUATOR_RESULT_MIT_VULNS = {
    "rh_account_id": 0,
    "org_id": "0",
    "new_system_vulnerabilities_ids": [],
    "mitigated_system_vulnerabilities_ids": [
        {"sys_vuln_id": 57, "cve_id": 1},
        {"sys_vuln_id": 58, "cve_id": 9},
    ],
    "unmitigated_system_vulnerabilities_ids": [],
}

EVALUATOR_RESULT_UNMIT_VULNS = {
    "rh_account_id": 0,
    "org_id": "0",
    "new_system_vulnerabilities_ids": [],
    "mitigated_system_vulnerabilities_ids": [],
    "unmitigated_system_vulnerabilities_ids": [
        {"sys_vuln_id": 2, "cve_id": 3},
        {"sys_vuln_id": 3, "cve_id": 8},
        {"sys_vuln_id": 4, "cve_id": 10},
    ],
}


class TestNotificator:
    """Notificator unit tests suite"""

    class MsgMock:
        """KafkMsgMock for mocking kafka message"""
        def __init__(self, value):
            self.value = str(value).encode()

    @staticmethod
    async def _build_notificator(pool, loop):
        """Initializes notificator"""
        notificator = Notificator(loop)
        await notificator.init(pool, loop)
        return notificator

    @staticmethod
    @pytest.mark.asyncio
    async def test_notificator_new(asyncpg_pool, event_loop, monkeypatch):
        """Tests new sys_vulns from evaluator to notificator"""
        # update CVE-2014-1, CVE-2017-1, CVE-2017-6 to be fresh
        # leave out CVE-2016-1 to not be fresh because it has exploits
        async with asyncpg_pool.acquire() as conn:
            await conn.execute("""UPDATE cve_metadata SET public_date = CURRENT_TIMESTAMP WHERE id IN (1, 3, 8)""")

        notificator = await TestNotificator._build_notificator(asyncpg_pool, event_loop)
        monkeypatch.setattr(json, "loads", lambda _: EVALUATOR_RESULT_NEW_VULNS)

        await notificator.process_message(TestNotificator.MsgMock(EVALUATOR_RESULT_NEW_VULNS))
        # evaluator result has 4 cves
        assert len(notificator.queue_proc.notif_cves_queue) == 4

        # CVE-2014-1 - rule notif
        assert len(notificator.queue_proc.notif_cves_queue[0].notif_events) == 1
        assert NotificationType.RULE_NOTIFICATION in notificator.queue_proc.notif_cves_queue[0].notif_events

        # CVE-2016-1 - exploits notif (is not fresh)
        assert len(notificator.queue_proc.notif_cves_queue[1].notif_events) == 1
        assert NotificationType.EXPLOITS_NOTIFICATION in notificator.queue_proc.notif_cves_queue[1].notif_events

        # CVE-2017-1 - high cvss notif, high impact notif, rule notif
        assert len(notificator.queue_proc.notif_cves_queue[2].notif_events) == 3
        assert NotificationType.CVSS_NOTIFICATION in notificator.queue_proc.notif_cves_queue[2].notif_events
        assert NotificationType.SEVERITY_NOTIFICATION in notificator.queue_proc.notif_cves_queue[2].notif_events
        assert NotificationType.RULE_NOTIFICATION in notificator.queue_proc.notif_cves_queue[2].notif_events

        # CVE-2017-6 - rule notif
        assert len(notificator.queue_proc.notif_cves_queue[3].notif_events) == 1
        assert NotificationType.RULE_NOTIFICATION in notificator.queue_proc.notif_cves_queue[3].notif_events
        NotificatorQueue.delete()

    @staticmethod
    @pytest.mark.asyncio
    async def test_notificator_mitigated(asyncpg_pool, event_loop, monkeypatch):
        """Tests mitigated sys_vulns from evaluator to notificator"""
        notificator = await TestNotificator._build_notificator(asyncpg_pool, event_loop)
        monkeypatch.setattr(json, "loads", lambda _: EVALUATOR_RESULT_MIT_VULNS)

        # add sys vuln to the queue as already pending
        notificator.queue_proc.notif_cves_queue[57] = QueueItem("CVE-2014-1", 1, 0, "0", [NotificationType.RULE_NOTIFICATION])

        # add sys vuln to the unknown queue (it is known cve, but just for test)
        notificator.queue_proc.unkno_cves_queue[58] = QueueItem("CVE-2017-7", 9, 0, "0", [NotificationType.RULE_NOTIFICATION])

        # process the message with mitigated sys vulns
        await notificator.process_message(TestNotificator.MsgMock(EVALUATOR_RESULT_MIT_VULNS))

        # both of these potential notifs should be removed from queue
        assert len(notificator.queue_proc.notif_cves_queue) == 0
        assert len(notificator.queue_proc.unkno_cves_queue) == 0
        NotificatorQueue.delete()

    @staticmethod
    @pytest.mark.asyncio
    async def test_notificator_unmitigated(asyncpg_pool, event_loop, monkeypatch):
        """Tests unmitigated sys_vulns from evaluator to notificator"""
        # update CVE-2014-1, CVE-2017-1, CVE-2017-6, CVE-2017-8 to be fresh
        # leave out CVE-2016-1 to not be fresh because it has exploits
        async with asyncpg_pool.acquire() as conn:
            await conn.execute("""UPDATE cve_metadata SET public_date = CURRENT_TIMESTAMP WHERE id IN (1, 3, 8, 10)""")

        notificator = await TestNotificator._build_notificator(asyncpg_pool, event_loop)
        monkeypatch.setattr(json, "loads", lambda _: EVALUATOR_RESULT_NEW_VULNS)

        # firstly send and new sys vuln message to notificator
        await notificator.process_message(TestNotificator.MsgMock(EVALUATOR_RESULT_NEW_VULNS))

        # evaluator result has 4 cves
        assert len(notificator.queue_proc.notif_cves_queue) == 4

        # CVE-2014-1 - rule notif
        assert len(notificator.queue_proc.notif_cves_queue[0].notif_events) == 1
        assert NotificationType.RULE_NOTIFICATION in notificator.queue_proc.notif_cves_queue[0].notif_events

        # CVE-2016-1 - exploits notif (is not fresh)
        assert len(notificator.queue_proc.notif_cves_queue[1].notif_events) == 1
        assert NotificationType.EXPLOITS_NOTIFICATION in notificator.queue_proc.notif_cves_queue[1].notif_events

        # CVE-2017-1 - high cvss notif, high impact notif, rule notif
        assert len(notificator.queue_proc.notif_cves_queue[2].notif_events) == 3
        assert NotificationType.CVSS_NOTIFICATION in notificator.queue_proc.notif_cves_queue[2].notif_events
        assert NotificationType.SEVERITY_NOTIFICATION in notificator.queue_proc.notif_cves_queue[2].notif_events
        assert NotificationType.RULE_NOTIFICATION in notificator.queue_proc.notif_cves_queue[2].notif_events

        # CVE-2017-6 - rule notif
        assert len(notificator.queue_proc.notif_cves_queue[3].notif_events) == 1
        assert NotificationType.RULE_NOTIFICATION in notificator.queue_proc.notif_cves_queue[3].notif_events

        # now send there a new message with unmitigated cves
        monkeypatch.setattr(json, "loads", lambda _: EVALUATOR_RESULT_UNMIT_VULNS)
        await notificator.process_message(TestNotificator.MsgMock(EVALUATOR_RESULT_UNMIT_VULNS))
        # all previous CVES should be kept and untouched
        # but there was a new cve in the unmitigated section which should be handled as new
        assert len(notificator.queue_proc.notif_cves_queue) == 5

        # CVE-2014-1 - rule notif
        assert len(notificator.queue_proc.notif_cves_queue[0].notif_events) == 1
        assert NotificationType.RULE_NOTIFICATION in notificator.queue_proc.notif_cves_queue[0].notif_events

        # CVE-2016-1 - exploits notif (is not fresh)
        assert len(notificator.queue_proc.notif_cves_queue[1].notif_events) == 1
        assert NotificationType.EXPLOITS_NOTIFICATION in notificator.queue_proc.notif_cves_queue[1].notif_events

        # CVE-2017-1 - high cvss notif, high impact notif, rule notif
        assert len(notificator.queue_proc.notif_cves_queue[2].notif_events) == 3
        assert NotificationType.CVSS_NOTIFICATION in notificator.queue_proc.notif_cves_queue[2].notif_events
        assert NotificationType.SEVERITY_NOTIFICATION in notificator.queue_proc.notif_cves_queue[2].notif_events
        assert NotificationType.RULE_NOTIFICATION in notificator.queue_proc.notif_cves_queue[2].notif_events

        # CVE-2017-6 - rule notif
        assert len(notificator.queue_proc.notif_cves_queue[3].notif_events) == 1
        assert NotificationType.RULE_NOTIFICATION in notificator.queue_proc.notif_cves_queue[3].notif_events

        # the new cve:
        # CVE-2017-8 - exploits notif, rules notif
        assert len(notificator.queue_proc.notif_cves_queue[4].notif_events) == 2
        assert NotificationType.EXPLOITS_NOTIFICATION in notificator.queue_proc.notif_cves_queue[4].notif_events
        assert NotificationType.RULE_NOTIFICATION in notificator.queue_proc.notif_cves_queue[4].notif_events
        NotificatorQueue.delete()
