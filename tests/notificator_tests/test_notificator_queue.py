# pylint: disable=protected-access,unused-argument
"""
Notificator Queue unit tests
"""
import pytest

from notificator.notificator_queue import NotificatorQueue, QueueItem
from notificator.notificator import NotificatorConditions
from common.peewee_model import NotificationType


class TestNotificatorQueue:
    """
    Notificator Queue tests suite.
    """
    # pylint: disable=line-too-long
    @staticmethod
    async def _build_queue(pool, loop):
        """Builds notificator queue"""
        conditions = NotificatorConditions(pool)
        queue = NotificatorQueue(0, pool, conditions, loop)
        await conditions.init()
        await queue.init()
        return queue

    @staticmethod
    async def _notified_users_cnt(pool):
        """Returns count of notified users table"""
        async with pool.acquire() as conn:
            res = await conn.fetchrow("""SELECT COUNT(*) FROM notified_accounts""")
            return res[0]

    @staticmethod
    @pytest.mark.asyncio
    async def test_queue_empty(asyncpg_pool, event_loop):
        """Tests queue single run when its empty"""
        queue = await TestNotificatorQueue._build_queue(asyncpg_pool, event_loop)
        await queue._process_queue()
        # Queues should be empty
        assert len(queue.notif_cves_queue) == 0
        assert len(queue.unkno_cves_queue) == 0
        NotificatorQueue.delete()

    @staticmethod
    @pytest.mark.asyncio
    async def test_queue_nonexisting(asyncpg_pool, event_loop):
        """Tests queue run with non existing sys_vuln"""
        queue = await TestNotificatorQueue._build_queue(asyncpg_pool, event_loop)
        # add nonexisting sys vuln to queue
        queue.notif_cves_queue[1337] = QueueItem("CVE-NONEXISTING", 1337, 0, "0", "0", [NotificationType.CVSS_NOTIFICATION])

        await queue._process_queue()

        # Nonexisting sys vuln added to the queue, should be skipped and deleted from queue
        assert len(queue.notif_cves_queue) == 0
        assert len(queue.unkno_cves_queue) == 0
        assert await TestNotificatorQueue._notified_users_cnt(asyncpg_pool) == 0
        NotificatorQueue.delete()

    @staticmethod
    @pytest.mark.asyncio
    async def test_queue_non_advisor_eval(asyncpg_pool, event_loop):
        """Tests queue run with not yet advisor evaluated system"""
        queue = await TestNotificatorQueue._build_queue(asyncpg_pool, event_loop)

        # insert into db system which is not advisor evaluated and has single CVE
        async with asyncpg_pool.acquire() as conn:
            await conn.execute("""INSERT INTO system_platform (id, inventory_id, rh_account_id, last_evaluation, advisor_evaluated)
                                  VALUES (1337, 'd1eaf9b6-7c4b-4a52-a0cd-8022e034bc54', 0, CURRENT_TIMESTAMP, NULL)""")
            await conn.execute("""INSERT INTO system_vulnerabilities (id, rh_account_id, system_id, cve_id, first_reported,
                                  when_mitigated, status_id, rule_id, rule_hit_details)
                                  VALUES (1337, 0, 1337, 3, CURRENT_TIMESTAMP, NULL, 1, NULL, NULL)""")

        queue.notif_cves_queue[1337] = QueueItem("CVE-2017-1", 3, 0, "0", "0", [NotificationType.CVSS_NOTIFICATION])

        await queue._process_queue()

        # Sys vuln is not advisor evaluated yet , should be skipped and not removed
        assert len(queue.notif_cves_queue) == 1
        assert len(queue.unkno_cves_queue) == 0
        assert await TestNotificatorQueue._notified_users_cnt(asyncpg_pool) == 0
        NotificatorQueue.delete()

    @staticmethod
    @pytest.mark.asyncio
    async def test_queue_mitigated(asyncpg_pool, event_loop):
        """Test queue run but cve gets mitigated"""
        queue = await TestNotificatorQueue._build_queue(asyncpg_pool, event_loop)

        # insert into db system which is not vulnerable anymore, based on the advisor listener
        async with asyncpg_pool.acquire() as conn:
            await conn.execute("""INSERT INTO system_platform (id, inventory_id, rh_account_id, last_evaluation, advisor_evaluated)
                                  VALUES (1337, 'd1eaf9b6-7c4b-4a52-a0cd-8022e034bc54', 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)""")
            await conn.execute("""INSERT INTO system_vulnerabilities (id, rh_account_id, system_id, cve_id, first_reported, when_mitigated,
                                  mitigation_reason, status_id, rule_id, rule_hit_details)
                                  VALUES (1337, 0, 1337, 3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'system is not vulnerable', 1, NULL, NULL)""")

        # lets add it to the queue from evaluator (before advisor evaluation)
        queue.notif_cves_queue[1337] = QueueItem("CVE-2017-1", 3, 0, "0", "0", [NotificationType.CVSS_NOTIFICATION])

        await queue._process_queue()

        # Sys vuln got mitigated, should be removed from queue, noone should be notified
        assert len(queue.notif_cves_queue) == 0
        assert len(queue.unkno_cves_queue) == 0
        assert await TestNotificatorQueue._notified_users_cnt(asyncpg_pool) == 0
        NotificatorQueue.delete()

    @staticmethod
    @pytest.mark.asyncio
    async def test_queue_valid(asyncpg_pool, event_loop):
        """Test queue run with valid system vulnerabilities, which should be notified"""
        msgs = []

        def _send_kafka_notif_mock(self, acc_id, event_type, *_, **__):
            msgs.append((acc_id, event_type))

        queue = await TestNotificatorQueue._build_queue(asyncpg_pool, event_loop)
        queue._send_kafka_notif = _send_kafka_notif_mock

        # add system which is vulnerable and should be notified
        async with asyncpg_pool.acquire() as conn:
            await conn.execute("""INSERT INTO system_platform (id, inventory_id, rh_account_id, last_evaluation, advisor_evaluated)
                                  VALUES (1337, 'd1eaf9b6-7c4b-4a52-a0cd-8022e034bc54', 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)""")
            await conn.execute("""INSERT INTO system_vulnerabilities (id, rh_account_id, system_id, cve_id, first_reported, when_mitigated,
                                  mitigation_reason, status_id, rule_id, rule_hit_details)
                                  VALUES (1337, 0, 1337, 3, CURRENT_TIMESTAMP, NULL, NULL, 1, NULL, NULL)""")

        queue.notif_cves_queue[1337] = QueueItem("CVE-2017-1", 3, 0, "0", "0", [NotificationType.CVSS_NOTIFICATION, NotificationType.EXPLOITS_NOTIFICATION])

        await queue._process_queue()

        # Queue should be processed
        assert len(queue.notif_cves_queue) == 0
        assert len(queue.unkno_cves_queue) == 0
        # There should be 2 notifications for this customer and cve = CVSS and EXPLOITS
        assert await TestNotificatorQueue._notified_users_cnt(asyncpg_pool) == 2
        # There shoudl be 2 messages wanted to be sent to kafka
        assert len(msgs) == 2
        NotificatorQueue.delete()

    @staticmethod
    @pytest.mark.asyncio
    async def test_queue_unknown_cve(asyncpg_pool, event_loop):
        """Test queue run with unknown cve vulnerabilities yet"""
        queue = await TestNotificatorQueue._build_queue(asyncpg_pool, event_loop)

        # insert into db system which vulnerable to CVE which vulnerability does not know yet
        async with asyncpg_pool.acquire() as conn:
            await conn.execute("""INSERT INTO system_platform (id, inventory_id, rh_account_id, last_evaluation, advisor_evaluated)
                                  VALUES (1337, 'd1eaf9b6-7c4b-4a52-a0cd-8022e034bc54', 0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)""")
            await conn.execute("""INSERT INTO cve_metadata (id, cve, description, impact_id)
                                  VALUES (1337, 'CVE-UNKNOWN', 'unknown', 0)""")
            await conn.execute("""INSERT INTO system_vulnerabilities (id, rh_account_id, system_id, cve_id, first_reported, when_mitigated,
                                  status_id, rule_id, rule_hit_details)
                                  VALUES (1337, 0, 1337, 1337, CURRENT_TIMESTAMP, NULL, 1, NULL, NULL)""")

        queue.unkno_cves_queue[1337] = QueueItem(None, 1337, 0, "0", "0", [])

        await queue._process_queue()

        # Cve is still unknown, should stay in unknown queue
        assert len(queue.notif_cves_queue) == 0
        assert len(queue.unkno_cves_queue) == 1
        assert await TestNotificatorQueue._notified_users_cnt(asyncpg_pool) == 0

        # update the cve to known, simulate vmaas_sync
        async with asyncpg_pool.acquire() as conn:
            await conn.execute("""UPDATE cve_metadata SET impact_id = 7, cvss3_score = 9.0, public_date = CURRENT_TIMESTAMP,
                                  description = 'super cve', exploit_data = '[{"date": "2022-01-01", "source": "CISA", "reference": "N/A"}]' WHERE id = 1337""")

        await queue._process_queue()

        # cve is now known, and should be moved to the normal queue
        assert len(queue.notif_cves_queue) == 1
        assert len(queue.unkno_cves_queue) == 0
        assert await TestNotificatorQueue._notified_users_cnt(asyncpg_pool) == 0
        # ensure that cve notification events are calculated right
        # cve has exploits, high cvss and critical severity
        assert NotificationType.EXPLOITS_NOTIFICATION in queue.notif_cves_queue[1337].notif_events
        assert NotificationType.CVSS_NOTIFICATION in queue.notif_cves_queue[1337].notif_events
        assert NotificationType.SEVERITY_NOTIFICATION in queue.notif_cves_queue[1337].notif_events

        msgs = []

        def _send_kafka_notif_mock(self, acc_id, event_type, *_, **__):
            msgs.append((acc_id, event_type))

        queue._send_kafka_notif = _send_kafka_notif_mock
        await queue._process_queue()

        # customer should be notified now, and should recieve 3 notifications about the new cve
        assert len(queue.notif_cves_queue) == 0
        assert len(queue.unkno_cves_queue) == 0
        assert await TestNotificatorQueue._notified_users_cnt(asyncpg_pool) == 3
        NotificatorQueue.delete()
