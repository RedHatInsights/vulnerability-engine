"""
Notificator conditions unit tests
"""
import pytest

from common.peewee_model import NotificationType
from notificator.notificator import NotificatorConditions


class TestNotificatorConditions:
    """Notificator conditions test suite"""

    @staticmethod
    async def _build_conditions(pool):
        """Initializes notificator conditions"""
        conditions = NotificatorConditions(pool)
        await conditions.init()
        return conditions

    @staticmethod
    @pytest.mark.asyncio
    async def test_conditions_valid_cve(asyncpg_pool):
        """Tests map intialization"""
        conditions = await TestNotificatorConditions._build_conditions(asyncpg_pool)
        # test that cves are fetched in map correctly
        assert await conditions.cve_exists(1) is True
        assert await conditions.cve_exists(0) is True

    @staticmethod
    @pytest.mark.asyncio
    async def test_conditions_invalid_cve(asyncpg_pool):
        """Tests map initialization"""
        conditions = await TestNotificatorConditions._build_conditions(asyncpg_pool)

        # test that cves are not existing
        assert await conditions.cve_exists(-1) is False
        assert await conditions.cve_exists(1337) is False

    @staticmethod
    @pytest.mark.asyncio
    async def test_conditions_notif_events(asyncpg_pool):
        """Test generated notification events on specified cves"""
        # make CVE-2017-1 fresh
        async with asyncpg_pool.acquire() as conn:
            await conn.execute("""UPDATE cve_metadata SET public_date = CURRENT_TIMESTAMP WHERE id = 3""")
        conditions = await TestNotificatorConditions._build_conditions(asyncpg_pool)

        # build notification events for CVE-2016-1
        # Not fresh CVE, but has exploits
        assert await conditions.cve_exists(2) is True
        events = conditions.make_events_for_cve(2)
        assert len(events) == 1
        assert NotificationType.EXPLOITS_NOTIFICATION in events

        # CVE-2017-1 has critical impact, high cvss_score and has active security rule
        assert await conditions.cve_exists(3) is True
        events = conditions.make_events_for_cve(3)
        assert len(events) == 3
        assert NotificationType.CVSS_NOTIFICATION in events
        assert NotificationType.SEVERITY_NOTIFICATION in events
        assert NotificationType.RULE_NOTIFICATION in events
