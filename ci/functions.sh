#!/bin/bash

PR_LABELS=''
RELEASE_NAMESPACE=
SKIP_BUILD=''
SKIP_DEPLOY_EPHEMERAL=''
SKIP_IMAGE_BUILD=''
SKIP_SMOKE_TEST=''

set -ex

function check_for_labels() {
    grep -E "$1" <<< "$PR_LABELS" 
}


function get_pr_labels() {

    _github_api_request "issues/$ghprbPullId/labels" | jq '.[].name'
}

function set_label_flags() {

    local LABELS

    if ! LABELS=$(get_pr_labels); then
        echo "Error retrieving PR labels"
        return 1
    fi

    if check_for_labels 'keep-namespace'; then
        RELEASE_NAMESPACE='true'
        echo "Namespace will not be released upon completion"
    fi

    if ! check_for_labels 'skip-build'; then
        SKIP_BUILD='true'
        EXIT_CODE=1
        echo "Image build skipped"
    fi

    if check_for_labels 'skip-deploy'; then
        SKIP_DEPLOY_EPHEMERAL='true'
        echo "Ephemeral deployment skipped"
    fi

    if check_for_labels 'skip-smoke-test'; then
        SKIP_SMOKE_TEST='true'
        echo "Ephemeral deployment skipped"
    fi
}

function build_image() {
    export DOCKER_BUILDKIT=1
    source $CICD_ROOT/build.sh
}

function is_pull_request() {
    [[ -n "$ghprbPullId" ]]
}

function deploy_ephemeral() {
    source $CICD_ROOT/deploy_ephemeral_env.sh
}

function run_smoke_tests() {
    source $CICD_ROOT/cji_smoke_test.sh
}

function generate_junit_report_from_code() {

    local CODE="$1"

    "${JUNIT_REPORT_GENERATOR}" "$CODE" > "${ARTIFACTS_DIR}/junit-pr_check.xml"
}

_github_api_request() {

    PATH="$1"
    curl -s -H "Accept: application/vnd.github.v3+json" \
        "${GITHUB_API_ROOT}/$PATH" 
}

function latest_commit_in_pr() {

    local LATEST_COMMIT=$(_github_api_request "pulls/$ghprbPullId" | jq -r '.head.sha')
    [[ "$LATEST_COMMIT" == "$ghprbActualCommit" ]]
}

function run_build_image() {

    # Install bonfire repo/initialize
    CICD_URL=https://raw.githubusercontent.com/RedHatInsights/cicd-tools/main
    curl -s $CICD_URL/bootstrap.sh > .cicd_bootstrap.sh && source ./.cicd_bootstrap.sh
    echo "creating PR image"
    build_image
}

function configure_stages() {

    # check if this commit is out of date with the branch
    if ! latest_commit_in_pr; then
        SKIP_PR_CHECK='true'
        EXIT_CODE=3
    fi

    if ! set_label_flags; then
        echo "Error setting up workflow based on PR labels"
        SKIP_PR_CHECK='true'
        EXIT_CODE=1
    fi
}

##############################################################################################

function _process_requirements_labels() {
    # $1 env var to export
    # $@ labels to process
    env_var_name=$1; shift;
    labels=$@
    if [ -n "$labels" ]; then
        labels=$(echo "$labels" | sed -e 's/"//g')
        # contents of labels is different in different shells
        # it can be one of
        #   labels="REQ1\nREQ2"
        #   labels="REQ1 REQ2"
        lines=$(echo "$labels" | wc -l | xargs)
        words=$(echo "$labels" | wc -w | xargs)
        if [[ "$lines" == "1" ]] && [[ "$words" == "1" ]]; then
            export "$env_var_name=$labels"
            return
        fi
        processed=""
        for req in $labels; do
            processed="$processed$req,"
        done
        # delete extra comma
        processed="${processed%?}"
        export "$env_var_name=$processed"
    fi
}

function process_requirements_labels() {
    if [ -f $LABELS_DIR/github_labels.txt ]; then
        requirements=$(egrep "^\"[A-Z]+-[A-Z-]*\"$" $LABELS_DIR/github_labels.txt)
        requirements_priority=$(egrep "^\"(critical|high|medium|low)-requirements\"$" $LABELS_DIR/github_labels.txt | sed -e 's/-requirements//g')
        _process_requirements_labels IQE_REQUIREMENTS $requirements
        _process_requirements_labels IQE_REQUIREMENTS_PRIORITY $requirements_priority
    fi
}