#!/bin/bash

WORKSPACE=${WORKSPACE:-$PWD}
JUNIT_REPORT_GENERATOR="${WORKSPACE}/junit-report-generator.sh"

RELEASE_NAMESPACE="${RELEASE_NAMESPACE:-}"
SKIP_BUILD="${SKIP_BUILD:-}"
SKIP_DEPLOY_EPHEMERAL="${SKIP_DEPLOY_EPHEMERAL:-}"
SKIP_IMAGE_BUILD="${SKIP_IMAGE_BUILD:-}"
SKIP_SMOKE_TEST="${SKIP_SMOKE_TEST:-}"

function get_pr_labels() {
    _github_api_request "issues/$ghprbPullId/labels" | jq '.[].name'
}

function set_label_flags() {

    local PR_LABELS

    if ! PR_LABELS=$(get_pr_labels); then
        echo "Error retrieving PR labels"
        return 1
    fi

    if grep -E 'release-namespace' <<< "$PR_LABELS"; then
        RELEASE_NAMESPACE='true'
        echo "Namespace will not be released"
    fi

    if grep -E 'skip-build' <<< "$PR_LABELS"; then
        SKIP_IMAGE_BUILD='true'
        echo "Image will not be built"
    fi

    if grep -E 'skip-deploy' <<< "$PR_LABELS"; then
        SKIP_DEPLOY_EPHEMERAL='true'
        echo "deployment to ephemeral skipped"
    fi

    if grep -E 'skip-tests' <<< "$PR_LABELS"; then
        SKIP_SMOKE_TEST='true'
        echo "Smoke tests will be skipped"
    fi
}

function generate_junit_report_from_code() {

    local CODE="$1"

    mkdir -p "$ARTIFACTS_DIR"
    "$JUNIT_REPORT_GENERATOR" "$CODE" > "${ARTIFACTS_DIR}/junit-pr_check.xml"
}

_github_api_request() {

    local API_PATH="$1"
    curl -s -H "Accept: application/vnd.github.v3+json" "${GITHUB_API_ROOT}/$API_PATH"
}

function _install_bonfire_tools() {

    CICD_URL=https://raw.githubusercontent.com/RedHatInsights/bonfire/master/cicd
    curl -s "${CICD_URL}/bootstrap.sh" > .cicd_bootstrap.sh && source "${WORKSPACE}/.cicd_bootstrap.sh"
}


function run_build_image_stage() {

    _install_bonfire_tools
    echo "creating PR image"
    build_image
}

function build_image() {

    export DOCKER_BUILDKIT=1
    source $CICD_ROOT/build.sh
}

function deploy_ephemeral_stage() {

    _install_bonfire_tools
    echo "deploying ephemeral environment"
    source $CICD_ROOT/deploy_ephemeral_env.sh

    echo "Namespace: ${NAMESPACE}"
    return $NAMESPACE
}

function run_smoke_tests_stage() {

    _install_bonfire_tools
    source $CICD_ROOT/cji_smoke_test.sh
}

function _process_requirements_labels() {
    # $1 env var to export
    # $@ labels to process
    env_var_name=$1; shift;
    labels=$@
    if [ -n "$labels" ]; then
        labels=$(echo "$labels" | sed -e 's/"//g')
        # contents of labels is different in different shells
        # it can be one of
        #   labels="REQ1\nREQ2"
        #   labels="REQ1 REQ2"
        lines=$(echo "$labels" | wc -l | xargs)
        words=$(echo "$labels" | wc -w | xargs)
        if [[ "$lines" == "1" ]] && [[ "$words" == "1" ]]; then
            export "$env_var_name=$labels"
            return
        fi
        processed=""
        for req in $labels; do
            processed="$processed$req,"
        done
        # delete extra comma
        processed="${processed%?}"
        export "$env_var_name=$processed"
    fi
}

function process_requirements_labels() {
    if [ -f $LABELS_DIR/github_labels.txt ]; then
        requirements=$(egrep "^\"[A-Z]+-[A-Z-]*\"$" $LABELS_DIR/github_labels.txt)
        requirements_priority=$(egrep "^\"(critical|high|medium|low)-requirements\"$" $LABELS_DIR/github_labels.txt | sed -e 's/-requirements//g')
        _process_requirements_labels IQE_REQUIREMENTS $requirements
        _process_requirements_labels IQE_REQUIREMENTS_PRIORITY $requirements_priority
    fi
}
