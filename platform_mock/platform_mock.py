"""Platform mock upload module."""
import base64
import hashlib
import json
import os

from insights.core import archives, dr
from insights.core.archives import InvalidContentType
from insights.core.context import HostArchiveContext
from insights.core.hydration import create_context
from insights.specs import Specs
from insights.parsers.ls_etc import LsEtc
from tornado.ioloop import IOLoop
from tornado.web import Application, RequestHandler

from common.logging import init_logging, get_logger
from common import mqueue

LOGGER = get_logger(__name__)
STORAGE_PATH = "/tmp/storage"

SATELLITE_MANAGED_FILES = {
    "sat5": ["/etc/sysconfig/rhn", "systemid"],
    "sat6": ["/etc/rhsm/ca", "katello-server-ca.pem"]
}


class UploadHandler(RequestHandler):
    """Upload Handler."""
    def data_received(self, chunk):
        pass

    @staticmethod
    def _get_system_facts(archive_path):
        facts = {}
        default_packages = (
            "insights.specs.default",
            "insights.specs.insights_archive",
            "insights.combiners",
            "insights.parsers"
        )
        for pkg in default_packages:
            dr.load_components(pkg)
        broker = dr.Broker()
        try:
            with archives.extract(archive_path) as ex:
                ctx = create_context(ex.tmp_dir, HostArchiveContext)
                broker[ctx.__class__] = ctx
                broker = dr.run(components=[Specs.machine_id, LsEtc],
                                broker=broker)
                if Specs.machine_id in broker:
                    facts["id"] = broker[Specs.machine_id].content[0].strip()
                if LsEtc in broker:
                    facts["satellite_managed"] = any([broker[LsEtc].dir_contains(*satellite_file)
                                                      for satellite_file in SATELLITE_MANAGED_FILES.values()
                                                      if satellite_file[0] in broker[LsEtc]])
        except InvalidContentType:
            LOGGER.error("Unable to parse archive.")
        return facts

    def _get_rh_account(self):
        if "x-rh-identity" not in self.request.headers:
            return "00000000"
        encoded_value = self.request.headers["x-rh-identity"]
        decoded_value = base64.b64decode(encoded_value).decode("utf-8")
        identity = json.loads(decoded_value)
        return identity.get("identity", {}).get("account_number", "00000000")
    
    def _get_upload_multiplier(self):
        if "x-upload-multiplier" not in self.request.headers:
            return 1
        multiplier = self.request.headers["x-upload-multiplier"]
        return int(multiplier) if multiplier.isdigit() else 1

    def post(self):
        """Answer POST request.
           curl -X POST -F "upload=@./file.tar.gz" http://localhost:8100/api/v1/upload
           curl -X POST -F "upload=@./file.tar.gz" -H "x-upload-multiplier: 10" http://localhost:8100/api/v1/upload
        """
        if self.request.files and "upload" in self.request.files:
            sha1 = hashlib.sha1(self.request.files["upload"][0]["body"]).hexdigest()
            file_name = "%s.tar.gz" % sha1
            file_path = os.path.join(STORAGE_PATH, file_name)
            if not os.path.exists(file_path):
                with open(file_path, "wb") as open_file:
                    open_file.write(self.request.files["upload"][0]["body"])
            if sha1 in self.application.archive_to_facts_cache:
                facts = self.application.archive_to_facts_cache[sha1]
            else:
                facts = self._get_system_facts(file_path)
                self.application.archive_to_facts_cache[sha1] = facts
            download_url = "http://platform_mock:8000/api/v1/download/%s" % file_name
            rh_account = self._get_rh_account()
            upload_message = {"id": facts.get("id", None), "url": download_url, "rh_account": rh_account,
                              "satellite_managed": facts.get("satellite_managed", False), "type": "upload_new_file"}
            for _ in range(self._get_upload_multiplier()):
                self.application.upload_queue.send(upload_message)
            LOGGER.info("New upload: %s", upload_message)
        else:
            self.set_status(400)
        self.finish()


class DownloadHandler(RequestHandler):
    """Download Handler."""
    def data_received(self, chunk):
        pass

    def get(self, path):
        """Answer GET request."""
        file_path = os.path.join(STORAGE_PATH, path)
        if not os.path.isfile(file_path):
            self.set_status(404)
        else:
            self.set_header("Content-Type", "application/octet-stream")
            with open(file_path, "rb") as open_file:
                self.write(open_file.read())
        self.finish()


class DeleteHandler(RequestHandler):
    """Delete Handler."""
    def data_received(self, chunk):
        pass

    def delete(self, inventory_id):
        """Answer DELETE request."""
        delete_message = {"type": "delete", "id": inventory_id}
        self.application.events_queue.send(delete_message)
        LOGGER.info("Delete: %s", delete_message)
        self.finish()


class ServerApplication(Application):
    """Platform mock application."""
    def __init__(self):
        handlers = [
            (r"/api/v1/upload/?", UploadHandler),
            (r"/api/v1/download/(.+)", DownloadHandler),
            (r"/api/v1/delete/(.+)", DeleteHandler),
        ]
        Application.__init__(self, handlers)
        self.instance = IOLoop.instance()
        self.upload_queue = mqueue.MQWriter(mqueue.UPLOAD_TOPIC, bootstrap_servers="localhost:9092")
        self.events_queue = mqueue.MQWriter(mqueue.EVENTS_TOPIC, bootstrap_servers="localhost:9092")
        self.archive_to_facts_cache = {}

    def start(self):
        """Start platform mock server."""
        self.instance.start()


def main():
    """Main platform mock entrypoint."""
    init_logging()
    if not os.path.exists(STORAGE_PATH):
        os.makedirs(STORAGE_PATH)
    LOGGER.info("Starting platform mock.")
    app = ServerApplication()
    app.listen(8000)
    app.start()


if __name__ == '__main__':
    main()
