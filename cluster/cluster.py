"""
Cluster job
"""
import os
import subprocess
from typing import List

from psycopg2 import connect
from psycopg2 import errorcodes
from psycopg2 import errors
from psycopg2 import sql

from common.config import Config
from common.logging import get_logger
from common.logging import init_logging

CFG = Config()

LOGGER = get_logger(__name__)
PG_REPACK_ARGS = ["pg_repack", "-k", "-d", CFG.db_name, "-h", CFG.db_host, "-p", str(CFG.db_port), "-U", CFG.db_user]


def get_conn():
    """Returns DB connection"""
    return connect(
        dbname=CFG.db_name,
        user=CFG.db_user,
        password=CFG.db_pass,
        host=CFG.db_host,
        port=CFG.db_port,
        sslmode=CFG.db_ssl_mode,
        sslrootcert=CFG.db_ssl_root_cert_path,
    )


def launch_reindex(table: str):
    """Launches pg_repack to reindex table"""
    process = subprocess.Popen(PG_REPACK_ARGS + ["-t", table, "-x"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    with process.stdout:
        for line in iter(process.stdout.readline, b""):
            LOGGER.info(line[: len(line) - 1].decode("utf-8"))


def launch_cluster(table: str, fields: List[str]):
    """Launches pg_repack to cluster table by given fields"""
    fields_str = ",".join(fields)
    process = subprocess.Popen(PG_REPACK_ARGS + ["-t", table, "-o", fields_str], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    with process.stdout:
        for line in iter(process.stdout.readline, b""):
            LOGGER.info(line[: len(line) - 1].decode("utf-8"))


def cluster() -> None:
    """Cluster `system_platform` and all `system_vulnerabilities_active_*` tables"""
    LOGGER.info("Starting cluster job")

    os.environ["PGPASSWORD"] = CFG.db_pass

    conn = get_conn()
    cur = conn.cursor()

    LOGGER.info("Creating pg_repack extension in DB")
    try:
        cur.execute("""CREATE EXTENSION pg_repack""")
        LOGGER.info("pg_repack extension created successfully")
    except errors.lookup(errorcodes.DUPLICATE_OBJECT):
        LOGGER.info("pg_repack extension already exists")
    conn.commit()

    LOGGER.info("Reindexing system_platform table")
    launch_reindex("system_platform")

    cluster_fields = ["rh_account_id"]
    LOGGER.info("Clustering system_platform table by fields: %s", cluster_fields)
    launch_cluster("system_platform", cluster_fields)

    LOGGER.info("Analyzing system_platform")
    cur.execute("""ANALYZE system_platform""")
    conn.commit()
    cur.close()

    if CFG.cluster_system_vulnerabilities:
        cur = conn.cursor()
        cur.execute(
            """
            SELECT tablename
            FROM   pg_indexes
            WHERE  tablename    LIKE 'system_vulnerabilities_active_%'
            GROUP BY tablename
            """
        )

        sys_vuln_parts = list(cur.fetchall())
        conn.commit()
        cur.close()

        LOGGER.info("Clearing %s system_vulnerabilities partitions", len(sys_vuln_parts))

        cluster_fields = ["rh_account_id", "cve_id"]
        for (table,) in sys_vuln_parts:
            LOGGER.info("Reindexing %s table", table)
            launch_reindex(table)

            LOGGER.info("Clustering %s table by fields: %s", table, cluster_fields)
            launch_cluster(table, cluster_fields)

            LOGGER.info("Analyzing %s table", table)
            cur = conn.cursor()
            query = sql.SQL("ANALYZE {}").format(sql.Identifier(table))
            cur.execute(query)

            conn.commit()
            cur.close()

    conn.close()
    LOGGER.info("Finished cluster job")


if __name__ == "__main__":
    init_logging()
    cluster()
