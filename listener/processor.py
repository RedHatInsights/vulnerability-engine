"""
Inventory queue item processor
"""

import asyncio

from psycopg.rows import dict_row
from psycopg_pool import AsyncConnectionPool

from common.logging import get_logger
from common.mqueue import MQWriter

from .common import NEW_RH_ACCOUNT

LOGGER = get_logger(__name__)


class BaseProcessor:
    """Base class for processor"""

    def __init__(self, db_pool: AsyncConnectionPool, payload_tracker: MQWriter, loop: asyncio.BaseEventLoop):
        """Constructor"""
        self.db_pool: AsyncConnectionPool = db_pool
        self.payload_tracker = payload_tracker
        self.loop = loop

    async def _db_account_lookup(self, conn, org_id: str) -> int:
        """Lookup internal DB id for org id)"""
        async with conn.cursor(row_factory=dict_row) as cur:
            await cur.execute("SELECT id FROM rh_account WHERE org_id = %s", (org_id,))
            result = await cur.fetchone()
            if result:
                return result["id"]

            await cur.execute(
                """
                INSERT INTO rh_account (org_id)
                VALUES (%s) ON CONFLICT (org_id) DO UPDATE SET
                org_id = %s RETURNING (xmax = 0) AS inserted, id
            """,
                (
                    org_id,
                    org_id,
                ),
            )
            result = await cur.fetchone()
            if result["inserted"]:
                NEW_RH_ACCOUNT.inc()
            return result["id"]

    async def _db_account_system_lookup(self, conn, org_id: str, inventory_id: str) -> (int, int):
        """Lookup internal DB id for org_id and system for inventory_id"""
        async with conn.cursor(row_factory=dict_row) as cur:
            await cur.execute(
                """SELECT ra.id AS rh_account_id, sp.id AS system_id
                                 FROM rh_account AS ra
                                 LEFT JOIN system_platform AS sp ON (ra.id = sp.rh_account_id AND
                                                                     sp.inventory_id = %s)
                                 WHERE ra.org_id = %s
                                 LIMIT 1
                                 """,
                (inventory_id, org_id),
            )
            result = await cur.fetchone()
            if result:
                return result["rh_account_id"], result["system_id"]

            await cur.execute(
                """
                INSERT INTO rh_account (org_id)
                VALUES (%s) ON CONFLICT (org_id) DO UPDATE SET
                org_id = %s RETURNING (xmax = 0) AS inserted, id
            """,
                (org_id, org_id),
            )
            result = await cur.fetchone()
            if result["inserted"]:
                NEW_RH_ACCOUNT.inc()
            return result["id"], None
