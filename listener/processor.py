"""
Inventory queue item processor
"""
import asyncio

from psycopg.rows import dict_row
from psycopg_pool import AsyncConnectionPool

from common.mqueue import MQWriter
from common.logging import get_logger
from .common import NEW_RH_ACCOUNT

LOGGER = get_logger(__name__)


class BaseProcessor:
    """Base class for processor"""

    def __init__(self, db_pool: AsyncConnectionPool, payload_tracker: MQWriter, loop: asyncio.BaseEventLoop):
        """Constructor"""
        self.db_pool: AsyncConnectionPool = db_pool
        self.payload_tracker = payload_tracker
        self.loop = loop

    async def _db_account_lookup(self, conn, acc_num: str, org_id: str) -> int:
        """Lookup internal DB id for account number or org id)"""
        async with conn.cursor(row_factory=dict_row) as cur:
            await cur.execute("SELECT id FROM rh_account WHERE org_id = %s", (org_id,))
            result = await cur.fetchone()
            if result:
                return result["id"]

            result = None
            if acc_num:
                await cur.execute("""
                    INSERT INTO rh_account (account_number, org_id)
                    VALUES (%s, %s) ON CONFLICT (account_number) DO UPDATE SET
                    org_id = %s RETURNING (xmax = 0) AS inserted, id
                """, (acc_num, org_id, org_id,))
                result = await cur.fetchone()
            else:
                await cur.execute("""
                    INSERT INTO rh_account (org_id)
                    VALUES (%s) ON CONFLICT (org_id) DO UPDATE SET
                    org_id = %s RETURNING (xmax = 0) AS inserted, id
                """, (org_id, org_id,))
                result = await cur.fetchone()
            if result["inserted"]:
                NEW_RH_ACCOUNT.inc()
            return result["id"]
