#!/usr/bin/python3

import logging
import os
from tornado.ioloop import IOLoop, PeriodicCallback
from tornado.web import Application, RequestHandler
from tornado.websocket import websocket_connect

VERSION = os.getenv("VERSION", "master")
WEBSOCKET_RECONNECT_INTERVAL = 60
LOGGER = logging.getLogger(__name__)

class HealthHandler(RequestHandler):
      """Handler class providing health status."""
      def get(self, *args, **kwargs):
          self.flush()


class ServerApplication(Application):
    def __init__(self):
        handlers = [
            (r"/api/v1/monitoring/health/?", HealthHandler),
        ]
        Application.__init__(self, handlers)
        self.instance = IOLoop.instance()
        self.reposcan_websocket_url = os.getenv("REPOSCAN_WEBSOCKET_URL",
                                                "ws://reposcan:8081/notifications")
        self.reposcan_websocket = None
        self.reconnect_callback = None

    def start(self):
        self._websocket_reconnect()
        self.reconnect_callback = PeriodicCallback(self._websocket_reconnect,
                                                  WEBSOCKET_RECONNECT_INTERVAL * 1000)
        self.reconnect_callback.start()
        self.instance.start()

    def _websocket_reconnect(self):
        """Connect to given websocket, set message handler and callback."""
        if self.reposcan_websocket is None:
            websocket_connect(self.reposcan_websocket_url,
                              on_message_callback=self._read_websocket_message,
                              callback=self._websocket_connect_status)

    def _websocket_connect_status(self, future):
        """Check if connection attempt succeeded."""
        try:
            result = future.result()
        except:
            result = None

        if result is None:
            # TODO: print the traceback as debug message when we use logging module instead of prints here
            LOGGER.warning("Unable to connect to: %s", self.reposcan_websocket_url)
        else:
            LOGGER.info("Connected to: %s", self.reposcan_websocket_url)

        self.reposcan_websocket = result

    def _read_websocket_message(self, message):
        """Read incoming websocket messages."""
        if message is not None:
            if message == "refresh-cache":
                LOGGER.warning("REPOSCAN REFRESHED CACHE !!!")
                # TODO: write a message to the queue here
        else:
            LOGGER.warning("Connection to %s closed: %s (%s)", self.reposcan_websocket_url,
                           self.reposcan_websocket.close_reason, self.reposcan_websocket.close_code)
            self.reposcan_websocket = None

def main():
    LOGGER.info("Starting (version %s).", VERSION)
    app = ServerApplication()
    app.listen(8000)
    app.start()


if __name__ == '__main__':
    main()
