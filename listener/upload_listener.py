#!/usr/bin/python3

import datetime
import json
import tempfile

import requests

from archive_parser import ArchiveParser
from common.logging import init_logging, get_logger
from database.database_handler import DatabaseHandler, init_db
import mqueue
from utils import uuid, VERSION, format_vmaas_request

LOGGER = get_logger(__name__)


def prepare_vmaas_request(archive_url):
    with tempfile.NamedTemporaryFile(delete=True) as tmp_file:
        LOGGER.info("Writing temp file to %s" % tmp_file.name)
        r = requests.get(archive_url, stream=True, allow_redirects=True)
        for chunk in r.iter_content(chunk_size=1024):
            if chunk:  # filter out keep-alive new chunks
                tmp_file.write(chunk)
        tmp_file.flush()
        parser = ArchiveParser(tmp_file.name)
        parser.parse()
        return format_vmaas_request(parser.package_list, parser.repo_list)

def main():
    init_logging()
    init_db()
    LOGGER.info("Starting upload listener (version %s).", VERSION)
    # get DB connection
    conn = DatabaseHandler.get_connection()
    upload_queue = mqueue.QReader('vulnerability', 'vulnerability')
    vuln_queue = mqueue.QWriter()

    for msg in upload_queue:
        LOGGER.info('Received Platform Kafka message at %s from topic %s: %s',
                     datetime.datetime.now(), msg.topic, msg.value)
        upload_data = json.loads(msg.value.decode("utf8"))

        new_upload_msg = {"type": "upload_new_file",
                          "version": 1,
                          "correlation_id": uuid(),
                          "principal": upload_data["principal"],
                          "rh_account": upload_data["rh_account"],
                          "url": upload_data["url"],
                          "vmaas_request": prepare_vmaas_request(upload_data["url"])
                         }
        vuln_queue.send(new_upload_msg)
        LOGGER.info('Sent vulnerability message: %s', json.dumps(new_upload_msg).encode("utf8"))

if __name__ == '__main__':
    main()
