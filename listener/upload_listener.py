"""Module implementing kafka listener."""

import os
import datetime
import json
import tempfile

import requests

from archive_parser import ArchiveParser
from common.logging import init_logging, get_logger
from database.database_handler import DatabaseHandler, init_db
import mqueue
from utils import VERSION, format_vmaas_request

LOGGER = get_logger(__name__)


def db_import_system(conn, system_id, rh_account, hostname, s3_url, vmaas_json):
    """Import initial system record to the DB."""
    # TODO: json_checksum
    cur = conn.cursor()
    cur.execute("select insights_id from system_platform where insights_id = %s", (system_id,))
    system_record = cur.fetchone()
    if system_record is None:
        cur.execute("""insert into system_platform (insights_id, rh_account, display_name, s3_url,
                                                    vmaas_json, json_checksum)
                        values (%s, %s, %s, %s, %s, %s)""",
                    (system_id, rh_account, hostname, s3_url, vmaas_json, '0',))
    else:
        cur.execute("""update system_platform set rh_account = %s, display_name = %s, s3_url = %s,
                                                  vmaas_json = %s, json_checksum = %s
                       where insights_id = %s""", (rh_account, hostname, s3_url, vmaas_json, '0', system_id,))
    cur.close()
    conn.commit()


def main():
    """Main kafka listener entrypoint."""
    init_logging()
    init_db()
    LOGGER.info("Starting upload listener (version %s).", VERSION)
    # get DB connection
    conn = DatabaseHandler.get_connection()
    upload_topic = os.getenv('UPLOAD_TOPIC', 'platform.upload.advisor')
    upload_queue = mqueue.QReader(upload_topic, 'vulnerability')
    vuln_queue = mqueue.QWriter()

    for msg in upload_queue:
        LOGGER.info('Received Platform Kafka message at %s from topic %s: %s',
                    datetime.datetime.now(), msg.topic, msg.value)
        upload_data = json.loads(msg.value.decode("utf8"))

        # Download archive an parse
        with tempfile.NamedTemporaryFile(delete=True) as tmp_file:
            LOGGER.info("Writing temp file to %s", tmp_file.name)
            response = requests.get(upload_data["url"], stream=True, allow_redirects=True)
            for chunk in response.iter_content(chunk_size=1024):
                if chunk:  # filter out keep-alive new chunks
                    tmp_file.write(chunk)
            tmp_file.flush()
            parser = ArchiveParser(tmp_file.name)
            parse_success = parser.parse()

        if parse_success:
            db_import_system(conn, parser.system_id, upload_data["rh_account"], parser.hostname, upload_data["url"],
                             format_vmaas_request(parser.package_list, parser.repo_list))
            new_upload_msg = {"type": "upload_new_file",
                              "version": 1,
                              "system_id": parser.system_id,
                              "principal": upload_data["principal"],
                              "rh_account": upload_data["rh_account"],
                              "url": upload_data["url"],
                              "hash": upload_data["hash"]
                             }
            vuln_queue.send(new_upload_msg)
            LOGGER.info('Sent vulnerability message: %s', json.dumps(new_upload_msg).encode("utf8"))

if __name__ == '__main__':
    main()
