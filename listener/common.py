"""
Common variables for listener components.
"""
import re
from enum import Enum
from dataclasses import dataclass
import flags

from prometheus_client import Counter

from common.config import Config

CFG = Config()
PROMETHEUS_PORT = CFG.prometheus_port or str(CFG.listener_prometheus_port)

# prometheus metrics only used in old listener
NEW_SYSTEM = Counter('ve_listener_upl_new_system', '# of new systems inserted')
UPDATE_SYSTEM = Counter('ve_listener_upl_update_system', '# of systems updated')
UNCHANGED_SYSTEM = Counter('ve_listener_upl_unchanged_system', '# of system-updates with same vmaas info')
DELETED_UPLOADED = Counter('ve_listener_deleted_uploaded', '# of systems uploaded after being deleted')
UNKNOWN_EVENT_TYPE = Counter('ve_listener_unknown_event_type', '# of msgs with unknown event type')
UNKNOWN_TOPIC = Counter('ve_listener_unknown_topic', '# of msgs received on unsupported topic')

# prometheus metrics
NEW_SYSTEM_INVENTORY = Counter('ve_listener_upl_new_system_inv', '# of new systems inserted from inventory')
NEW_SYSTEM_ADVISOR = Counter('ve_listener_upl_new_system_adv', '# of new systems inserted from advisor')
UPDATE_SYSTEM_INVENTORY = Counter('ve_listener_upl_update_system_inv', '# of systems updated from inventory')
UPDATE_SYSTEM_ADVISOR = Counter('ve_listener_upl_update_system_adv', '# of systems updated from advisor')
DELETED_UPLOADED_INVENTORY = Counter('ve_listener_deleted_uploaded_inv', '# of systems uploaded from inventory after being deleted')
DELETED_UPLOADED_ADVISOR = Counter('ve_listener_deleted_uploaded_adv', '# of systems uploaded from advisor after being deleted')

DELETED_SYSTEM = Counter('ve_listener_deleted_system', '# of systems deleted')
DELETED_SYSTEM_NOT_FOUND = Counter('ve_listener_deleted_system_nf', '# of systems to delete but not found')
UPDATED_SYSTEM = Counter('ve_listener_updated_system', '# of systems updated')
UPDATED_SYSTEM_NOT_FOUND = Counter('ve_listener_updated_system_nf', '# of systems to update but not found')

PROCESS_MESSAGES = Counter('ve_listener_messages_processed', '# of messages processed')
SKIPPED_MESSAGES = Counter('ve_listener_messages_skipped', '# of messages skipped')
MESSAGE_PARSE_ERROR = Counter('ve_listener_message_parse_error', '# of message parse errors')

DATABASE_ERROR = Counter('ve_listener_database_error', '# of database errors')
UPLOAD_NO_RPMDB = Counter('ve_listener_upl_no_rpmdb', '# of systems ignored due to missing rpmdb')

NEW_REPO = Counter('ve_listener_upl_new_repo', '# of new repos inserted')
NEW_RH_ACCOUNT = Counter('ve_listener_upl_new_rh_account', '# of new rh accounts inserted')
NEW_SYSTEM_REPO = Counter('ve_listener_upl_new_system_repo', '# of new system_repo pairs inserted')
DELETED_SYSTEM_REPO = Counter('ve_listener_upl_system_repo_deleted', '# deleted system_repo pairs')

RHUI_PATH_PART = '/rhui/'
REPO_PATH_PATTERN = re.compile("(/content/.*)")
REPO_BASEARCH_PLACEHOLDER = "$basearch"
REPO_RELEASEVER_PLACEHOLDER = "$releasever"


class ImportStatus(flags.Flags):
    """Import to database status."""
    INSERTED = 1
    CHANGED = 2
    UPDATED = 4
    FAILED = 8


class InventoryMsgType(Enum):
    """Inventory message type enum"""
    UNKNOWN = 0
    CREATED = 1
    UPDATED = 2
    DELETE = 3


@dataclass
class InventoryMsg:
    """Represents single inventory message"""
    msg_type: InventoryMsgType
    msg: dict


@dataclass
class AdvisorMsg:
    """Represents single advisor message"""
    msg: dict
