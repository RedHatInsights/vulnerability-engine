"""
Common variables for listener components.
"""
import asyncio
import re
from enum import Enum
from datetime import datetime
import flags

from prometheus_client import Counter

from common.config import Config

CFG = Config()
PROMETHEUS_PORT = CFG.prometheus_port or str(CFG.listener_prometheus_port)

# prometheus metrics
NEW_SYSTEM = Counter('ve_listener_upl_new_system', '# of new systems inserted')
UPDATE_SYSTEM = Counter('ve_listener_upl_update_system', '# of systems updated')
UNCHANGED_SYSTEM = Counter('ve_listener_upl_unchanged_system', '# of system-updates with same vmaas info')
DELETED_SYSTEM = Counter('ve_listener_deleted_system', '# of systems deleted')
DELETED_SYSTEM_NOT_FOUND = Counter('ve_listener_deleted_system_nf', '# of systems to delete but not found')
UPDATED_SYSTEM = Counter('ve_listener_updated_system', '# of systems updated')
UPDATED_SYSTEM_NOT_FOUND = Counter('ve_listener_updated_system_nf', '# of systems to update but not found')
DELETED_UPLOADED = Counter('ve_listener_deleted_uploaded', '# of systems uploaded after being deleted')
PROCESS_MESSAGES = Counter('ve_listener_messages_processed', '# of messages processed')
SKIPPED_MESSAGES = Counter('ve_listener_messages_skipped', '# of messages skipped')
UNKNOWN_EVENT_TYPE = Counter('ve_listener_unknown_event_type', '# of msgs with unknown event type')
UNKNOWN_TOPIC = Counter('ve_listener_unknown_topic', '# of msgs received on unsupported topic')
DATABASE_ERROR = Counter('ve_listener_database_error', '# of database errors')
UPLOAD_NO_RPMDB = Counter('ve_listener_upl_no_rpmdb', '# of systems ignored due to missing rpmdb')
MESSAGE_PARSE_ERROR = Counter('ve_listener_message_parse_error', '# of message parse errors')
NEW_REPO = Counter('ve_listener_upl_new_repo', '# of new repos inserted')
NEW_RH_ACCOUNT = Counter('ve_listener_upl_new_rh_account', '# of new rh accounts inserted')
NEW_SYSTEM_REPO = Counter('ve_listener_upl_new_system_repo', '# of new system_repo pairs inserted')
DELETED_SYSTEM_REPO = Counter('ve_listener_upl_system_repo_deleted', '# deleted system_repo pairs')
INVALID_IDENTITY = Counter('ve_listener_upl_invalid_identity',
                           '# of skipped uploads because of invalid identity')
MISSING_INSIGHTS_ENTITLEMENT = Counter('ve_listener_upl_non_insights_entitlement',
                                       '# of skipped uploads because of entitlement check')

RHUI_PATH_PART = '/rhui/'
REPO_PATH_PATTERN = re.compile("(/content/.*)")
REPO_BASEARCH_PLACEHOLDER = "$basearch"
REPO_RELEASEVER_PLACEHOLDER = "$releasever"


class ImportStatus(flags.Flags):
    """Import to database status."""
    INSERTED = 1
    CHANGED = 2
    UPDATED = 4
    FAILED = 8


class InventoryMsgType(Enum):
    """Inventory message type enum"""
    UNKNOWN = 0
    CREATED = 1
    UPDATED = 2
    DELETE = 3


class QueueItem:
    """Single item in a listener queue"""

    def __init__(self, inventory_msg: dict, inventory_msg_type: InventoryMsgType, advisor_msg: dict):
        """Constructor"""
        self.inventory_msg = inventory_msg
        self.inventory_msg_type = inventory_msg_type
        self.advisor_msg = advisor_msg
        self.second_msg_event = asyncio.Event()
        self.created = datetime.utcnow()


def create_task_and_log(coro, logger, loop):
    # pylint: disable=broad-except
    """Create asyncio task and log its result if its exception"""
    def _log(task):
        try:
            task.result()
        except asyncio.CancelledError:
            pass
        except Exception as exc:
            logger.exception(exc)
    task = loop.create_task(coro)
    task.add_done_callback(_log)
    return task


async def executemany_fetchall(cur) -> []:
    """Fetches everything from executemany result"""
    res = []
    while True:
        for row in await cur.fetchall():
            res.append(row)
        if not cur.nextset():
            return res
