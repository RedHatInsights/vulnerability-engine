"""Module with classes for working with uploaded archives."""

from insights.core import archives, dr
from insights.core.archives import InvalidContentType
from insights.core.context import HostArchiveContext
from insights.core.hydration import create_context
from insights.parsers.installed_rpms import Installed
from insights.parsers.subscription_manager_list import SubscriptionManagerReposListEnabled
from insights.specs import Specs

from common.logging import get_logger

LOGGER = get_logger(__name__)


class ArchiveParser:
    """Class working with uploaded archive."""
    def __init__(self, archive_path):
        self.archive_path = archive_path
        self.package_list = []
        self.repo_list = []
        self.system_id = None
        self.hostname = None

    def parse(self):
        """Parse given archive."""
        success = True
        default_packages = (
            "insights.specs.default",
            "insights.specs.insights_archive",
            "insights.combiners",
            "insights.parsers"
        )
        for pkg in default_packages:
            dr.load_components(pkg)
        broker = dr.Broker()
        try:
            with archives.extract(self.archive_path) as ex:
                ctx = create_context(ex.tmp_dir, HostArchiveContext)
                broker[ctx.__class__] = ctx
                broker = dr.run(components=[Specs.machine_id, Specs.hostname, Installed,
                                            SubscriptionManagerReposListEnabled], broker=broker)
                self.system_id = broker[Specs.machine_id].content[0].strip()
                self.hostname = broker[Specs.hostname].content[0].strip()
                pkglist = broker[Installed]
                for pkgs_by_name in pkglist.packages.values():
                    for pkg in pkgs_by_name:
                        self.package_list.append("%s-%s:%s-%s.%s" % (
                            pkg.name, pkg.epoch, pkg.version, pkg.release, pkg.arch))

                repolist = broker[SubscriptionManagerReposListEnabled]
                for repo_record in repolist.records:
                    self.repo_list.append(repo_record["Repo ID"])
        except (InvalidContentType, KeyError) as err:
            LOGGER.error("Unable to parse archive: %s", err)
            success = False
        return success


def main():
    """Test run of parser."""
    parser = ArchiveParser("./insights-archive.tar.gz")
    parser.parse()
    from utils import format_vmaas_request
    print(format_vmaas_request(parser.package_list, parser.repo_list))

if __name__ == '__main__':
    main()
