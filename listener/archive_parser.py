"""Module with classes for working with uploaded archives."""

from prometheus_client import Counter

from insights.core import archives, dr
from insights.core.context import HostArchiveContext
from insights.core.hydration import create_context
from insights.parsers.dnf_modules import DnfModules
from insights.parsers.installed_rpms import Installed
from insights.parsers.yum_repos_d import YumReposD

from common.logging import get_logger

ARCHIVE_PARSE_COUNT = Counter('ve_listener_arch_parse_calls', '# of archive parse-attempts')
RPMDB_PARSE_FAILURE = Counter('ve_listener_arch_rpmdb_parse_failures',
                              '# of failures to parse package-list from archive')
REPOLIST_PARSE_FAILURE = Counter('ve_listener_arch_repolist_parse_failures',
                                 '# of failures to parse repolist from archive')

LOGGER = get_logger(__name__)

# need to do this workaround since Installed parser crashes in get_max method for these packages
PACKAGE_BLACKLIST = ["gpg-pubkey"]


class ArchiveParser:
    """Class working with uploaded archive."""

    def __init__(self, archive_path):
        self.archive_path = archive_path
        self.package_list = []
        self.repo_list = []
        self.modules_list = []

    @staticmethod
    def _delete_blacklisted_packages(packages):
        for pkg_name in PACKAGE_BLACKLIST:
            if pkg_name in packages:
                del packages[pkg_name]
                LOGGER.debug("Deleted %s from package list.", pkg_name)

    def parse(self):
        # pylint: disable=too-many-branches
        """Parse given archive."""
        ARCHIVE_PARSE_COUNT.inc()
        default_packages = (
            "insights.specs.default",
            "insights.specs.insights_archive",
            "insights.combiners",
            "insights.parsers"
        )
        for pkg in default_packages:
            dr.load_components(pkg)
        broker = dr.Broker()

        with archives.extract(self.archive_path) as ex:
            ctx = create_context(ex.tmp_dir, HostArchiveContext)
            broker[ctx.__class__] = ctx
            broker = dr.run(components=[Installed, DnfModules, YumReposD],
                            broker=broker)

            if Installed in broker:
                pkglist = broker[Installed]
                self._delete_blacklisted_packages(pkglist.packages)
                for pkg_name in pkglist.packages:
                    pkg = pkglist.get_max(pkg_name)
                    self.package_list.append("%s-%s:%s-%s.%s" % (
                        pkg.name, pkg.epoch, pkg.version, pkg.release, pkg.arch))
            else:
                RPMDB_PARSE_FAILURE.inc()
                LOGGER.error("Unable to parse package list from archive.")
                return

            if YumReposD in broker:
                repolist = broker[YumReposD]
                for repo_file in repolist:
                    if repo_file.file_name == 'redhat.repo':
                        for repo in repo_file:
                            if repo_file[repo].get('enabled', '1').lower() in ('1', 'true', 'enabled', 'yes', 'on'):
                                self.repo_list.append(repo)
                        break

            if not self.repo_list:
                REPOLIST_PARSE_FAILURE.inc()
                LOGGER.warning("Unable to parse RHSM repo list from archive.")

            if DnfModules in broker:
                for module in broker[DnfModules]:
                    for module_name in module.sections():
                        self.modules_list.append({'module_name': module_name,
                                                  'module_stream': module.get(module_name, 'stream')})
