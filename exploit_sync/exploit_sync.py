"""
Exploit sync job
"""
import base64
import json

import psycopg2
import requests
from psycopg2.extras import execute_values

from common.config import Config
from common.logging import get_logger
from common.logging import init_logging

CFG = Config()

LOGGER = get_logger(__name__)


def get_conn():
    """Returns DB connection"""
    return psycopg2.connect(
        dbname=CFG.db_name,
        user=CFG.db_user,
        password=CFG.db_pass,
        host=CFG.db_host,
        port=CFG.db_port,
        sslmode=CFG.db_ssl_mode,
        sslrootcert=CFG.db_ssl_root_cert_path,
    )


def sync_exploits():
    """Get exploit data from ProdSec API and store it DB"""
    LOGGER.info("Starting exploit sync job")

    if not CFG.is_fedramp:
        headers = {"Accept": "application/vnd.github+json",
                "Authorization": f"Bearer {CFG.git_token}"}

        res = requests.get(CFG.exploit_file_url, headers=headers)
        if res.status_code != 200:
            LOGGER.error("Can not download exploits.json")
            return
        exploit_data = json.loads(base64.b64decode(res.json()["content"]))
    else:
        LOGGER.info("FedRAMP env, loading exploits from static repo.")
        with open("/engine/vmaas_assets_git/exploits.json", "r") as exploits_file:
            exploit_data = json.load(exploits_file)

    conn = get_conn()
    cur = conn.cursor()

    to_delete_exploits = []
    cur.execute("""SELECT id, cve FROM cve_metadata WHERE exploit_data IS NOT NULL""")
    for cve_id, cve in cur.fetchall():
        if cve not in exploit_data:
            to_delete_exploits.append(cve_id)

    if to_delete_exploits:
        LOGGER.info("Deleting %s exploits", len(to_delete_exploits))
        cur.execute("""UPDATE cve_metadata SET exploit_data = NULL WHERE id IN %s""", (tuple(to_delete_exploits),))

    to_update = [(cve_name, json.dumps(exploit_data[cve_name])) for cve_name in exploit_data]
    if to_update:
        execute_values(cur, """UPDATE cve_metadata AS cm SET exploit_data = v.exploit_data FROM (VALUES %s) AS v(cve, exploit_data) WHERE cm.cve = v.cve""",
                       to_update, template="(%s, %s::jsonb)", page_size=len(to_update))

    conn.commit()

    cur.close()
    conn.close()
    LOGGER.info("Finished exploit sync job")


if __name__ == "__main__":
    init_logging()
    sync_exploits()
