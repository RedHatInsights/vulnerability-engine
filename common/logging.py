"""
Common logging functionality to be used for multiple apps
"""

import logging
import os
import watchtower
from boto3.session import Session
from botocore.exceptions import ClientError

from .config import Config

CFG = Config()


class OneLineExceptionFormatter(logging.Formatter):
    """
    Formatter used to insure each log-entry is one line
    (insures one entry-per-log for some logging environments that divide on newline)
    """

    # pylint: disable=arguments-differ
    def formatException(self, exc_info):
        """
        Make sure exception-tracebacks end up on a single line.
        """
        result = super().formatException(exc_info)
        return repr(result)

    def format(self, record):
        """
        Convert newlines in each record to |
        """
        fmt_str = super().format(record)
        if record.exc_text:
            fmt_str = fmt_str.replace('\n', '') + '|'
        return fmt_str


def setup_cw_logging(main_logger):
    """Setup CloudWatch logging"""
    logger = get_logger(__name__)
    if not CFG.cw_enabled:
        logger.info('CloudWatch logging disabled')
        return
    key_id = CFG.cw_aws_access_key_id
    secret = CFG.cw_aws_secret_access_key
    if not (key_id and secret):
        logger.info('CloudWatch logging disabled due to missing access key')
        return

    session = Session(
        aws_access_key_id=key_id,
        aws_secret_access_key=secret,
        region_name=CFG.cw_aws_region,
    )

    try:
        handler = watchtower.CloudWatchLogHandler(
            boto3_session=session,
            log_group=CFG.cw_aws_log_group,
            stream_name=CFG.hostname,
        )
    except ClientError:
        logger.exception("Unable to enable CloudWatch logging: ")
    else:  # pragma: no cover
        main_logger.addHandler(handler)
        logger.info('CloudWatch logging ENABLED!')


def init_logging(num_servers=1):
    """Setup root logger handler."""
    logger = logging.getLogger()
    log_type = CFG.logging_type
    log_fmt = "%(asctime)s:%(levelname)s:%(name)s:%(message)s"
    if log_type != "OPENSHIFT":
        uuid = os.uname().nodename
        if num_servers > 1:
            uuid += ":%d" % os.getpid()
        log_fmt = "%s %s" % (uuid, log_fmt)
    level = CFG.logging_level_libs
    logger.setLevel(getattr(logging, level, logging.WARNING))
    if not logger.handlers:
        handler = logging.StreamHandler()
        formatter = OneLineExceptionFormatter(log_fmt)
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        setup_cw_logging(logger)


def get_logger(name):
    """
    Set logging level and return logger.
    Don't set custom logging level in root handler to not display debug messages from underlying libraries.
    """
    logger = logging.getLogger(name)
    level = CFG.logging_level_app
    logger.setLevel(getattr(logging, level, logging.INFO))
    return logger
