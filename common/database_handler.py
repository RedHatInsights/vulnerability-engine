"""
Module containing database handler class.
"""
import os
from traceback import extract_tb
from psycopg2.pool import ThreadedConnectionPool
from psycopg2 import InterfaceError, DatabaseError
from common.logging import init_logging, get_logger
from common.config import Config

CFG = Config()
LOGGER = get_logger(__name__)
init_logging()

# Module scope override of DB credentials, used in tests
DB_USER = None
DB_PASS = None
DB_NAME = None
DB_HOST = None
DB_PORT = None


class NamedCursor:
    """Wrapper class for named cursor."""

    def __init__(self, db_connection, name="default"):
        self.cursor = db_connection.cursor(name=name)

    def __enter__(self):
        return self.cursor

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.cursor.close()


class DatabasePoolHandler:
    """Static class maintaining PostgreSQL connection pool."""

    _cfg = Config()
    pool = None
    pool_size = 0
    db_name = None
    db_user = None
    db_pass = None
    db_host = None
    db_port = None

    @classmethod
    def create_connection_pool(cls, size):
        """Create database connections."""
        # DB credentials precedence:
        # module attribute > env variable > shared config (common/config.py)
        cls.db_name = DB_NAME or os.getenv("POSTGRESQL_DATABASE", cls._cfg.db_name)
        cls.db_user = DB_USER or os.getenv('POSTGRESQL_USER', cls._cfg.db_user)
        cls.db_pass = DB_PASS or os.getenv('POSTGRESQL_PASSWORD', cls._cfg.db_pass)
        cls.db_host = DB_HOST or os.getenv("POSTGRESQL_HOST", cls._cfg.db_host)
        cls.db_port = DB_PORT or int(os.getenv("POSTGRESQL_PORT", cls._cfg.db_port))
        cls.pool_size = size
        cls.pool = ThreadedConnectionPool(
            size,
            size,
            database=cls.db_name,
            user=cls.db_user,
            password=cls.db_pass,
            host=cls.db_host,
            port=cls.db_port
        )

    @classmethod
    def get_connection(cls):
        """Get database connection. Create new connection if doesn't exist."""
        return cls.pool.getconn()

    @classmethod
    def return_connection(cls, conn, close=False):
        """Return database connection to pool."""
        cls.pool.putconn(conn, close=close)

    @classmethod
    def close_all_connections(cls):
        """Close all connections."""
        cls.pool.closeall()


class DatabasePool:
    """Context manager for connection pool."""

    def __init__(self, size):
        DatabasePoolHandler.create_connection_pool(size)

    def __enter__(self):
        pass

    def __exit__(self, *_):
        DatabasePoolHandler.close_all_connections()


class DatabasePoolConnection:
    """Context manager for pooled database connection."""

    def __init__(self):
        self.conn = DatabasePoolHandler.get_connection()

    def __enter__(self):
        return self.conn

    def __exit__(self, exception_type, exception_value, traceback):
        DatabasePoolHandler.return_connection(self.conn)
        if exception_type is InterfaceError or exception_type is DatabaseError:
            LOGGER.error("Exception type: %s. Exception value: %s. Traceback: %s", exception_type, exception_value,
                         str(extract_tb(traceback)))
            LOGGER.info("Trying to recover connection...")
            DatabasePoolHandler.create_connection_pool(DatabasePoolHandler.pool_size)
            LOGGER.info("Connection recovered")
            return True
        return False
