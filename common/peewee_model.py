"""
Database to peewee mappings
"""
# pylint: disable=invalid-name
from datetime import datetime
from enum import Enum

from peewee import AutoField
from peewee import BooleanField
from peewee import CharField
from peewee import DateTimeField
from peewee import DecimalField
from peewee import ForeignKeyField
from peewee import IntegerField
from peewee import Model
from peewee import TextField
from peewee import UUIDField
from playhouse.postgres_ext import BinaryJSONField

from .peewee_database import DB
from .peewee_database import DB_READ_REPLICA
from common.config import Config

CFG = Config()


class NotificationType(Enum):
    """Enum representing DB enum for notifications, values are also equal with notifications event types
    for vulnerability"""

    CVSS_NOTIFICATION = "new-cve-cvss"
    SEVERITY_NOTIFICATION = "new-cve-severity"
    RULE_NOTIFICATION = "new-cve-security-rule"
    EXPLOITS_NOTIFICATION = "any-cve-known-exploit"


class VulnerabilityState(Enum):
    """Enum representing how system is vulnerable to cve"""

    NOT_VULNERABLE = "NOT_VULNERABLE"
    VULNERABLE_BY_PACKAGE = "VULNERABLE_BY_PACKAGE"
    VULNERABLE_BY_RULE = "VULNERABLE_BY_RULE"
    VULNERABLE_BY_RULE_AND_PACKAGE = "VULNERABLE_BY_RULE_AND_PACKAGE"
    VULNERABLE_BY_PACKAGE_NOT_RULE = "VULNERABLE_BY_PACKAGE_NOT_RULE"


class UnknownField:
    """UnknownField"""

    def __init__(self, *_, **__):
        pass


class UUIDStrField(UUIDField):
    """UUID field type, which is implicitly casted to str."""

    def python_value(self, value):
        """Additional casting to str"""
        value = super().python_value(value)
        return str(value) if value is not None else None


class EnumField(CharField):
    """Represents postgresql ENUM type"""

    def __init__(self, enum, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.enum = enum

    def db_value(self, value):
        if not value:
            return None
        return value.value

    def python_value(self, value):
        return self.enum(value)


class BaseModel(Model):
    """Base class for tables"""

    class Meta:
        """Base class for table metadata"""

        database = DB

    @classmethod
    def _get_read_replica(cls):
        if DB_READ_REPLICA:
            return DB_READ_REPLICA
        return DB

    @classmethod
    def select(cls, *args, **kwargs):
        # pylint: disable=protected-access
        query = super().select(*args, **kwargs)
        query._database = cls._get_read_replica()
        # LOGGER.info(query._database.connect_params["host"])
        return query

    @classmethod
    def raw(cls, *args, **kwargs):
        # pylint: disable=protected-access
        query = super().raw(*args, **kwargs)
        if query._sql.lower().startswith("select"):
            query._database = cls._get_read_replica()
        return query


class RHAccount(BaseModel):
    """rh_account table"""

    id = AutoField()
    account_number = TextField(null=False, unique=True)
    org_id = TextField(null=True, unique=True)
    cve_cache_from = DateTimeField(null=False)
    last_status_change = DateTimeField(null=False)
    cve_cache_keepalive = DateTimeField(null=False)
    cves_without_errata = BooleanField(null=False, default=True)

    class Meta:
        """rh_account table metadata"""

        table_name = "rh_account"


class SystemPlatform(BaseModel):
    """system_platform table"""

    id = AutoField()
    inventory_id = UUIDStrField(null=False, unique=True)
    display_name = TextField(null=True)
    rh_account_id = ForeignKeyField(column_name="rh_account_id", model=RHAccount, field="id")
    first_reported = DateTimeField(null=False)
    s3_url = TextField(null=True)
    vmaas_json = TextField(null=True)
    json_checksum = TextField(null=True)
    last_updated = DateTimeField(null=False)
    unchanged_since = DateTimeField(null=False)
    last_evaluation = DateTimeField(null=True)
    advisor_evaluated = DateTimeField(null=True)
    opt_out = BooleanField(null=False)
    last_upload = DateTimeField(null=False)
    stale_timestamp = DateTimeField(null=True)
    stale_warning_timestamp = DateTimeField(null=True)
    culled_timestamp = DateTimeField(null=True)
    stale = BooleanField(null=False)
    when_deleted = DateTimeField(null=True)
    advisor_checksum = TextField(null=True)
    advisor_unchanged_since = DateTimeField(null=False)
    cve_count_cache = IntegerField(null=False)
    host_type = TextField(null=True)

    class Meta:
        """system_platform table metadata"""

        table_name = "system_platform"


class CveImpact(BaseModel):
    """cve_impact table"""

    id = AutoField()
    name = TextField(null=False, unique=True)

    class Meta:
        """cve_impact table metadata"""

        table_name = "cve_impact"


class Status(BaseModel):
    """Available status-values table"""

    id = AutoField()
    name = TextField(null=False, unique=True)

    class Meta:
        """status table metadata"""

        table_name = "status"


class BusinessRisk(BaseModel):
    """Available business risk values"""

    id = AutoField()
    name = TextField(null=False, unique=True)

    class Meta:
        """business_risk table metadata"""

        table_name = "business_risk"


class CveMetadata(BaseModel):
    """cve_metadata table"""

    id = AutoField()
    cve = TextField(index=True, null=False, unique=True)
    cvss3_score = DecimalField(index=True, null=True)
    cvss3_metrics = TextField(null=True)
    description = TextField(null=False)
    impact_id = ForeignKeyField(column_name="impact_id", model=CveImpact, field="id")
    public_date = DateTimeField(null=False)
    modified_date = DateTimeField(null=False)
    cvss2_score = DecimalField(index=True, null=True)
    cvss2_metrics = TextField(null=True)
    redhat_url = TextField(null=True)
    secondary_url = TextField(null=True)
    advisories_list = BinaryJSONField(null=True)
    celebrity_name = TextField(column_name="celebrity_name", null=True)
    exploit_data = BinaryJSONField(null=True)

    class Meta:
        """cve_metadata table metadata"""

        table_name = "cve_metadata"


class CveAccountData(BaseModel):
    """cve account data"""

    cve_id = ForeignKeyField(column_name="cve_id", model=CveMetadata, field="id")
    rh_account_id = ForeignKeyField(column_name="rh_account_id", model=RHAccount, field="id")
    business_risk_id = ForeignKeyField(column_name="business_risk_id", model=BusinessRisk, field="id")
    business_risk_text = TextField()
    status_id = ForeignKeyField(column_name="status_id", model=Status, field="id")
    status_text = TextField()

    class Meta:
        """cve_account_data table metadata"""

        table_name = "cve_account_data"
        primary_key = False


class CveAccountCache(BaseModel):
    """cve account cache"""

    rh_account_id = ForeignKeyField(column_name="rh_account_id", model=RHAccount, field="id")
    cve_id = ForeignKeyField(column_name="cve_id", model=CveMetadata, field="id")
    systems_affected = IntegerField(null=False)
    systems_status_divergent = IntegerField(null=False)
    advisory_available = BooleanField()

    class Meta:
        """cve_account_cache table metadata"""

        table_name = "cve_account_cache"
        primary_key = False


class InsightsRule(BaseModel):
    """insights_rule table"""

    id = AutoField()
    name = TextField(null=False, unique=True)
    description_text = TextField()
    summary_text = TextField()
    reason_text = TextField()
    resolution_text = TextField()
    more_info_text = TextField()
    reboot_required = BooleanField()
    playbook_count = IntegerField()
    change_risk = IntegerField()
    kbase_node_id = IntegerField()
    active = BooleanField()
    rule_impact = IntegerField()
    publish_date = DateTimeField()
    rule_only = BooleanField()
    generate_autoplaybook = BooleanField()

    class Meta:
        """table metadata"""

        table_name = "insights_rule"


class Playbook(BaseModel):
    """playbook table"""

    id = AutoField()
    rule_id = ForeignKeyField(column_name="rule_id", model=InsightsRule, field="id")
    description = TextField()
    play = TextField()
    version = TextField()
    insights_need_reboot = BooleanField()
    resolution_type = TextField()

    class Meta:
        """table metadata"""

        table_name = "playbook"


class CveRuleMapping(BaseModel):
    """cve_rule_mapping table"""

    cve_id = ForeignKeyField(column_name="cve_id", model=CveMetadata, field="id")
    rule_id = ForeignKeyField(column_name="rule_id", model=InsightsRule, field="id")

    class Meta:
        """cve_rule_mapping table metadata"""

        table_name = "cve_rule_mapping"


class SystemVulnerabilities(BaseModel):
    """system_vulnerabilities_active table"""

    id = AutoField()
    rh_account_id = ForeignKeyField(column_name="rh_account_id", model=RHAccount, field="id")
    system_id = ForeignKeyField(column_name="system_id", model=SystemPlatform, field="id")
    cve_id = ForeignKeyField(column_name="cve_id", model=CveMetadata, field="id")
    first_reported = DateTimeField(null=False)
    when_mitigated = DateTimeField(null=True)
    status_id = ForeignKeyField(column_name="status_id", model=Status, field="id")
    status_text = TextField()
    rule_id = ForeignKeyField(column_name="rule_id", model=InsightsRule, field="id")
    rule_hit_details = TextField()
    mitigation_reason = TextField()
    advisory_available = BooleanField()
    remediation_type_id = IntegerField()
    advisories = TextField()

    class Meta:
        """system_vulnerabilities_active table metadata"""

        table_name = "system_vulnerabilities_active"


class DbVersion(BaseModel):
    """db_version table"""

    name = TextField(null=False, primary_key=True)
    version = IntegerField(null=False)

    class Meta:
        """db_version table metadata"""

        table_name = "db_version"


class InventoryHosts(BaseModel):
    """inventory.hosts cyndi view"""

    id = UUIDField(null=False, primary_key=True)
    account = CharField(null=False, max_length=10)
    display_name = CharField(null=False, max_length=200)
    created = DateTimeField(null=False)
    updated = DateTimeField(null=False)
    stale_timestamp = DateTimeField(null=False)
    stale_warning_timestamp = DateTimeField(null=False)
    culled_timestamp = DateTimeField(null=False)
    tags = BinaryJSONField(null=False)
    system_profile = BinaryJSONField(null=False)
    insights_id = UUIDField(null=True)
    groups = BinaryJSONField(null=False)

    class Meta:
        """inventory.hosts view metadata"""

        schema = "inventory"
        table_name = "hosts"


class ContentVersion(BaseModel):
    """content_version table"""

    insights_content_vulnerability = TextField(column_name="insights_content_vulnerability")
    insights_content_vulnerability_repo = TextField(column_name="insights_content_vulnerability_repo")
    insights_playbooks = TextField(column_name="insights_playbooks")
    insights_playbooks_repo = TextField(column_name="insights_playbooks_repo")

    class Meta:
        """db_version table metadata"""

        table_name = "content_version"


class Announcement(BaseModel):
    """announcement table"""

    id = AutoField()
    message = TextField(null=False)
    last_updated = DateTimeField(null=False, default=datetime.now)

    class Meta:
        """announcement table metadata"""

        table_name = "announcement"


class RuleAccountCache(BaseModel):
    """rule_account_cache table"""

    rh_account_id = ForeignKeyField(column_name="rh_account_id", model=RHAccount, field="id")
    rule_id = ForeignKeyField(column_name="rule_id", model=InsightsRule, field="id")
    systems_affected = IntegerField(null=False)

    class Meta:
        """rule_account_cache table metadata"""

        table_name = "rule_account_cache"
        primary_key = False


class NotifiedAccounts(BaseModel):
    """notified_accounts table"""

    rh_account_id = ForeignKeyField(column_name="rh_account_id", model=RHAccount, field="id")
    cve_id = ForeignKeyField(column_name="cve_id", model=CveMetadata, field="id")
    notif_type = EnumField(NotificationType, column_name="notif_type", null=False)

    class Meta:
        """notified_accounts table metadata"""

        table_name = "notified_accounts"
        primary_key = False


class PackageName(BaseModel):
    """package_name table"""

    id = AutoField()
    name = TextField(null=False)

    class Meta:
        """package_name table metadata"""

        table_name = "package_name"


class CPE(BaseModel):
    """cpe table"""

    id = AutoField()
    name = TextField(null=False)

    class Meta:
        """cpe table metadata"""

        table_name = "cpe"


class VulnerablePackage(BaseModel):
    """vulnerable_package table"""

    id = AutoField()
    package_name_id = ForeignKeyField(column_name="package_name_id", model=PackageName, field="id")
    cpe_id = ForeignKeyField(column_name="cpe_id", model=CPE, field="id")

    class Meta:
        """vulnerable_package table metadata"""

        table_name = "vulnerable_package"


class VulnerablePackageCVE(BaseModel):
    """vulnerable_package_cve table"""

    id = AutoField()
    vulnerable_package_id = ForeignKeyField(column_name="vulnerable_package_id", model=VulnerablePackage, field="id")
    cve_id = ForeignKeyField(column_name="cve_id", model=CveMetadata, field="id")

    class Meta:
        """vulnerable_package_cve table metadata"""

        table_name = "vulnerable_package_cve"


class SystemVulnerablePackage(BaseModel):
    """system_vulnerable_package table"""

    id = AutoField()
    rh_account_id = ForeignKeyField(column_name="rh_account_id", model=RHAccount, field="id")
    system_id = ForeignKeyField(column_name="system_id", model=SystemPlatform, field="id")
    vulnerable_package_id = ForeignKeyField(column_name="vulnerable_package_id", model=VulnerablePackage, field="id")
    first_reported = DateTimeField(null=False)

    class Meta:
        """system_vulnerable_package table metadata"""

        table_name = "system_vulnerable_package"
