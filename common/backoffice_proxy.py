"""
Backoffice proxy utils.
"""
import os
import tempfile

from common.logging import get_logger
from .utils import external_service_request

LOGGER = get_logger(__name__)

BO_PROXY_HOST = os.getenv('BO_PROXY_HOST', 'http://platform_mock:8000')
BO_PROXY_ENDPOINT_EXPLOITS = '%s/v1/exploits' % BO_PROXY_HOST
BO_PROXY_ENDPOINT_MAIL = '%s/v1/sendEmails' % BO_PROXY_HOST
X_RH_INSIGHTS_ENV = os.getenv('X_RH_INSIGHTS_ENV', 'stage')
X_RH_CLIENTID = os.getenv('X_RH_CLIENTID', 'vulnerability')
X_RH_APITOKEN = os.getenv('X_RH_APITOKEN', 'token')
BOP_CA_CERT = bytes(os.getenv('BOP_CA_CERT', 'cert'), 'utf-8')


def format_headers():
    """
    Formats headers for bo-proxy request
    """
    return {
        'x-rh-apitoken': X_RH_APITOKEN,
        'x-rh-clientid': X_RH_CLIENTID,
        'x-rh-insights-env': X_RH_INSIGHTS_ENV
    }


def create_cert():
    """
    Creates bo-proxy certificate and returns a handle to it
    """
    with tempfile.NamedTemporaryFile(delete=False) as cert:
        cert.write(BOP_CA_CERT)
    return cert


def send_mail(subject: str, body: str, recipients: [str], cc_mails=None, bcc_mails=None, body_type="html"):
    """
    Sends an email using backoffice proxy
    recipients - list of mail addresses
    cc - carbon copy for mail addresses
    bcc - blind carbon copy for mail addresses
    """
    emails = []
    email = {}
    email["subject"] = subject
    email["body"] = body
    email["recipients"] = recipients
    if cc_mails:
        email["ccList"] = cc_mails
    if bcc_mails:
        email["bccList"] = bcc_mails
    email["bodyType"] = body_type

    emails.append(email)

    msg = {}
    msg["emails"] = emails

    headers = format_headers()
    cert = create_cert()

    LOGGER.info("Sending email to: %s", recipients)
    external_service_request(BO_PROXY_ENDPOINT_MAIL, data_json=msg, method='POST', headers=headers, verify=cert.name, timeout=60)
    os.unlink(cert.name)
