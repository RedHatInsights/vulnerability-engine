"""
Backoffice proxy utils.
"""
import os
import tempfile

from common.config import Config
from common.logging import get_logger
from .utils import external_service_request

LOGGER = get_logger(__name__)

CFG = Config()


def format_headers():
    """
    Formats headers for bo-proxy request
    """
    return {
        'x-rh-apitoken': CFG.x_rh_apitoken,
        'x-rh-clientid': CFG.x_rh_clientid,
        'x-rh-insights-env': CFG.x_rh_insights_env
    }


def create_cert():
    """
    Creates bo-proxy certificate and returns a handle to it
    """
    with tempfile.NamedTemporaryFile(delete=False) as cert:
        cert.write(CFG.bop_ca_cert)
    return cert


def send_mail(subject: str, body: str, recipients: [str], cc_mails=None, bcc_mails=None, body_type="html"):
    """
    Sends an email using backoffice proxy
    recipients - list of mail addresses
    cc - carbon copy for mail addresses
    bcc - blind carbon copy for mail addresses
    """
    emails = []
    email = {}
    email["subject"] = subject
    email["body"] = body
    email["recipients"] = recipients
    if cc_mails:
        email["ccList"] = cc_mails
    if bcc_mails:
        email["bccList"] = bcc_mails
    email["bodyType"] = body_type

    emails.append(email)

    msg = {}
    msg["emails"] = emails

    headers = format_headers()
    cert = create_cert()

    LOGGER.info("Sending email to: %s", recipients)
    external_service_request(CFG.bo_proxy_endpoint_mail, data_json=msg, method='POST', headers=headers, verify=cert.name, timeout=60)
    os.unlink(cert.name)
