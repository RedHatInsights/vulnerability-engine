"""
Cache for failed messages
"""

from common.logging import get_logger
from common.utils import on_thread_done

LOGGER = get_logger(__name__)


class FailedCache:
    """Class for failed messages cache"""
    upload_cache = []
    delete_cache = []

    @staticmethod
    def push(cache, elem):
        """Push upload messages to the cache"""
        cache.append(elem)

    @staticmethod
    def clear_cache(cache):
        """Clear cache"""
        if cache:
            cache.clear()

    @classmethod
    def process_failed_cache(cls, cache, executor, func, loop):
        """Process failed messages"""
        if cache:
            type_msg = 'upload' if cache is FailedCache.upload_cache else 'delete'
            LOGGER.info("Start process %s failed %ss", len(cache), type_msg)
            for msg in cache:
                LOGGER.info("Process failed %s: %s", type_msg, msg)
                future = executor.submit(func, msg, loop=loop)
                future.add_done_callback(on_thread_done)
            LOGGER.info("Clear failed cache")
            cls.clear_cache(cache)
