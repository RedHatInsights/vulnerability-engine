"""
Async VMaaS API client
"""
import asyncio
import ssl

import aiohttp

from common.config import Config
from common.logging import get_logger
from common.utils import VMAAS_CNX_ERR
from common.utils import VMAAS_RETURN_ERR

LOGGER = get_logger(__name__)

CFG = Config()


async def vmaas_request(endpoint, data_json=None, method='POST'):
    """Sends request to VMAAS"""
    headers = {'Content-type': 'application/json',
               'Accept': 'application/json'}
    tries = 0
    while True:
        if tries >= CFG.request_retries:
            break
        ssl_ctx = ssl.create_default_context(cafile=CFG.tls_ca_path)
        try:
            async with aiohttp.ClientSession() as session:
                async with session.request(method, endpoint, json=data_json, headers=headers, ssl=ssl_ctx) as response:
                    if response.status == 200:
                        return await response.json()
                    if response.status == 503:
                        LOGGER.info("VMAAS temporarily unavailable, retrying...")
                        await asyncio.sleep(1)
                    else:
                        tries += 1
                        VMAAS_RETURN_ERR.inc()
                        LOGGER.error("Error during request to VMaaS endpoint %s: HTTP %s, %s",
                                     endpoint, response.status, await response.text())
                        if data_json:
                            LOGGER.debug("JSON: %s", str(data_json))
                        # Do not retry for 4xx HTTP codes
                        if 400 <= response.status < 500:
                            break
        except aiohttp.ClientError:
            tries += 1
            VMAAS_CNX_ERR.inc()
            LOGGER.exception("Error calling VMAAS: ")
    return None
