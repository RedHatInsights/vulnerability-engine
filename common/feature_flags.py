"""
Common feature flags with Unleash to be used for multiple apps
"""
import os
from pathlib import Path

from UnleashClient import UnleashClient
from UnleashClient.cache import FileCache

from .config import Config
from common.logging import get_logger

CFG = Config()
APP_NAME = "vulnerability-engine"
LOGGER = get_logger(__name__)


class UnleashClientProxy:
    def __init__(self):
        self._client = None

    def initialize_proxy(self):
        """
        Initializes Unleash client proxy.

        Feature flags can be bootstrapped using `UNLEASH_BOOTSTRAP_FILE` environment
        pointing to a JSON file.  The file must follow Unleash's API /api/client/features
        https://docs.getunleash.io/api/client/features.
        """
        if self._client:
            raise Exception("UnleashClientProxy already initialized")

        try:
            self._client = self._init_unleash_client()
        except Exception:
            LOGGER.exception("Error when initilizing UnleashClient")

    def _init_unleash_client(self):
        cache = None
        if os.environ.get("UNLEASH_BOOTSTRAP_FILE"):
            cache = FileCache(APP_NAME, directory=CFG.unleash_cache_dir)
            cache.bootstrap_from_file(Path(os.environ.get("UNLEASH_BOOTSTRAP_FILE")))
            LOGGER.info("Feature Flags bootstrapped")

        client = UnleashClient(
            url=CFG.unleash_url or "",
            app_name=APP_NAME,
            cache=cache,
            cache_directory=CFG.unleash_cache_dir,
            custom_headers={"Authorization": f"Bearer {CFG.unleash_token}"},
        )

        if CFG.unleash_url:
            client.initialize_client()
            LOGGER.info("Feature Flags initialized using %s", CFG.unleash_url)

        return client

    def is_enabled(self, feature_name, context=None, fallback_function=None):
        if not self._client:
            if fallback_function:
                LOGGER.warning("UnleashClientProxy NOT initialized, defaulting to fallback_function")
                return fallback_function(feature_name, context)
            else:
                LOGGER.warning("UnleashClientProxy NOT initialized, defaulting to False")
                return False

        return self._client.is_enabled(feature_name, context, fallback_function=fallback_function)

    def __getattr__(self, name):
        return getattr(self._client, name)


UNLEASH = UnleashClientProxy()


def initialize_unleash():
    UNLEASH.initialize_proxy()
