"""
Module defines common conditions for queries in manager or other parts.
"""
# pylint: disable=singleton-comparison,superfluous-parens
from peewee import fn, Expression
from psycopg2.extras import Json

from .constants import HostType
from .peewee_model import SystemPlatform, SystemVulnerabilities, InsightsRule


def system_is_active(opt_out=False, stale=False, deleted=False, edge=False, rh_account_id=None):
    """
    Filter out invalid systems from system_platform table.
    Filter by rh_account_id if present.
    Expects table: system_platform
    """

    cond = (SystemPlatform.rh_account_id == rh_account_id)

    if opt_out is not None:
        cond &= (SystemPlatform.opt_out == opt_out)

    if stale is not None:
        cond &= (SystemPlatform.stale == stale)

    if deleted is not None:
        cond &= (SystemPlatform.when_deleted.is_null(not deleted))

    if edge is not None:
        if edge:
            cond &= (fn.COALESCE(SystemPlatform.host_type, "null") == HostType.EDGE)
        else:
            cond &= (SystemPlatform.host_type.is_null(True))

    return cond


def system_has_vmaas_hit():
    """
    Filter system-cve hit only by vmaas evaluation
    Expects table: system_vulnerabilities
    """
    return (SystemVulnerabilities.when_mitigated.is_null(True))


def system_is_abnv():
    """
    Filter system-cve hit only by vmaas but not insights rule (affected but not vulnerable)
    Expects table: system_vulnerabilities, insights_rule
    """
    return (SystemVulnerabilities.when_mitigated.is_null(True)) & \
           (InsightsRule.active == True) & \
           (SystemVulnerabilities.mitigation_reason.is_null(False))


def system_has_rule_hit(rule_subselect=True):
    """
    Filter system-cve hit only by insights rule evaluation
    Expects table: system_vulnerabilities
    Uses table: insights_rule
    """
    if rule_subselect:
        return (SystemVulnerabilities.mitigation_reason.is_null(True)) & \
               (SystemVulnerabilities.rule_id << InsightsRule.select(InsightsRule.id)
                                                             .where((InsightsRule.active == True) &
                                                                    (InsightsRule.rule_only == False)))
    return (SystemVulnerabilities.mitigation_reason.is_null(True)) & \
           (InsightsRule.active == True) & \
           (InsightsRule.rule_only == False)


def system_is_vulnerable(rule_subselect=True):
    """
    Filter system-cve hit by both vmaas and insights rule
    Expects table: system_vulnerabilities
    Uses table: insights_rule
    """
    return system_has_vmaas_hit() | (system_has_rule_hit(rule_subselect=rule_subselect))


def is_not_empty_list(column):
    """ Peewee expression returning all JSONB rows except empty lists """
    return Expression(column, '<>', Json([]))


def is_empty_list(column):
    """ Peewee expression returning all JSONB rows with empty lists """
    return Expression(column, '=', Json([]))
