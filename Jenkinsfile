pipeline {
    agent { label 'insights' }
    options {
        timestamps()
    }

    stages {
        stage('Initial setup') {
            steps {
                sh '''
                    source ./ci/functions.sh
                    set_label_flags

                    > stage_flags
                    echo "RELEASE_NAMESPACE:$RELEASE_NAMESPACE" >> stage_flags
                    echo "SKIP_DEPLOY_EPHEMERAL:$SKIP_DEPLOY_EPHEMERAL" >> stage_flags
                    echo "SKIP_IMAGE_BUILD:$SKIP_IMAGE_BUILD" >> stage_flags
                    echo "SKIP_SMOKE_TEST:$SKIP_SMOKE_TEST" >> stage_flags
                '''
                script {
                    FILE_CONTENTS = readFile('stage_flags')
                    my_var_map = [:]
                    my_vars = FILE_CONTENTS.split()
                    for (i in my_vars) {
                        s=i.split(':')
                        if (s.length == 2) {
                            my_var_map[s[0]] = s[1]
                        } else {
                            my_var_map[s[0]] = ""
                        }
                    }

                    env.RELEASE_NAMESPACE = my_var_map['RELEASE_NAMESPACE']
                    env.SKIP_BUILD = my_var_map['SKIP_BUILD']
                    env.SKIP_DEPLOY_EPHEMERAL = my_var_map['SKIP_DEPLOY_EPHEMERAL']
                    env.SKIP_IMAGE_BUILD = my_var_map['SKIP_IMAGE_BUILD']
                    env.SKIP_SMOKE_TEST = my_var_map['SKIP_SMOKE_TEST']
                }
            }
        }

        stage('Build test image') {
            when {
                expression {
                    return (! env.SKIP_IMAGE_BUILD)
                }
            }
            steps {
                script {
                    withVault([configuration: configuration, vaultSecrets: secrets]) {
                        sh '''
                            ./ci/functions.sh

                            echo "Install bonfire repo/initialize, creating PR image"
                            run_build_image_stage
                        '''
                    }
                }
            }
        }

        stage('Run Smoke Tests') {
            when {
                expression {
                    return (! env.SKIP_SMOKE_TEST)
                }
            }
            steps {
                script {
                    withVault([configuration: configuration, vaultSecrets: secrets]) {
                        sh '''
                            source ./ci/functions.sh

                            echo "running PR smoke tests"
                            set +e
                            process_requirements_labels
                            set -e
                            deploy_ephemeral_stage
                            run_smoke_tests_stage
                        '''
                    }
                }
            }
        }
    }
}
