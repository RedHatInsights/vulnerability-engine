def secrets = [
    [path: params.VAULT_PATH_SVC_ACCOUNT_EPHEMERAL, engineVersion: 1, secretValues: [
        [envVar: 'OC_LOGIN_TOKEN_DEV', vaultKey: 'oc-login-token-dev'],
        [envVar: 'OC_LOGIN_SERVER_DEV', vaultKey: 'oc-login-server-dev']]],
    [path: params.VAULT_PATH_QUAY_PUSH, engineVersion: 1, secretValues: [
        [envVar: 'QUAY_USER', vaultKey: 'user'],
        [envVar: 'QUAY_TOKEN', vaultKey: 'token']]],
    [path: params.VAULT_PATH_RHR_PULL, engineVersion: 1, secretValues: [
        [envVar: 'RH_REGISTRY_USER', vaultKey: 'user'],
        [envVar: 'RH_REGISTRY_TOKEN', vaultKey: 'token']]],
    [path: params.VAULT_PATH_QUAY_TOKEN, engineVersion: 1, secretValues: [
        [envVar: 'QUAY_API_TOKEN', vaultKey: 'api-token']]]
]

def configuration = [vaultUrl: params.VAULT_ADDRESS, vaultCredentialId: params.VAULT_CREDS_ID, engineVersion: 1]

def NAMESPACE

pipeline {
    agent { label 'insights' }
    options {
        timestamps()
    }

    environment {
        APP_NAME="vulnerability"  // name of app-sre "application" folder this component lives in
        COMPONENT_NAME="vulnerability-engine"  // name of app-sre "resourceTemplate" in deploy.yaml for this component
        IMAGE="quay.io/cloudservices/vulnerability-engine-app"
        COMPONENTS_W_RESOURCES="vmaas rbac"
        CACHE_FROM_LATEST_IMAGE="true"

        IQE_PLUGINS="vulnerability"
        IQE_MARKER_EXPRESSION="smoke and api"
        IQE_FILTER_EXPRESSION="not (advisories or patch or remediation_manual or test_dash or test_edge_leak or test_executive_report)"
        IQE_REQUIREMENTS_PRIORITY=""
        IQE_TEST_IMPORTANCE=""
        IQE_CJI_TIMEOUT="60m"
        DEPLOY_TIMEOUT=900

        // Heavily inspired by project-koku pr_check
        // https://github.com/project-koku/koku/blob/main/pr_check.sh
        LABELS_DIR="$WORKSPACE/github_labels"
        ARTIFACTS_DIR="$WORKSPACE/artifacts"

        GITHUB_API_ROOT='https://api.github.com/repos/redhatinsights/vulnerability-engine'
    }

    stages {
        stage('Initial setup') {
            steps {
                sh '''
                    source "ci/functions.sh"
                    set_label_flags

                    > stage_flags
                    echo "RELEASE_NAMESPACE:$RELEASE_NAMESPACE" >> stage_flags
                    echo "SKIP_DEPLOY_EPHEMERAL:$SKIP_DEPLOY_EPHEMERAL" >> stage_flags
                    echo "SKIP_IMAGE_BUILD:$SKIP_IMAGE_BUILD" >> stage_flags
                    echo "SKIP_SMOKE_TEST:$SKIP_SMOKE_TEST" >> stage_flags
                '''
                script {
                    FILE_CONTENTS = readFile('stage_flags')
                    my_var_map = [:]
                    my_vars = FILE_CONTENTS.split()
                    for (i in my_vars) {
                        s=i.split(':')
                        if (s.length == 2) {
                            my_var_map[s[0]] = s[1]
                        } else {
                            my_var_map[s[0]] = ""
                        }
                    }

                    env.RELEASE_NAMESPACE = my_var_map['RELEASE_NAMESPACE']
                    env.SKIP_BUILD = my_var_map['SKIP_BUILD']
                    env.SKIP_IMAGE_BUILD = my_var_map['SKIP_IMAGE_BUILD']
                    env.SKIP_DEPLOY_EPHEMERAL = my_var_map['SKIP_DEPLOY_EPHEMERAL']
                    env.SKIP_SMOKE_TEST = my_var_map['SKIP_SMOKE_TEST']
                }
            }
        }

        stage('Build test image') {
            when {
                expression {
                    return (! env.SKIP_IMAGE_BUILD)
                }
            }
            steps {
                script {
                    withVault([configuration: configuration, vaultSecrets: secrets]) {
                        sh '''
                            source ./ci/functions.sh

                            echo "Install bonfire repo/initialize, creating PR image"
                            run_build_image_stage
                        '''
                    }
                }
            }
        }

        stage('Deploy Ephemeral Environment') {
            when {
                expression {
                    return (! env.SKIP_DEPLOY_EPHEMERAL)
                }
            }

            steps {
                script {
                    withVault([configuration: configuration, vaultSecrets: secrets]) {
                        sh '''
                            source ./ci/functions.sh
                            RELEASE_NAMESPACE="false"
                            deploy_ephemeral_stage

                            > reserved_ephemeral_namespace
                            echo "$NAMESPACE" >> reserved_ephemeral_namespace
                            echo Namespace reserved: ${NAMESPACE}
                            cat reserved_ephemeral_namespace
                        '''

                        stash includes: 'reserved_ephemeral_namespace', name: 'reservedNamespace'
                    }
                }
            }
        }

        stage('Run Smoke Tests') {
            when {
                expression {
                    return (! env.SKIP_SMOKE_TEST)
                }
            }
            steps {
                // script {
                //     withVault([configuration: configuration, vaultSecrets: secrets]) {
                //         unstash 'reservedNamespace'
                //         NAMESPACE = readFile('reserved_ephemeral_namespace')
                //         print("NAMESPACE:"+NAMESPACE)
                //         sh '''
                //             echo "Reserved namespace is $NAMESPACE"
                //             export NAMESPACE=$NAMESPACE
                //             source ./ci/functions.sh

                //             set +e
                //             process_requirements_labels
                //             set -e

                //             echo "running PR smoke tests"                          
                //             run_smoke_tests_stage
                //         '''
                //     }
                // }

                withVault([configuration: configuration, vaultSecrets: secrets]) {
                    script {
                            unstash 'reservedNamespace'
                            NAMESPACE = readFile('reserved_ephemeral_namespace')
                            print("NAMESPACE:"+NAMESPACE)
                    }
                    sh '''
                    echo "Reserved namespace is $NAMESPACE"
                    export NAMESPACE=$NAMESPACE
                    source ./ci/functions.sh
                    set +e
                    process_requirements_labels
                    set -e
                    echo "running PR smoke tests"                          
                    run_smoke_tests_stage
                    '''
                }
            }
        }
    }
}
