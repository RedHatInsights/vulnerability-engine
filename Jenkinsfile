def secrets = [
    [path: params.VAULT_PATH_SVC_ACCOUNT_EPHEMERAL, secretValues: [
        [envVar: 'OC_LOGIN_TOKEN_DEV', vaultKey: 'oc-login-token-dev'],
        [envVar: 'OC_LOGIN_SERVER_DEV', vaultKey: 'oc-login-server-dev'],
        [envVar: 'OC_LOGIN_TOKEN', vaultKey: 'oc-login-token'],
        [envVar: 'OC_LOGIN_SERVER', vaultKey: 'oc-login-server']]],
    [path: params.VAULT_PATH_QUAY_PUSH, secretValues: [
        [envVar: 'QUAY_USER', vaultKey: 'user'],
        [envVar: 'QUAY_TOKEN', vaultKey: 'token']]],
    [path: params.VAULT_PATH_RHR_PULL, secretValues: [
        [envVar: 'RH_REGISTRY_USER', vaultKey: 'user'],
        [envVar: 'RH_REGISTRY_TOKEN', vaultKey: 'token']]],
    [path: params.VAULT_PATH_QUAY_TOKEN, secretValues: [
        [envVar: 'QUAY_API_TOKEN', vaultKey: 'api-token']]]
]

def configuration = [vaultUrl: params.VAULT_ADDRESS, vaultCredentialId: params.VAULT_CREDS_ID]

def NAMESPACE

pipeline {
    agent { label 'rhel8' }
    options {
        timestamps()
    }

    environment {
        APP_NAME="vulnerability"  // name of app-sre "application" folder this component lives in
        COMPONENT_NAME="vulnerability-engine"  // name of app-sre "resourceTemplate" in deploy.yaml for this component
        IMAGE="quay.io/cloudservices/vulnerability-engine-app"
        COMPONENTS_W_RESOURCES="vmaas rbac"
        CACHE_FROM_LATEST_IMAGE="true"

        IQE_PLUGINS="vulnerability"
        IQE_MARKER_EXPRESSION="smoke and api"
        IQE_FILTER_EXPRESSION="not (advisories or patch or remediation_manual or test_edge_leak or test_invalid_rpm_list)"
        IQE_REQUIREMENTS_PRIORITY=""
        IQE_TEST_IMPORTANCE=""
        IQE_CJI_TIMEOUT="60m"
        DEPLOY_TIMEOUT=900

        // Heavily inspired by project-koku pr_check
        // https://github.com/project-koku/koku/blob/main/pr_check.sh
        LABELS_DIR="$WORKSPACE/github_labels"
        ARTIFACTS_DIR="$WORKSPACE/artifacts"
        GITHUB_API_ROOT='https://api.github.com/repos/redhatinsights/vulnerability-engine'
    }

    stages {
        stage("one stage") {
          stages {
               stage("build") {
                   steps {
                       sh '''
                       export BUILDING=1
                       export TESTING=0
                       echo 'Building...'
                       mkdir -p artifacts/foo/bar/baz
                       echo "stuff" > artifacts/artifact1.txt
                       echo "stuff" > artifacts/foo/artifact2.txt
                       echo "stuff" > artifacts/foo/bar/artifact3.txt
                       echo "stuff" > artifacts/foo/bar/baz/artifact4.txt
                       echo "BUILDING: $BUILDING, TESTING: $TESTING"
                       '''
                   }
               }
               stage("test") {
                   steps {
                       sh '''
                       export TESTING=1
                       echo "BUILDING: $BUILDING, TESTING: $TESTING"
                       '''
                   }
               }
            }
            post {
                success {
                    stash name: "artifacts", includes: "artifacts/**/*"
                }
            }
        }
    }
}
