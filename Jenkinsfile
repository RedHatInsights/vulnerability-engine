def secrets = [
    [path: params.VAULT_PATH_SVC_ACCOUNT_EPHEMERAL, engineVersion: 1, secretValues: [
        [envVar: 'OC_LOGIN_TOKEN_DEV', vaultKey: 'oc-login-token-dev'],
        [envVar: 'OC_LOGIN_SERVER_DEV', vaultKey: 'oc-login-server-dev']]],
    [path: params.VAULT_PATH_QUAY_PUSH, engineVersion: 1, secretValues: [
        [envVar: 'QUAY_USER', vaultKey: 'user'],
        [envVar: 'QUAY_TOKEN', vaultKey: 'token']]],
    [path: params.VAULT_PATH_RHR_PULL, engineVersion: 1, secretValues: [
        [envVar: 'RH_REGISTRY_USER', vaultKey: 'user'],
        [envVar: 'RH_REGISTRY_TOKEN', vaultKey: 'token']]],
    [path: params.VAULT_PATH_QUAY_TOKEN, engineVersion: 1, secretValues: [
        [envVar: 'QUAY_API_TOKEN', vaultKey: 'api-token']]]

]

def configuration = [vaultUrl: params.VAULT_ADDRESS, vaultCredentialId: params.VAULT_CREDS_ID, engineVersion: 1]

pipeline {
    agent { label 'insights' }
    options {
        timestamps()
    }

    environment {
        APP_NAME="vulnerability"  // name of app-sre "application" folder this component lives in
        COMPONENT_NAME="vulnerability-engine"  // name of app-sre "resourceTemplate" in deploy.yaml for this component
        IMAGE="quay.io/cloudservices/vulnerability-engine-app"
        COMPONENTS_W_RESOURCES="vmaas rbac"
        CACHE_FROM_LATEST_IMAGE="true"

        export IQE_PLUGINS="vulnerability"
        export IQE_MARKER_EXPRESSION="smoke and api"
        export IQE_FILTER_EXPRESSION="not (advisories or patch or remediation_manual or test_dash or test_edge_leak or test_executive_report)"
        export IQE_REQUIREMENTS_PRIORITY=""
        export IQE_TEST_IMPORTANCE=""
        export IQE_CJI_TIMEOUT="60m"
        export DEPLOY_TIMEOUT=900


        // Heavily inspired by project-koku pr_check
        // https://github.com/project-koku/koku/blob/main/pr_check.sh
        LABELS_DIR="$WORKSPACE/github_labels"
        ARTIFACTS_DIR="$WORKSPACE/artifacts"

        RELEASE_NAMESPACE=true
    }

    stages {
   stages {
        stage('Initial setup') {
            steps {
                sh '''
                    source ./ci/functions.sh

                    mkdir -p $LABELS_DIR
                    mkdir -p $ARTIFACTS_DIR

                    get_pr_labels

                    set_label_flags
                '''
            }
        }

        stage('Run PR check') {
            when {
                expression {
                    return env.SKIP_PR_CHECK != 'true'
                }
            }
            stages {
                stage('Build test image') {
                    when {
                        expression {
                            return env.SKIP_IMAGE_BUILD != 'true'
                        }
                    }
                    steps {
                        script {
                            withVault([configuration: configuration, vaultSecrets: secrets]) {
                                sh '''
                                    source ./ci/functions.sh

                                    #set_IQE_filter_expressions
                                    
                                    echo "$IQE_MARKER_EXPRESSION"
                                    echo "$IQE_FILTER_EXPRESSION"

                                    echo "Install bonfire repo/initialize, creating PR image"
                                    run_build_image
                                '''
                            }
                        }
                    }
                }   

                stage('Run Smoke Tests') {
                    when {
                        expression {
                            return env.SKIP_SMOKE_TESTS != 'true'
                        }
                    }
                    steps {
                        script {
                            withVault([configuration: configuration, vaultSecrets: secrets]) {
                                sh '''
                                    source ./ci/functions.sh
                                    run_smoke_tests
                                '''
                            }
                        }
                    }
                }
            }
        }
    }
}
