def secrets = [
    [path: params.VAULT_PATH_SVC_ACCOUNT_EPHEMERAL, engineVersion: 1, secretValues: [
        [envVar: 'OC_LOGIN_TOKEN_DEV', vaultKey: 'oc-login-token-dev'],
        [envVar: 'OC_LOGIN_SERVER_DEV', vaultKey: 'oc-login-server-dev']]],
    [path: params.VAULT_PATH_QUAY_PUSH, engineVersion: 1, secretValues: [
        [envVar: 'QUAY_USER', vaultKey: 'user'],
        [envVar: 'QUAY_TOKEN', vaultKey: 'token']]],
    [path: params.VAULT_PATH_RHR_PULL, engineVersion: 1, secretValues: [
        [envVar: 'RH_REGISTRY_USER', vaultKey: 'user'],
        [envVar: 'RH_REGISTRY_TOKEN', vaultKey: 'token']]],
    [path: params.VAULT_PATH_QUAY_TOKEN, engineVersion: 1, secretValues: [
        [envVar: 'QUAY_API_TOKEN', vaultKey: 'api-token']]]

]

def configuration = [vaultUrl: params.VAULT_ADDRESS, vaultCredentialId: params.VAULT_CREDS_ID, engineVersion: 1]

pipeline {
    agent { label 'insights' }
    options {
        timestamps()
    }

    environment {
        APP_NAME="vulnerability"  // name of app-sre "application" folder this component lives in
        COMPONENT_NAME="vulnerability-engine"  // name of app-sre "resourceTemplate" in deploy.yaml for this component
        IMAGE="quay.io/cloudservices/vulnerability-engine-app"
        COMPONENTS_W_RESOURCES="vmaas rbac"
        CACHE_FROM_LATEST_IMAGE="true"

        export IQE_PLUGINS="vulnerability"
        export IQE_MARKER_EXPRESSION="smoke and api"
        export IQE_FILTER_EXPRESSION="not (advisories or patch or remediation_manual or test_dash or test_edge_leak or test_executive_report)"
        export IQE_REQUIREMENTS_PRIORITY=""
        export IQE_TEST_IMPORTANCE=""
        export IQE_CJI_TIMEOUT="60m"
        export DEPLOY_TIMEOUT=900


        // Heavily inspired by project-koku pr_check
        // https://github.com/project-koku/koku/blob/main/pr_check.sh
        LABELS_DIR="$WORKSPACE/github_labels"
        ARTIFACTS_DIR="$WORKSPACE/artifacts"

        RELEASE_NAMESPACE=true
    }

    stages {
        stage('Initial setup') {
            steps {
                sh '''
                    curl -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/search/issues\?q\=sha:$ghprbActualCommit | jq '.items[].labels[].name' > $LABELS_DIR/github_labels.txt
                    
                    mkdir -p $ARTIFACTS_DIR

                    if [ egrep 'keep-namespace' ${LABELS_DIR}/github_labels.txt &>/dev/null]; then
                        RELEASE_NAMESPACE=false
                    fi
                '''
            }
        }

        stage('Build image') {
            when {
                expression {
                    sh(script: "egrep 'skip-build' ${LABELS_DIR}/github_labels.txt || true", returnStdout: true) == true
                }
            }
            steps {
                sh '''
                    # Install bonfire repo/initialize
                    CICD_URL=https://raw.githubusercontent.com/RedHatInsights/bonfire/master/cicd
                    curl -s $CICD_URL/bootstrap.sh > .cicd_bootstrap.sh && source ./.cicd_bootstrap.sh
                    echo "creating PR image"
                    source $CICD_ROOT/build.sh
                '''
            }
        }

        stage('Deploying to ephemeral') {
            when {
                expression {
                    sh(script: "egrep 'skip-deploy' ${LABELS_DIR}/github_labels.txt || true", returnStdout: true) == true
                }
            }
            steps {
                sh '''
                    # Install bonfire repo/initialize
                    CICD_URL=https://raw.githubusercontent.com/RedHatInsights/bonfire/master/cicd
                    curl -s $CICD_URL/bootstrap.sh > .cicd_bootstrap.sh && source ./.cicd_bootstrap.sh
                    source $CICD_ROOT/deploy_ephemeral_env.sh

                '''
            }
        }

        stage('Smoke Test') {
            when {
                expression {
                    sh(script: "egrep 'skip-tests' ${LABELS_DIR}/github_labels.txt || true", returnStdout: true) == true
                }
            }
            steps {
                sh '''
                    CICD_URL=https://raw.githubusercontent.com/RedHatInsights/bonfire/master/cicd
                    curl -s $CICD_URL/bootstrap.sh > .cicd_bootstrap.sh && source ./.cicd_bootstrap.sh
                    source $CICD_ROOT/cji_smoke_test.sh
                '''
            }
        }
    }

    post {
        failure {
            sh '''
                echo "PR check failed"
                cat << EOF > $WORKSPACE/artifacts/junit-pr_check.xml
                <?xml version="1.0" encoding="UTF-8" ?>
                <testsuite id="pr_check" name="PR Check" tests="1" failures="0">
                    <testcase id="pr_check.${task_arr[$exit_code]}" name="${task_arr[$exit_code]}">
                    </testcase>
                </testsuite>
                EOF
            '''
        }
        always {
            cp $LABELS_DIR/github_labels.txt $ARTIFACTS_DIR/github_labels.txt

            archiveArtifacts artifacts: 'artifacts/**/*', fingerprint: true
            junit skipPublishingChecks: true, testResults: 'artifacts/junit-*.xml'
        }
    }
}
