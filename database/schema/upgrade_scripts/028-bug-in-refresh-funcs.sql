CREATE OR REPLACE FUNCTION refresh_account_cached_counts(rh_account_in varchar)
  RETURNS void AS
$refresh_account_cached_counts$
  DECLARE
    rh_account_id_in INT;
  BEGIN
    -- update cve count for ordered systems
    SELECT id FROM rh_account WHERE name = rh_account_in INTO rh_account_id_in;
    WITH to_update_systems AS (
      SELECT sp.id
      FROM system_platform sp
      WHERE sp.rh_account_id = rh_account_id_in
      ORDER BY sp.id
      FOR UPDATE OF sp
    )
    UPDATE system_platform sp SET cve_count_cache = (
      SELECT COUNT(cve_id) FROM system_vulnerabilities sv
      WHERE sv.system_id = sp.id AND sv.when_mitigated IS NULL
    )
    FROM to_update_systems
    WHERE sp.id = to_update_systems.id;

    -- update system count for ordered cves
    WITH locked_rows AS (
      SELECT cad.cve_id
      FROM cve_account_data cad
      WHERE cad.rh_account_id = rh_account_id_in
      ORDER BY cad.cve_id
      FOR UPDATE OF cad
    ), current_counts AS (
      SELECT sv.cve_id, count(sv.system_id) as systems_affected
      FROM system_vulnerabilities sv INNER JOIN
           system_platform sp ON sv.system_id = sp.id
      WHERE sp.last_evaluation IS NOT NULL AND
            sp.opt_out = FALSE AND
            sv.when_mitigated IS NULL AND
            sp.rh_account_id = rh_account_id_in
      GROUP BY sv.cve_id
    ), upserted AS (
      INSERT INTO cve_account_data (cve_id, rh_account_id, systems_affected)
        SELECT cve_id, rh_account_id_in, systems_affected FROM current_counts
      ON CONFLICT (cve_id, rh_account_id) DO UPDATE SET
        systems_affected = EXCLUDED.systems_affected
    )
    DELETE FROM cve_account_data WHERE cve_id NOT IN (SELECT cve_id FROM current_counts)
      AND rh_account_id = rh_account_id_in;
  END;
$refresh_account_cached_counts$
  LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION refresh_cve_account_cached_counts(cve_in varchar, rh_account_in varchar)
  RETURNS void AS
$refresh_cve_account_cached_counts$
  DECLARE
    cve_md_id INT;
    rh_account_id_in INT;
  BEGIN
    -- update system count for ordered cves
    SELECT id FROM cve_metadata WHERE cve = cve_in INTO cve_md_id;
    SELECT id FROM rh_account WHERE name = rh_account_in INTO rh_account_id_in;
    WITH locked_rows AS (
      SELECT cad.rh_account_id, cad.cve_id
      FROM cve_account_data cad
      WHERE cad.cve_id = cve_md_id AND
            cad.rh_account_id = rh_account_id_in
      FOR UPDATE OF cad
    ), current_counts AS (
      SELECT sv.cve_id, sp.rh_account_id, count(sv.system_id) as systems_affected
      FROM system_vulnerabilities sv INNER JOIN
           system_platform sp ON sv.system_id = sp.id
      WHERE sp.last_evaluation IS NOT NULL AND
            sp.opt_out = FALSE AND
            sv.when_mitigated IS NULL AND
            sv.cve_id = cve_md_id AND
            sp.rh_account_id = rh_account_id_in
      GROUP BY sv.cve_id, sp.rh_account_id
    ), upserted AS (
      INSERT INTO cve_account_data (cve_id, rh_account_id, systems_affected)
        SELECT cve_md_id, rh_account_id_in, systems_affected FROM current_counts
      ON CONFLICT (cve_id, rh_account_id) DO UPDATE SET
        systems_affected = EXCLUDED.systems_affected
    )
    DELETE FROM cve_account_data WHERE NOT EXISTS (SELECT 1 FROM current_counts)
      AND cve_id = cve_md_id
      AND rh_account_id = rh_account_id_in;
  END;
$refresh_cve_account_cached_counts$
  LANGUAGE 'plpgsql';
