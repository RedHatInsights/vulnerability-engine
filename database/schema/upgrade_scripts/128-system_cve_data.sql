-- system_cve_data
CREATE TABLE IF NOT EXISTS system_cve_data (
  system_id BIGINT NOT NULL,
  cve_id BIGINT NOT NULL,
  status_id INT NOT NULL DEFAULT 0,
  status_text TEXT,
  CONSTRAINT system_id
    FOREIGN KEY (system_id)
    REFERENCES system_platform (id),
  CONSTRAINT cve_id
    FOREIGN KEY (cve_id)
    REFERENCES cve_metadata (id),
  CONSTRAINT status_id
    FOREIGN KEY (status_id)
    REFERENCES status (id),
  UNIQUE (system_id, cve_id)
) TABLESPACE pg_default;

-- for CVE deletion
CREATE INDEX ON system_cve_data(cve_id);

GRANT SELECT, INSERT, UPDATE, DELETE ON system_cve_data TO ve_db_user_manager;
GRANT DELETE ON system_cve_data TO ve_db_user_taskomatic;
GRANT DELETE ON system_cve_data TO ve_db_user_vmaas_sync;

-- user for evaluator component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_evaluator;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_evaluator;

-- user for listener component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_listener;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_listener;

-- user for UI manager component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_manager;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_manager;
GRANT INSERT, DELETE ON announcement TO ve_db_user_manager;

-- user for VMaaS sync component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_vmaas_sync;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_vmaas_sync;

-- user for taskomatic service
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_taskomatic;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_taskomatic;

-- user for advisor listener
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_advisor_listener;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_advisor_listener;

-- user for notificator
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_notificator;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_notificator;

-- replace system delete function
CREATE OR REPLACE FUNCTION delete_system(inventory_id_in UUID)
  RETURNS TABLE (deleted_inventory_id UUID) AS
$delete_system$
  DECLARE
    system_id_in INT;
    rh_account_id_in INT;
  BEGIN
    -- opt out to refresh cache and then delete
    SELECT id, rh_account_id FROM system_platform WHERE inventory_id = inventory_id_in INTO system_id_in, rh_account_id_in FOR UPDATE;
    UPDATE system_platform SET opt_out = true WHERE id = system_id_in;
    DELETE FROM system_vulnerabilities WHERE system_id = system_id_in AND rh_account_id = rh_account_id_in;
    DELETE FROM system_vulnerable_package WHERE system_id = system_id_in AND rh_account_id = rh_account_id_in;
    DELETE FROM system_repo WHERE system_id = system_id_in;
    DELETE FROM system_cve_data WHERE system_id = system_id_in;
    RETURN QUERY DELETE FROM system_platform WHERE id = system_id_in RETURNING inventory_id;
  END;
$delete_system$
  LANGUAGE 'plpgsql';
