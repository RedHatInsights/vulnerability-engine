ALTER TABLE system_platform ADD stale BOOLEAN NOT NULL DEFAULT FALSE;

CREATE TRIGGER system_platform_stale_cache
  AFTER UPDATE OF stale ON system_platform
  FOR EACH ROW EXECUTE PROCEDURE opt_out_system_update_cache();

CREATE OR REPLACE FUNCTION opt_out_system_update_cache()
  RETURNS TRIGGER AS
$opt_out_system_update_cache$
  BEGIN
    IF (TG_OP = 'UPDATE') AND NEW.last_evaluation IS NOT NULL THEN
      -- system opted out
      IF OLD.opt_out = FALSE AND OLD.stale = FALSE AND (NEW.opt_out = TRUE OR NEW.stale = TRUE) THEN
        -- decrement affected cve counts for system
        WITH to_update_cves AS (
          SELECT cad.cve_id, cad.status_id AS global_status_id, sv.status_id
          FROM cve_account_data cad INNER JOIN
               system_vulnerabilities sv ON cad.cve_id = sv.cve_id
          WHERE cad.rh_account_id = NEW.rh_account_id AND
                sv.system_id = NEW.id AND
                sv.when_mitigated IS NULL
          ORDER BY cad.cve_id
          FOR UPDATE OF cad
        -- decrement systems_affected and systems_status_divergent in case status is different
        ), update_divergent AS (
          UPDATE cve_account_data cad
          SET systems_affected = systems_affected - 1,
              systems_status_divergent = systems_status_divergent - 1
          FROM to_update_cves
          WHERE cad.cve_id = to_update_cves.cve_id AND
                cad.rh_account_id = NEW.rh_account_id AND
                to_update_cves.global_status_id != to_update_cves.status_id
        )
        -- decrement only systems_affected in case status is same
        UPDATE cve_account_data cad
        SET systems_affected = systems_affected - 1
        FROM to_update_cves
        WHERE cad.cve_id = to_update_cves.cve_id AND
              cad.rh_account_id = NEW.rh_account_id AND
              to_update_cves.global_status_id = to_update_cves.status_id;
        -- delete zero cve counts
        DELETE FROM cve_account_data
        WHERE rh_account_id = NEW.rh_account_id AND
              systems_affected = 0;

      -- system opted in
      ELSIF (OLD.opt_out = TRUE OR OLD.stale = TRUE) AND NEW.opt_out = FALSE AND NEW.stale = FALSE THEN
        -- increment affected cve counts for system
        WITH to_update_cves AS (
          SELECT cad.cve_id, cad.status_id AS global_status_id, sv.status_id
          FROM cve_account_data cad INNER JOIN
               system_vulnerabilities sv ON cad.cve_id = sv.cve_id
          WHERE cad.rh_account_id = NEW.rh_account_id AND
                sv.system_id = NEW.id AND
                sv.when_mitigated IS NULL
          ORDER BY cad.cve_id
          FOR UPDATE OF cad
        -- increment systems_affected and systems_status_divergent in case status is different
        ), update_divergent AS (
          UPDATE cve_account_data cad
          SET systems_affected = systems_affected + 1,
              systems_status_divergent = systems_status_divergent + 1
          FROM to_update_cves
          WHERE cad.cve_id = to_update_cves.cve_id AND
                cad.rh_account_id = NEW.rh_account_id AND
                to_update_cves.global_status_id != to_update_cves.status_id
        )
        -- increment only systems_affected in case status is same
        UPDATE cve_account_data cad
        SET systems_affected = systems_affected + 1
        FROM to_update_cves
        WHERE cad.cve_id = to_update_cves.cve_id AND
              cad.rh_account_id = NEW.rh_account_id AND
              to_update_cves.global_status_id = to_update_cves.status_id;
        -- insert cache if not exists
        INSERT INTO cve_account_data (cve_id, rh_account_id, systems_affected)
        SELECT sv.cve_id, NEW.rh_account_id, 1
        FROM system_vulnerabilities sv
        WHERE sv.system_id = NEW.id AND
              sv.when_mitigated IS NULL AND
              NOT EXISTS (
                SELECT 1 FROM cve_account_data
                WHERE rh_account_id = NEW.rh_account_id AND
                      cve_id = sv.cve_id
              )
        ON CONFLICT (cve_id, rh_account_id) DO UPDATE SET
          systems_affected = cve_account_data.systems_affected + EXCLUDED.systems_affected;
      END IF;
    END IF;
    RETURN NEW;
  END;
$opt_out_system_update_cache$
  LANGUAGE 'plpgsql';