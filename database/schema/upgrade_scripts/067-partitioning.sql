-- define new partitioned table and it's partitions
CREATE TABLE system_vulnerabilities_new (
  id SERIAL,
  system_id INT NOT NULL,
  cve_id INT NOT NULL,
  rule_id INT,
  rule_hit_details TEXT,
  mitigation_reason TEXT,
  first_reported TIMESTAMP WITH TIME ZONE NOT NULL,
  when_mitigated TIMESTAMP WITH TIME ZONE DEFAULT NULL,
  status_id INT DEFAULT 0,
  status_text TEXT,
  CONSTRAINT system_platform_id
    FOREIGN KEY (system_id)
    REFERENCES system_platform (id),
  CONSTRAINT cve_metadata_cve_id
    FOREIGN KEY (cve_id)
    REFERENCES cve_metadata (id),
  CONSTRAINT status_id
    FOREIGN KEY (status_id)
    REFERENCES status (id),
  CONSTRAINT rule_id
    FOREIGN KEY (rule_id)
    REFERENCES insights_rule (id)
) PARTITION BY LIST ((when_mitigated IS NULL OR rule_id IS NOT NULL));

CREATE TABLE system_vulnerabilities_active PARTITION OF system_vulnerabilities_new
  FOR VALUES IN (true) TABLESPACE pg_default;

CREATE TABLE system_vulnerabilities_inactive PARTITION OF system_vulnerabilities_new
  FOR VALUES IN (false) TABLESPACE pg_default;

-- copy data
INSERT INTO system_vulnerabilities_new (system_id, cve_id, rule_id, rule_hit_details, mitigation_reason, first_reported, when_mitigated, status_id, status_text)
  SELECT system_id, cve_id, rule_id, rule_hit_details, mitigation_reason, first_reported, when_mitigated, status_id, status_text
  FROM system_vulnerabilities;

-- define missing constraints, indexes and triggers in partitions
ALTER TABLE system_vulnerabilities_active ADD PRIMARY KEY (id);
ALTER TABLE system_vulnerabilities_active ADD CONSTRAINT system_vulnerabilities_active_system_id_cve_id_key UNIQUE (system_id, cve_id);
CREATE INDEX ON system_vulnerabilities_active(status_id);
CREATE TRIGGER system_vulnerabilities_set_first_reported BEFORE INSERT ON system_vulnerabilities_active
  FOR EACH ROW EXECUTE PROCEDURE set_first_reported();

ALTER TABLE system_vulnerabilities_inactive ADD PRIMARY KEY (id);
ALTER TABLE system_vulnerabilities_inactive ADD CONSTRAINT system_vulnerabilities_inactive_system_id_cve_id_key UNIQUE (system_id, cve_id);
CREATE INDEX ON system_vulnerabilities_inactive(status_id);
CREATE TRIGGER system_vulnerabilities_set_first_reported BEFORE INSERT ON system_vulnerabilities_inactive
  FOR EACH ROW EXECUTE PROCEDURE set_first_reported();

-- swap tables
ALTER TABLE system_vulnerabilities RENAME TO system_vulnerabilities_old;
ALTER TABLE system_vulnerabilities_new RENAME TO system_vulnerabilities;
DROP TABLE system_vulnerabilities_old;
ALTER SEQUENCE IF EXISTS system_vulnerabilities_new_id_seq RENAME TO system_vulnerabilities_id_seq;

-- permissions for newly created tables
GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_evaluator;
GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_advisor_listener;
GRANT SELECT, UPDATE, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_manager;
GRANT SELECT, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_listener;
GRANT SELECT, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_taskomatic;
GRANT SELECT, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_vmaas_sync;
GRANT SELECT ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_metrics;

GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_evaluator;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_listener;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_manager;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_vmaas_sync;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_metrics;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_taskomatic;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_advisor_listener;
