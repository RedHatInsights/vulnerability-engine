-- opt_out_system_update_cache
CREATE OR REPLACE FUNCTION opt_out_system_update_cache()
  RETURNS TRIGGER AS
$opt_out_system_update_cache$
  BEGIN
    IF (TG_OP = 'UPDATE') AND NEW.last_evaluation IS NOT NULL THEN
      -- system opted out
      IF OLD.opt_out = FALSE AND NEW.opt_out = TRUE THEN
        -- decrement affected cve counts for system
        WITH to_update_cves AS (
          SELECT casc.cve
          FROM cve_affected_systems_cache casc INNER JOIN
               system_vulnerabilities sv ON casc.cve = sv.cve
          WHERE casc.rh_account = NEW.rh_account AND
                sv.inventory_id = NEW.inventory_id AND
                sv.when_mitigated IS NULL
          ORDER BY casc.cve
          FOR UPDATE OF casc
        )
        UPDATE cve_affected_systems_cache casc
        SET systems_affected = systems_affected - 1,
            direct_systems_affected = CASE WHEN NEW.satellite_managed THEN direct_systems_affected ELSE direct_systems_affected - 1 END
        FROM to_update_cves
        WHERE casc.cve = to_update_cves.cve AND
              casc.rh_account = NEW.rh_account;
        -- delete zero cve counts
        DELETE FROM cve_affected_systems_cache
        WHERE rh_account = NEW.rh_account AND
              systems_affected = 0;

      -- system opted in
      ELSIF OLD.opt_out = TRUE AND NEW.opt_out = FALSE THEN
        -- increment affected cve counts for system
        WITH to_update_cves AS (
          SELECT casc.cve
          FROM cve_affected_systems_cache casc INNER JOIN
               system_vulnerabilities sv ON casc.cve = sv.cve
          WHERE casc.rh_account = NEW.rh_account AND
                sv.inventory_id = NEW.inventory_id AND
                sv.when_mitigated IS NULL
          ORDER BY casc.cve
          FOR UPDATE OF casc
        )
        UPDATE cve_affected_systems_cache casc
        SET systems_affected = systems_affected + 1,
            direct_systems_affected = CASE when NEW.satellite_managed THEN direct_systems_affected ELSE direct_systems_affected + 1 END
        FROM to_update_cves
        WHERE casc.cve = to_update_cves.cve AND
              casc.rh_account = NEW.rh_account;
        -- insert cache if not exists
        INSERT INTO cve_affected_systems_cache (cve, rh_account, systems_affected, direct_systems_affected)
        SELECT sv.cve, NEW.rh_account, 1, CASE WHEN NEW.satellite_managed THEN 0 ELSE 1 END
        FROM system_vulnerabilities sv
        WHERE sv.inventory_id = NEW.inventory_id AND
              sv.when_mitigated IS NULL AND
              NOT EXISTS (
                SELECT 1 FROM cve_affected_systems_cache
                WHERE rh_account = NEW.rh_account AND
                      cve = sv.cve
              )
        ON CONFLICT (cve, rh_account) DO UPDATE SET
          systems_affected = cve_affected_systems_cache.systems_affected + EXCLUDED.systems_affected,
          direct_systems_affected = cve_affected_systems_cache.direct_systems_affected + EXCLUDED.direct_systems_affected;
      END IF;
    END IF;
    RETURN NEW;
  END;
$opt_out_system_update_cache$
  LANGUAGE 'plpgsql';

-- satellite_managed_system_update_cache
CREATE OR REPLACE FUNCTION satellite_managed_system_update_cache()
  RETURNS TRIGGER AS
$satellite_managed_system_update_cache$
  BEGIN
    IF (TG_OP = 'UPDATE') AND NEW.last_evaluation IS NOT NULL THEN
      -- system started to be managed by satellite
      IF OLD.satellite_managed = FALSE AND NEW.satellite_managed = TRUE THEN
        -- decrement affected cve counts for satellite managed system
        WITH to_update_cves AS (
          SELECT casc.cve
          FROM cve_affected_systems_cache casc INNER JOIN
               system_vulnerabilities sv ON casc.cve = sv.cve
          WHERE casc.rh_account = NEW.rh_account AND
                sv.inventory_id = NEW.inventory_id AND
                sv.when_mitigated IS NULL
          ORDER BY casc.cve
          FOR UPDATE OF casc
        )
        UPDATE cve_affected_systems_cache casc
        SET direct_systems_affected = direct_systems_affected - 1
        FROM to_update_cves
        WHERE casc.cve = to_update_cves.cve AND
              casc.rh_account = NEW.rh_account;

      -- system stopped to managed by satellite
      ELSIF OLD.satellite_managed = TRUE AND NEW.satellite_managed = FALSE THEN
        -- increment affected cve counts for system
        WITH to_update_cves AS (
          SELECT casc.cve
          FROM cve_affected_systems_cache casc INNER JOIN
               system_vulnerabilities sv ON casc.cve = sv.cve
          WHERE casc.rh_account = NEW.rh_account AND
                sv.inventory_id = NEW.inventory_id AND
                sv.when_mitigated IS NULL
          ORDER BY casc.cve
          FOR UPDATE OF casc
        )
        UPDATE cve_affected_systems_cache casc
        SET direct_systems_affected = direct_systems_affected + 1
        FROM to_update_cves
        WHERE casc.cve = to_update_cves.cve AND
              casc.rh_account = NEW.rh_account;
      END IF;
    END IF;
    RETURN NEW;
  END;
$satellite_managed_system_update_cache$
  LANGUAGE 'plpgsql';
