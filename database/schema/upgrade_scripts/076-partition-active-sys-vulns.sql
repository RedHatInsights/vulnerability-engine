CREATE OR REPLACE FUNCTION create_sys_vuln_active_partitions(parts INTEGER)
    RETURNS VOID AS
$$
DECLARE
    I INTEGER;
BEGIN
    I := 0;
    WHILE I < parts
        LOOP
            EXECUTE 'CREATE TABLE IF NOT EXISTS system_vulnerabilities_active_' || text(I) || ' PARTITION OF system_vulnerabilities_active_new' ||
                    ' FOR VALUES WITH ( MODULUS ' || text(parts) || ', REMAINDER ' || text(I) || ') TABLESPACE pg_default;';
            I = I + 1;
        END LOOP;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION create_sys_vuln_active_partitions_constraints(parts INTEGER)
    RETURNS VOID AS
$$
DECLARE
    I INTEGER;
BEGIN
    I := 0;
    WHILE I < parts
        LOOP
            EXECUTE 'ALTER TABLE system_vulnerabilities_active_' || text(I) || ' ADD PRIMARY KEY (id);';
            EXECUTE 'ALTER TABLE system_vulnerabilities_active_' || text(I) || ' ADD CONSTRAINT system_vulnerabilities_active_' || text(I) ||
                    '_system_id_cve_id_key UNIQUE (system_id, cve_id);';
            EXECUTE 'CREATE INDEX ON system_vulnerabilities_active_' || text(I) || '(rh_account_id);';
            EXECUTE 'CREATE INDEX ON system_vulnerabilities_active_' || text(I) || '(status_id);';
            EXECUTE 'CREATE TRIGGER system_vulnerabilities_set_first_reported BEFORE INSERT ON system_vulnerabilities_active_' || text(I) ||
                    ' FOR EACH ROW EXECUTE PROCEDURE set_first_reported();';
            EXECUTE 'GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerabilities_active_' || text(I) || ' TO ve_db_user_evaluator;';
            EXECUTE 'GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerabilities_active_' || text(I) || ' TO ve_db_user_advisor_listener;';
            EXECUTE 'GRANT SELECT, UPDATE, DELETE ON system_vulnerabilities_active_' || text(I) || ' TO ve_db_user_manager;';
            EXECUTE 'GRANT SELECT, DELETE ON system_vulnerabilities_active_' || text(I) || ' TO ve_db_user_listener;';
            EXECUTE 'GRANT SELECT, DELETE ON system_vulnerabilities_active_' || text(I) || ' TO ve_db_user_taskomatic;';
            EXECUTE 'GRANT SELECT, DELETE ON system_vulnerabilities_active_' || text(I) || ' TO ve_db_user_vmaas_sync;';
            EXECUTE 'GRANT SELECT ON system_vulnerabilities_active_' || text(I) || ' TO ve_db_user_metrics;';
            I = I + 1;
        END LOOP;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE IF NOT EXISTS system_vulnerabilities_new (
  id SERIAL,
  rh_account_id INT NOT NULL,
  system_id INT NOT NULL,
  cve_id INT NOT NULL,
  rule_id INT,
  rule_hit_details TEXT,
  mitigation_reason TEXT,
  first_reported TIMESTAMP WITH TIME ZONE NOT NULL,
  when_mitigated TIMESTAMP WITH TIME ZONE DEFAULT NULL,
  status_id INT DEFAULT 0,
  status_text TEXT,
  CONSTRAINT rh_account_id
    FOREIGN KEY (rh_account_id)
    REFERENCES rh_account (id),
  CONSTRAINT system_platform_id
    FOREIGN KEY (system_id)
    REFERENCES system_platform (id),
  CONSTRAINT cve_metadata_cve_id
    FOREIGN KEY (cve_id)
    REFERENCES cve_metadata (id),
  CONSTRAINT status_id
    FOREIGN KEY (status_id)
    REFERENCES status (id),
  CONSTRAINT rule_id
    FOREIGN KEY (rule_id)
    REFERENCES insights_rule (id)
) PARTITION BY LIST ((when_mitigated IS NULL OR rule_id IS NOT NULL));

CREATE TABLE system_vulnerabilities_inactive_new PARTITION OF system_vulnerabilities_new (
  UNIQUE (system_id, cve_id),
  PRIMARY KEY (id)
) FOR VALUES IN (false) TABLESPACE pg_default;

CREATE INDEX ON system_vulnerabilities_inactive_new(rh_account_id);
CREATE INDEX ON system_vulnerabilities_inactive_new(status_id);
CREATE TRIGGER system_vulnerabilities_set_first_reported BEFORE INSERT ON system_vulnerabilities_inactive_new
  FOR EACH ROW EXECUTE PROCEDURE set_first_reported();

-- active partition of partitions
CREATE TABLE system_vulnerabilities_active_new PARTITION OF system_vulnerabilities_new
  FOR VALUES IN (true) PARTITION BY HASH (rh_account_id);

SELECT create_sys_vuln_active_partitions(256);

-- copy data in batches to reduce memory consumption
INSERT INTO system_vulnerabilities_new (rh_account_id, system_id, cve_id, rule_id, rule_hit_details, mitigation_reason, first_reported, when_mitigated, status_id, status_text)
  SELECT sp.rh_account_id, sv.system_id, sv.cve_id, sv.rule_id, sv.rule_hit_details, sv.mitigation_reason, sv.first_reported, sv.when_mitigated, sv.status_id, sv.status_text
  FROM system_vulnerabilities sv INNER JOIN system_platform sp ON sv.system_id = sp.id
  WHERE sv.id >= 0 AND sv.id < 30000000;
INSERT INTO system_vulnerabilities_new (rh_account_id, system_id, cve_id, rule_id, rule_hit_details, mitigation_reason, first_reported, when_mitigated, status_id, status_text)
  SELECT sp.rh_account_id, sv.system_id, sv.cve_id, sv.rule_id, sv.rule_hit_details, sv.mitigation_reason, sv.first_reported, sv.when_mitigated, sv.status_id, sv.status_text
  FROM system_vulnerabilities sv INNER JOIN system_platform sp ON sv.system_id = sp.id
  WHERE sv.id >= 30000000 AND sv.id < 60000000;
INSERT INTO system_vulnerabilities_new (rh_account_id, system_id, cve_id, rule_id, rule_hit_details, mitigation_reason, first_reported, when_mitigated, status_id, status_text)
  SELECT sp.rh_account_id, sv.system_id, sv.cve_id, sv.rule_id, sv.rule_hit_details, sv.mitigation_reason, sv.first_reported, sv.when_mitigated, sv.status_id, sv.status_text
  FROM system_vulnerabilities sv INNER JOIN system_platform sp ON sv.system_id = sp.id
  WHERE sv.id >= 60000000 AND sv.id < 90000000;
INSERT INTO system_vulnerabilities_new (rh_account_id, system_id, cve_id, rule_id, rule_hit_details, mitigation_reason, first_reported, when_mitigated, status_id, status_text)
  SELECT sp.rh_account_id, sv.system_id, sv.cve_id, sv.rule_id, sv.rule_hit_details, sv.mitigation_reason, sv.first_reported, sv.when_mitigated, sv.status_id, sv.status_text
  FROM system_vulnerabilities sv INNER JOIN system_platform sp ON sv.system_id = sp.id
  WHERE sv.id >= 90000000 AND sv.id < 120000000;
INSERT INTO system_vulnerabilities_new (rh_account_id, system_id, cve_id, rule_id, rule_hit_details, mitigation_reason, first_reported, when_mitigated, status_id, status_text)
  SELECT sp.rh_account_id, sv.system_id, sv.cve_id, sv.rule_id, sv.rule_hit_details, sv.mitigation_reason, sv.first_reported, sv.when_mitigated, sv.status_id, sv.status_text
  FROM system_vulnerabilities sv INNER JOIN system_platform sp ON sv.system_id = sp.id
  WHERE sv.id >= 120000000 AND sv.id < 150000000;
INSERT INTO system_vulnerabilities_new (rh_account_id, system_id, cve_id, rule_id, rule_hit_details, mitigation_reason, first_reported, when_mitigated, status_id, status_text)
  SELECT sp.rh_account_id, sv.system_id, sv.cve_id, sv.rule_id, sv.rule_hit_details, sv.mitigation_reason, sv.first_reported, sv.when_mitigated, sv.status_id, sv.status_text
  FROM system_vulnerabilities sv INNER JOIN system_platform sp ON sv.system_id = sp.id
  WHERE sv.id >= 150000000;

-- create additional constraints, indexes, triggers and grants
SELECT create_sys_vuln_active_partitions_constraints(256);

DROP FUNCTION create_sys_vuln_active_partitions;
DROP FUNCTION create_sys_vuln_active_partitions_constraints;

-- swap tables
ALTER TABLE system_vulnerabilities_inactive RENAME TO system_vulnerabilities_inactive_old;
ALTER TABLE system_vulnerabilities_active RENAME TO system_vulnerabilities_active_old;
ALTER TABLE system_vulnerabilities RENAME TO system_vulnerabilities_old;
ALTER TABLE system_vulnerabilities_inactive_new RENAME TO system_vulnerabilities_inactive;
ALTER TABLE system_vulnerabilities_active_new RENAME TO system_vulnerabilities_active;
ALTER TABLE system_vulnerabilities_new RENAME TO system_vulnerabilities;
DROP TABLE system_vulnerabilities_inactive_old;
DROP TABLE system_vulnerabilities_active_old;
DROP TABLE system_vulnerabilities_old;
ALTER SEQUENCE IF EXISTS system_vulnerabilities_new_id_seq RENAME TO system_vulnerabilities_id_seq;
ALTER INDEX IF EXISTS system_vulnerabilities_inactive_new_pkey RENAME TO system_vulnerabilities_inactive_pkey;
ALTER INDEX IF EXISTS system_vulnerabilities_inactive_new_system_id_cve_id_key RENAME TO system_vulnerabilities_inactive_system_id_cve_id_key;
ALTER INDEX IF EXISTS system_vulnerabilities_inactive_new_rh_account_id_idx RENAME TO system_vulnerabilities_inactive_rh_account_id_idx;
ALTER INDEX IF EXISTS system_vulnerabilities_inactive_new_status_id_idx RENAME TO system_vulnerabilities_inactive_status_id_idx;

GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_evaluator;
GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_advisor_listener;
GRANT SELECT, UPDATE, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_manager;
GRANT SELECT, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_listener;
GRANT SELECT, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_taskomatic;
GRANT SELECT, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_vmaas_sync;
GRANT SELECT ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_metrics;

GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_evaluator;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_listener;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_manager;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_vmaas_sync;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_metrics;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_taskomatic;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_advisor_listener;
