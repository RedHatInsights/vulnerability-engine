-- package name table
CREATE TABLE IF NOT EXISTS package_name (
  id BIGSERIAL,
  name TEXT NOT NULL UNIQUE, CHECK (NOT empty(name)),
  PRIMARY KEY (id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON package_name TO ve_db_user_evaluator;

-- cpe table
CREATE TABLE IF NOT EXISTS cpe (
  id BIGSERIAL,
  name TEXT NOT NULL UNIQUE, CHECK (NOT empty(name)),
  PRIMARY KEY (id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON cpe TO ve_db_user_evaluator;

-- vulnerable package table
CREATE TABLE IF NOT EXISTS vulnerable_package (
  id BIGSERIAL,
  package_name_id BIGINT NOT NULL,
  cpe_id BIGINT NOT NULL,
  UNIQUE(package_name_id, cpe_id),
  PRIMARY KEY (id),
  CONSTRAINT package_name_id
    FOREIGN KEY (package_name_id)
    REFERENCES package_name (id),
  CONSTRAINT cpe_id
    FOREIGN KEY (cpe_id)
    REFERENCES cpe (id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON vulnerable_package TO ve_db_user_evaluator;

-- vulnerable package cve table
CREATE TABLE IF NOT EXISTS vulnerable_package_cve (
  id BIGSERIAL,
  vulnerable_package_id BIGINT NOT NULL,
  cve_id BIGINT NOT NULL,
  UNIQUE (vulnerable_package_id, cve_id),
  PRIMARY KEY (id),
  CONSTRAINT vulnerable_package_id
    FOREIGN KEY (vulnerable_package_id)
    REFERENCES vulnerable_package (id),
  CONSTRAINT cve_id
    FOREIGN KEY (cve_id)
    REFERENCES cve_metadata (id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON vulnerable_package_cve TO ve_db_user_evaluator;

-- system vulnerable package table
CREATE TABLE IF NOT EXISTS system_vulnerable_package (
  id BIGSERIAL,
  rh_account_id BIGINT NOT NULL,
  system_id BIGINT NOT NULL,
  vulnerable_package_id BIGINT NOT NULL,
  first_reported TIMESTAMP WITH TIME ZONE NOT NULL,
  CONSTRAINT rh_account_id
    FOREIGN KEY (rh_account_id)
    REFERENCES rh_account (id),
  CONSTRAINT system_platform_id
    FOREIGN KEY (system_id)
    REFERENCES system_platform (id),
  CONSTRAINT vulnerable_package_id
    FOREIGN KEY (vulnerable_package_id)
    REFERENCES vulnerable_package (id)
) PARTITION BY HASH (rh_account_id);

CREATE OR REPLACE FUNCTION set_first_reported()
  RETURNS TRIGGER AS
$set_first_reported$
  BEGIN
    IF NEW.first_reported IS NULL THEN
      NEW.first_reported := CURRENT_TIMESTAMP;
    END IF;
    RETURN NEW;
  END;
$set_first_reported$
  LANGUAGE 'plpgsql';

GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerable_package TO ve_db_user_evaluator;

-- create function to create all partitions
CREATE OR REPLACE FUNCTION create_sys_vuln_pkg_partitions(parts INTEGER)
    RETURNS VOID AS
$$
DECLARE
    I INTEGER;
BEGIN
    I := 0;
    WHILE I < parts
        LOOP
            EXECUTE 'CREATE TABLE IF NOT EXISTS system_vulnerable_package_' || text(I) || ' PARTITION OF system_vulnerable_package' ||
                    ' FOR VALUES WITH ( MODULUS ' || text(parts) || ', REMAINDER ' || text(I) || ') TABLESPACE pg_default;';
            EXECUTE 'ALTER TABLE system_vulnerable_package_' || text(I) || ' ADD PRIMARY KEY (id);';
            EXECUTE 'ALTER TABLE system_vulnerable_package_' || text(I) || ' ADD CONSTRAINT system_vulnerable_package_' || text(I) ||
                    '_system_id_vuln_pkg_id_key UNIQUE (system_id, vulnerable_package_id);';
            EXECUTE 'CREATE INDEX ON system_vulnerable_package_' || text(I) || '(vulnerable_package_id);';
            EXECUTE 'CREATE INDEX ON system_vulnerable_package_' || text(I) || '(rh_account_id);';
            EXECUTE 'CREATE TRIGGER system_vulnerable_package_set_first_reported BEFORE INSERT ON system_vulnerable_package_' || text(I) ||
                    ' FOR EACH ROW EXECUTE PROCEDURE set_first_reported();';
            EXECUTE 'GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerable_package_' || text(I) || ' TO ve_db_user_evaluator;';
            I = I + 1;
        END LOOP;
END;
$$ LANGUAGE plpgsql;

SELECT create_sys_vuln_pkg_partitions(256);
DROP FUNCTION create_sys_vuln_pkg_partitions;

-- user for evaluator
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_evaluator;

-- user for listener component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_listener;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_listener;

-- user for UI manager component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_manager;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_manager;
GRANT INSERT, DELETE ON announcement TO ve_db_user_manager;

-- user for VMaaS sync component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_vmaas_sync;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_vmaas_sync;

-- user for taskomatic service
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_taskomatic;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_taskomatic;

-- user for advisor listener
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_advisor_listener;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_advisor_listener;

-- user for notificator
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_notificator;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_notificator;
