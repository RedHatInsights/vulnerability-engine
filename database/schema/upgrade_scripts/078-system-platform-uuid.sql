-- Vanish non-uuid systems from DB
CREATE OR REPLACE FUNCTION try_cast_uuid(uuid_in TEXT) 
  RETURNS uuid AS
$$
  BEGIN
    RETURN uuid_in::UUID;
  EXCEPTION WHEN invalid_text_representation THEN 
    RETURN NULL;
  END;
$$ LANGUAGE 'plpgsql';

SELECT delete_system(inventory_id) FROM system_platform WHERE try_cast_uuid(inventory_id) IS NULL;

ALTER TABLE system_platform ADD COLUMN inventory_id_new UUID;

CREATE OR REPLACE PROCEDURE populate_inventory_id()
LANGUAGE 'plpgsql'
AS $$
DECLARE
  low INT;
  batch_size INT = 100;
  high INT;
  max_ INT;
BEGIN
  low = 0;
  high = batch_size;
  max_ = (SELECT last_value FROM system_platform_id_seq);
  LOOP
    IF low > max_ THEN
      RETURN;
    END IF;

    PERFORM * FROM system_platform 
    WHERE id BETWEEN low AND high FOR UPDATE;

    UPDATE system_platform 
    SET inventory_id_new = try_cast_uuid(inventory_id)
    WHERE id BETWEEN low AND high;

    low = low + batch_size;
    high = high + batch_size;
    max_ = (SELECT last_value FROM system_platform_id_seq);

    COMMIT;
  END LOOP;
END; $$;

CALL populate_inventory_id();

ALTER TABLE system_platform RENAME COLUMN inventory_id TO inventory_id_old;
ALTER TABLE system_platform RENAME COLUMN inventory_id_new TO inventory_id;
ALTER TABLE system_platform DROP COLUMN inventory_id_old;
ALTER TABLE system_platform ALTER COLUMN inventory_id SET NOT NULL;
ALTER TABLE system_platform ADD UNIQUE(inventory_id);

-- Drop the helper function
DROP FUNCTION try_cast_uuid(TEXT);
DROP PROCEDURE populate_inventory_id();

-- Replace original function
DROP FUNCTION delete_system(varchar);

CREATE OR REPLACE FUNCTION delete_system(inventory_id_in UUID)
  RETURNS TABLE (deleted_inventory_id UUID) AS
$delete_system$
  DECLARE
    system_id_in INT;
    rh_account_id_in INT;
  BEGIN
    -- opt out to refresh cache and then delete
    SELECT id, rh_account_id FROM system_platform WHERE inventory_id = inventory_id_in INTO system_id_in, rh_account_id_in FOR UPDATE;
    UPDATE system_platform SET opt_out = true WHERE id = system_id_in;
    DELETE FROM system_vulnerabilities WHERE system_id = system_id_in AND rh_account_id = rh_account_id_in;
    DELETE FROM system_repo WHERE system_id = system_id_in;
    RETURN QUERY DELETE FROM system_platform WHERE id = system_id_in RETURNING inventory_id;
  END;
$delete_system$
  LANGUAGE 'plpgsql';

DROP FUNCTION refresh_system_cached_counts(varchar);

CREATE OR REPLACE FUNCTION refresh_system_cached_counts(inventory_id_in UUID)
  RETURNS void AS
$refresh_system_cached_counts$
  BEGIN
    -- update cve count for system
    UPDATE system_platform sp SET cve_count_cache = (
      SELECT COUNT(cve_id) FROM system_vulnerabilities_active sv LEFT OUTER JOIN
                                insights_rule ir ON sv.rule_id = ir.id
      WHERE sv.rh_account_id = sp.rh_account_id
        AND sv.system_id = sp.id
        AND (sv.mitigation_reason IS NULL OR ir.active = 'F')
        AND (sv.when_mitigated IS NULL OR ir.active = 'T')
    ) WHERE sp.inventory_id = inventory_id_in;
  END;
$refresh_system_cached_counts$
  LANGUAGE 'plpgsql';
