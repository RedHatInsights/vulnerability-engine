CREATE OR REPLACE FUNCTION opt_out_system_update_cache()
  RETURNS TRIGGER AS
$opt_out_system_update_cache$
  BEGIN
    IF (TG_OP = 'UPDATE') AND NEW.last_evaluation IS NOT NULL THEN
      -- system opted out
      IF OLD.opt_out = FALSE AND NEW.opt_out = TRUE THEN
        -- decrement affected cve counts for system
        WITH to_update_cves AS (
          SELECT casc.cve
          FROM cve_affected_systems_cache casc INNER JOIN
               system_vulnerabilities sv ON casc.cve = sv.cve
          WHERE casc.rh_account = NEW.rh_account AND
                sv.inventory_id = NEW.inventory_id AND
                sv.when_mitigated IS NULL
          ORDER BY casc.cve
          FOR UPDATE OF casc
        )
        UPDATE cve_affected_systems_cache casc
        SET systems_affected = systems_affected - 1
        FROM to_update_cves
        WHERE casc.cve = to_update_cves.cve AND
              casc.rh_account = NEW.rh_account;
        -- delete zero cve counts
        DELETE FROM cve_affected_systems_cache
        WHERE rh_account = NEW.rh_account AND
              systems_affected = 0;

      -- system opted in
      ELSIF OLD.opt_out = TRUE AND NEW.opt_out = FALSE THEN
        -- increment affected cve counts for system
        WITH to_update_cves AS (
          SELECT casc.cve
          FROM cve_affected_systems_cache casc INNER JOIN
               system_vulnerabilities sv ON casc.cve = sv.cve
          WHERE casc.rh_account = NEW.rh_account AND
                sv.inventory_id = NEW.inventory_id AND
                sv.when_mitigated IS NULL
          ORDER BY casc.cve
          FOR UPDATE OF casc
        )
        UPDATE cve_affected_systems_cache casc
        SET systems_affected = systems_affected + 1
        FROM to_update_cves
        WHERE casc.cve = to_update_cves.cve AND
              casc.rh_account = NEW.rh_account;
        -- insert cache if not exists
        INSERT INTO cve_affected_systems_cache (cve, rh_account, systems_affected)
        SELECT sv.cve, NEW.rh_account, 1
        FROM system_vulnerabilities sv
        WHERE sv.inventory_id = NEW.inventory_id AND
              sv.when_mitigated IS NULL AND
              NOT EXISTS (
                SELECT 1 FROM cve_affected_systems_cache
                WHERE rh_account = NEW.rh_account AND
                      cve = sv.cve
              )
        ON CONFLICT (cve, rh_account) DO UPDATE SET
          systems_affected = cve_affected_systems_cache.systems_affected + EXCLUDED.systems_affected;
      END IF;
    END IF;
    RETURN NEW;
  END;
$opt_out_system_update_cache$
  LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION refresh_all_cached_counts()
  RETURNS void AS
$refresh_all_cached_counts$
  BEGIN
    -- update cve count for ordered systems
    WITH to_update_systems AS (
      SELECT sp.inventory_id
      FROM system_platform sp
      ORDER BY sp.rh_account, sp.inventory_id
      FOR UPDATE OF sp
    )
    UPDATE system_platform sp SET cve_count_cache = (
      SELECT COUNT(cve) FROM system_vulnerabilities sv
      WHERE sv.inventory_id = sp.inventory_id AND sv.when_mitigated IS NULL
    )
    FROM to_update_systems
    WHERE sp.inventory_id = to_update_systems.inventory_id;

    -- update system count for ordered cves
    WITH locked_rows AS (
      SELECT casc.rh_account, casc.cve
      FROM cve_affected_systems_cache casc
      ORDER BY casc.rh_account, casc.cve
      FOR UPDATE OF casc
    ), current_counts AS (
      SELECT sv.cve, sp.rh_account, count(sv.inventory_id) as systems_affected
      FROM system_vulnerabilities sv INNER JOIN
           system_platform sp USING (inventory_id)
      WHERE sp.last_evaluation IS NOT NULL AND
            sp.opt_out = FALSE AND
            sv.when_mitigated IS NULL
      GROUP BY sv.cve, sp.rh_account
    ), upserted AS (
      INSERT INTO cve_affected_systems_cache (cve, rh_account, systems_affected)
        SELECT cve, rh_account, systems_affected FROM current_counts
      ON CONFLICT (cve, rh_account) DO UPDATE SET
        systems_affected = EXCLUDED.systems_affected
    )
    DELETE FROM cve_affected_systems_cache WHERE (cve, rh_account) NOT IN (SELECT cve, rh_account FROM current_counts);
  END;
$refresh_all_cached_counts$
  LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION refresh_account_cached_counts(rh_account_in varchar)
  RETURNS void AS
$refresh_account_cached_counts$
  BEGIN
    -- update cve count for ordered systems
    WITH to_update_systems AS (
      SELECT sp.inventory_id
      FROM system_platform sp
      WHERE sp.rh_account = rh_account_in
      ORDER BY sp.inventory_id
      FOR UPDATE OF sp
    )
    UPDATE system_platform sp SET cve_count_cache = (
      SELECT COUNT(cve) FROM system_vulnerabilities sv
      WHERE sv.inventory_id = sp.inventory_id AND sv.when_mitigated IS NULL
    )
    FROM to_update_systems
    WHERE sp.inventory_id = to_update_systems.inventory_id;

    -- update system count for ordered cves
    WITH locked_rows AS (
      SELECT casc.cve
      FROM cve_affected_systems_cache casc
      WHERE casc.rh_account = rh_account_in
      ORDER BY casc.cve
      FOR UPDATE OF casc
    ), current_counts AS (
      SELECT sv.cve, count(sv.inventory_id) as systems_affected
      FROM system_vulnerabilities sv INNER JOIN
           system_platform sp USING (inventory_id)
      WHERE sp.last_evaluation IS NOT NULL AND
            sp.opt_out = FALSE AND
            sv.when_mitigated IS NULL AND
            sp.rh_account = rh_account_in
      GROUP BY sv.cve
    ), upserted AS (
      INSERT INTO cve_affected_systems_cache (cve, rh_account, systems_affected)
        SELECT cve, rh_account_in, systems_affected FROM current_counts
      ON CONFLICT (cve, rh_account) DO UPDATE SET
        systems_affected = EXCLUDED.systems_affected
    )
    DELETE FROM cve_affected_systems_cache WHERE cve NOT IN (SELECT cve FROM current_counts)
      AND rh_account = rh_account_in;
  END;
$refresh_account_cached_counts$
  LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION refresh_cve_cached_counts(cve_in varchar)
  RETURNS void AS
$refresh_cve_cached_counts$
  BEGIN
    -- update system count for cve
    WITH locked_rows AS (
      SELECT casc.rh_account
      FROM cve_affected_systems_cache casc
      WHERE casc.cve = cve_in
      ORDER BY casc.rh_account
      FOR UPDATE OF casc
    ), current_counts AS (
      SELECT sp.rh_account, count(sv.inventory_id) as systems_affected
      FROM system_vulnerabilities sv INNER JOIN
           system_platform sp USING (inventory_id)
      WHERE sp.last_evaluation IS NOT NULL AND
            sp.opt_out = FALSE AND
            sv.when_mitigated IS NULL AND
            sv.cve = cve_in
      GROUP BY sp.rh_account
    ), upserted AS (
      INSERT INTO cve_affected_systems_cache (cve, rh_account, systems_affected)
        SELECT cve_in, rh_account, systems_affected FROM current_counts
      ON CONFLICT (cve, rh_account) DO UPDATE SET
        systems_affected = EXCLUDED.systems_affected
    )
    DELETE FROM cve_affected_systems_cache WHERE rh_account NOT IN (SELECT rh_account FROM current_counts)
      AND cve = cve_in;
  END;
$refresh_cve_cached_counts$
  LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION refresh_cve_account_cached_counts(cve_in varchar, rh_account_in varchar)
  RETURNS void AS
$refresh_cve_account_cached_counts$
  BEGIN
    -- update system count for ordered cves
    WITH locked_rows AS (
      SELECT casc.rh_account, casc.cve
      FROM cve_affected_systems_cache casc
      WHERE casc.cve = cve_in AND
            casc.rh_account = rh_account_in
      FOR UPDATE OF casc
    ), current_counts AS (
      SELECT sv.cve, sp.rh_account, count(sv.inventory_id) as systems_affected
      FROM system_vulnerabilities sv INNER JOIN
           system_platform sp USING (inventory_id)
      WHERE sp.last_evaluation IS NOT NULL AND
            sp.opt_out = FALSE AND
            sv.when_mitigated IS NULL AND
            sv.cve = cve_in AND
            sp.rh_account = rh_account_in
      GROUP BY sv.cve, sp.rh_account
    ), upserted AS (
      INSERT INTO cve_affected_systems_cache (cve, rh_account, systems_affected)
        SELECT cve_in, rh_account_in, systems_affected FROM current_counts
      ON CONFLICT (cve, rh_account) DO UPDATE SET
        systems_affected = EXCLUDED.systems_affected
    )
    DELETE FROM cve_affected_systems_cache WHERE NOT EXISTS (SELECT 1 FROM current_counts)
      AND cve = cve_in
      AND rh_account = rh_account_in;
  END;
$refresh_cve_account_cached_counts$
  LANGUAGE 'plpgsql';


DROP TRIGGER IF EXISTS system_platform_satellite_managed_cache ON system_platform;

DROP FUNCTION IF EXISTS satellite_managed_system_update_cache;

ALTER TABLE system_platform DROP COLUMN IF EXISTS satellite_managed;

ALTER TABLE cve_affected_systems_cache DROP COLUMN IF EXISTS direct_systems_affected;