-- ---------------------------------------------------------------------------
-- Vulnerability Engine DB Users
--
-- Users are created in ve_db_user_create_postgresql.sql.  Permissions
-- are granted here.  Throughout this file, write access is granted to
-- specific users on specific tables just after the table is defined.
-- The goal is to have one user per Vulnerability Engine component, and
-- that user should be the only user allowed to write to tables for which
-- the component is responsible.  In the bottom section, read access is
-- granted on all tables to all users.
--
-- NOTE: If a table uses a sequence, make sure to grant USAGE, SELECT, UPDATE
-- on the sequence to the user.  SERIAL and BIGSERIAL are create table time
-- macros around sequences.
-- ---------------------------------------------------------------------------

-- This value must equal the version number of the upgrade_script that
-- upgrades an old schema version to match the schema defined herein.
--
-- So using a variable here causes our unit tests to fail because the unit
-- tests initialize its test database by reading this file and executing
-- it.  So I'm moving the table definition and insert up to here to make
-- it easier to find by someone creating an update for the schema.
--\set schema_version 1
-- db_version
CREATE TABLE IF NOT EXISTS db_version (
  name TEXT NOT NULL,
  version INT NOT NULL,
  PRIMARY KEY (name)
) TABLESPACE pg_default;

-- set the schema version directly in the insert statement here!!
INSERT INTO db_version (name, version) VALUES ('schema_version', 135);
-- INSERT INTO db_version (name, version) VALUES ('schema_version', :schema_version);



-- ---------------------------------------------------------------------------
-- Functions
-- ---------------------------------------------------------------------------

-- empty
CREATE OR REPLACE FUNCTION empty(t TEXT)
  RETURNS BOOLEAN as
$empty$
  BEGIN
    RETURN t ~ '^[[:space:]]*$';
  END;
$empty$
  LANGUAGE 'plpgsql';

-- set_first_reported
CREATE OR REPLACE FUNCTION set_first_reported()
  RETURNS TRIGGER AS
$set_first_reported$
  BEGIN
    IF NEW.first_reported IS NULL THEN
      NEW.first_reported := CURRENT_TIMESTAMP;
    END IF;
    RETURN NEW;
  END;
$set_first_reported$
  LANGUAGE 'plpgsql';

-- set_last_updated
CREATE OR REPLACE FUNCTION set_last_updated()
  RETURNS TRIGGER AS
$set_last_updated$
  BEGIN
    IF (TG_OP = 'UPDATE') OR
       NEW.last_updated IS NULL THEN
      NEW.last_updated := CURRENT_TIMESTAMP;
    END IF;
    RETURN NEW;
  END;
$set_last_updated$
  LANGUAGE 'plpgsql';

-- check_unchanged
CREATE OR REPLACE FUNCTION check_unchanged()
  RETURNS TRIGGER AS
$check_unchanged$
  BEGIN
    IF (TG_OP = 'INSERT') THEN
      IF (NEW.unchanged_since IS NULL) THEN
        NEW.unchanged_since := CURRENT_TIMESTAMP;
      END IF;
      IF (NEW.advisor_unchanged_since IS NULL) THEN
        NEW.advisor_unchanged_since := CURRENT_TIMESTAMP;
      END IF;
    END IF;
    IF (TG_OP = 'UPDATE') THEN
      IF (NEW.json_checksum <> OLD.json_checksum) THEN
        NEW.unchanged_since := CURRENT_TIMESTAMP;
      END IF;
      IF (NEW.advisor_checksum <> OLD.advisor_checksum) THEN
        NEW.advisor_unchanged_since := CURRENT_TIMESTAMP;
      END IF;
    END IF;
    RETURN NEW;
  END;
$check_unchanged$
  LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION delete_system(inventory_id_in UUID)
  RETURNS TABLE (deleted_inventory_id UUID) AS
$delete_system$
  DECLARE
    system_id_in INT;
    rh_account_id_in INT;
  BEGIN
    -- opt out to refresh cache and then delete
    SELECT id, rh_account_id FROM system_platform WHERE inventory_id = inventory_id_in INTO system_id_in, rh_account_id_in FOR UPDATE;
    UPDATE system_platform SET opt_out = true WHERE id = system_id_in;
    DELETE FROM system_vulnerabilities WHERE system_id = system_id_in AND rh_account_id = rh_account_id_in;
    DELETE FROM system_vulnerable_package WHERE system_id = system_id_in AND rh_account_id = rh_account_id_in;
    DELETE FROM system_repo WHERE system_id = system_id_in;
    DELETE FROM system_cve_data WHERE system_id = system_id_in;
    RETURN QUERY DELETE FROM system_platform WHERE id = system_id_in RETURNING inventory_id;
  END;
$delete_system$
  LANGUAGE 'plpgsql';


-- ----------------------------------------------------------------------------
-- Tables
-- ----------------------------------------------------------------------------

-- db_upgrade_log
CREATE TABLE IF NOT EXISTS db_upgrade_log (
  id SERIAL,
  version INT NOT NULL,
  status TEXT NOT NULL,
  script TEXT,
  returncode INT,
  stdout TEXT,
  stderr TEXT,
  last_updated TIMESTAMP WITH TIME ZONE NOT NULL
) TABLESPACE pg_default;

CREATE INDEX ON db_upgrade_log(version);

CREATE TRIGGER db_upgrade_log_set_last_updated
  BEFORE INSERT OR UPDATE ON db_upgrade_log
  FOR EACH ROW EXECUTE PROCEDURE set_last_updated();

-- rh_account
CREATE TABLE IF NOT EXISTS rh_account (
  id BIGSERIAL,
  account_number TEXT UNIQUE, CHECK (NOT empty(account_number)),
  org_id TEXT UNIQUE, CHECK (NOT empty(org_id)),
  cve_cache_from TIMESTAMP WITH TIME ZONE,
  last_status_change TIMESTAMP WITH TIME ZONE,
  cve_cache_keepalive TIMESTAMP WITH TIME ZONE,
  cves_without_errata BOOLEAN NOT NULL DEFAULT TRUE,
  cve_cache_groups JSONB,
  PRIMARY KEY (id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON rh_account TO ve_db_user_listener;
-- manager needs to delete systems and create account records for accounts with no systems
GRANT DELETE, INSERT, UPDATE ON rh_account TO ve_db_user_manager;
-- advisor listener needs to be able to handle 1st time uploads
GRANT SELECT, INSERT, UPDATE, DELETE ON rh_account TO ve_db_user_advisor_listener;
-- cache flag update
GRANT SELECT, UPDATE ON rh_account TO ve_db_user_taskomatic;

-- system_platform
CREATE TABLE IF NOT EXISTS system_platform (
  id BIGSERIAL,
  inventory_id UUID NOT NULL,
  display_name TEXT,
  rh_account_id INT NOT NULL,
  first_reported TIMESTAMP WITH TIME ZONE NOT NULL,
  s3_url TEXT,
  vmaas_json TEXT,
  json_checksum TEXT,
  last_updated TIMESTAMP WITH TIME ZONE NOT NULL,
  unchanged_since TIMESTAMP WITH TIME ZONE NOT NULL,
  last_evaluation TIMESTAMP WITH TIME ZONE,
  advisor_evaluated TIMESTAMP WITH TIME ZONE,
  opt_out BOOLEAN NOT NULL DEFAULT FALSE,
  PRIMARY KEY (id),
  last_upload TIMESTAMP WITH TIME ZONE,
  stale_timestamp TIMESTAMP WITH TIME ZONE,
  stale_warning_timestamp TIMESTAMP WITH TIME ZONE,
  culled_timestamp TIMESTAMP WITH TIME ZONE,
  stale BOOLEAN NOT NULL DEFAULT FALSE,
  when_deleted TIMESTAMP WITH TIME ZONE,
  advisor_checksum TEXT,
  advisor_unchanged_since TIMESTAMP WITH TIME ZONE NOT NULL,
  cve_count_cache INT NOT NULL DEFAULT 0,
  host_type TEXT,
  rule_results JSONB,
  UNIQUE (inventory_id),
  CONSTRAINT rh_account_id
    FOREIGN KEY (rh_account_id)
    REFERENCES rh_account (id)
) TABLESPACE pg_default;

CREATE INDEX ON system_platform(rh_account_id);

CREATE INDEX ON system_platform(stale);

CREATE INDEX ON system_platform(stale_warning_timestamp);

CREATE INDEX ON system_platform(when_deleted);

CREATE INDEX ON system_platform(opt_out);

CREATE INDEX ON system_platform(host_type);

CREATE TRIGGER system_platform_set_first_reported
  BEFORE INSERT ON system_platform
  FOR EACH ROW EXECUTE PROCEDURE set_first_reported();

CREATE TRIGGER system_platform_set_last_updated
  BEFORE INSERT OR UPDATE ON system_platform
  FOR EACH ROW EXECUTE PROCEDURE set_last_updated();

CREATE TRIGGER system_platform_check_unchanged
  BEFORE INSERT OR UPDATE ON system_platform
  FOR EACH ROW EXECUTE PROCEDURE check_unchanged();

GRANT SELECT, INSERT, UPDATE, DELETE ON system_platform TO ve_db_user_listener;
GRANT SELECT, INSERT, UPDATE, DELETE ON system_platform TO ve_db_user_advisor_listener;
-- evaluator needs to update last_evaluation
GRANT UPDATE ON system_platform TO ve_db_user_evaluator;
-- manager needs to update cache and opt_out plus delete systems
GRANT UPDATE (opt_out, stale, when_deleted), DELETE ON system_platform TO ve_db_user_manager;

-- cve_impact
CREATE TABLE IF NOT EXISTS cve_impact (
  id INT NOT NULL,
  name TEXT NOT NULL UNIQUE, CHECK (NOT empty(name)),
  PRIMARY KEY (id)
)TABLESPACE pg_default;

INSERT INTO cve_impact (id, name) VALUES
  (0, 'NotSet'), (1, 'None'), (2, 'Low'), (3, 'Medium'), (4, 'Moderate'),
  (5, 'Important'), (6, 'High'), (7, 'Critical');


-- cve_metadata
CREATE TABLE IF NOT EXISTS cve_metadata (
  id BIGSERIAL,
  cve TEXT NOT NULL, CHECK (NOT empty(cve)),
  celebrity_name TEXT,
  description TEXT NOT NULL, CHECK (NOT empty(description)),
  impact_id INT NOT NULL,
  public_date TIMESTAMP WITH TIME ZONE NULL,
  modified_date TIMESTAMP WITH TIME ZONE NULL,
  cvss3_score NUMERIC(5,3),
  cvss3_metrics TEXT,
  cvss2_score NUMERIC(5,3),
  cvss2_metrics TEXT,
  redhat_url TEXT,
  secondary_url TEXT,
  advisories_list JSONB,
  exploit_data JSONB,
  UNIQUE (cve),
  PRIMARY KEY (id),
  CONSTRAINT impact_id
    FOREIGN KEY (impact_id)
    REFERENCES cve_impact (id)
) TABLESPACE pg_default;

CREATE INDEX ON cve_metadata(impact_id);
CREATE INDEX ON cve_metadata(cvss3_score);
CREATE INDEX ON cve_metadata(cvss2_score);

GRANT SELECT, INSERT, UPDATE, DELETE ON cve_metadata TO ve_db_user_evaluator;
GRANT SELECT, INSERT, UPDATE, DELETE ON cve_metadata TO ve_db_user_vmaas_sync;
GRANT SELECT, INSERT, UPDATE, DELETE ON cve_metadata TO ve_db_user_advisor_listener;
GRANT INSERT, UPDATE ON cve_metadata TO ve_db_user_taskomatic;


-- status table
CREATE TABLE IF NOT EXISTS status (
  id INT NOT NULL,
  name TEXT NOT NULL UNIQUE, CHECK (NOT empty(name)),
  PRIMARY KEY (id)
)TABLESPACE pg_default;

INSERT INTO status (id, name) VALUES
  (0, 'Not Reviewed'), (1, 'In-Review'), (2, 'On-Hold'), (3, 'Scheduled for Patch'), (4, 'Resolved'),
  (5, 'No Action - Risk Accepted'), (6, 'Resolved via Mitigation (e.g. done without deploying a patch)') ;

-- insights rules table
CREATE TABLE IF NOT EXISTS insights_rule (
  id BIGSERIAL,
  name TEXT NOT NULL UNIQUE, CHECK (NOT empty(name)),
  description_text TEXT,
  summary_text TEXT,
  reason_text TEXT,
  resolution_text TEXT,
  more_info_text TEXT,
  reboot_required BOOLEAN,
  playbook_count INT,
  change_risk INT,
  kbase_node_id INT,
  active BOOLEAN NOT NULL DEFAULT FALSE,
  rule_impact INT,
  publish_date TIMESTAMP,
  rule_only BOOLEAN NOT NULL DEFAULT FALSE,
  generate_autoplaybook BOOLEAN DEFAULT TRUE,
  PRIMARY KEY (id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE ON insights_rule TO ve_db_user_advisor_listener;
GRANT SELECT, INSERT, UPDATE ON insights_rule TO ve_db_user_evaluator;
GRANT INSERT, UPDATE, DELETE ON insights_rule TO ve_db_user_taskomatic;

CREATE TABLE IF NOT EXISTS playbook (
  id BIGSERIAL,
  rule_id INT,
  play TEXT,
  version TEXT,
  description TEXT,
  insights_needs_reboot BOOLEAN,
  resolution_type TEXT,
  PRIMARY KEY (id),
  CONSTRAINT rule_id
    FOREIGN KEY (rule_id)
    REFERENCES insights_rule (id)
) TABLESPACE pg_default;

GRANT INSERT, UPDATE, DELETE ON playbook TO ve_db_user_taskomatic;

-- cve_rule_mapping
CREATE TABLE IF NOT EXISTS cve_rule_mapping (
  cve_id INT NOT NULL,
  rule_id INT NOT NULL,
  CONSTRAINT cve_id
    FOREIGN KEY (cve_id)
    REFERENCES cve_metadata (id),
  CONSTRAINT rule_id
    FOREIGN KEY (rule_id)
    REFERENCES insights_rule (id),
  UNIQUE (cve_id, rule_id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON cve_rule_mapping TO ve_db_user_advisor_listener;
GRANT SELECT, INSERT, UPDATE, DELETE ON cve_rule_mapping TO ve_db_user_evaluator;

GRANT INSERT ON cve_rule_mapping TO ve_db_user_taskomatic;
GRANT DELETE ON cve_rule_mapping TO ve_db_user_vmaas_sync;

-- remediation_type
CREATE TABLE IF NOT EXISTS remediation_type (
  id INT NOT NULL,
  name TEXT NOT NULL UNIQUE, CHECK (NOT empty(name)),
  PRIMARY KEY (id)
)TABLESPACE pg_default;

INSERT INTO remediation_type (id, name) VALUES
  (0, 'None'), (1, 'Manual'), (2, 'Playbook');


CREATE TYPE VULNERABILITY_STATE AS ENUM
('NOT_VULNERABLE', 'VULNERABLE_BY_PACKAGE', 'VULNERABLE_BY_RULE',
'VULNERABLE_BY_RULE_AND_PACKAGE', 'VULNERABLE_BY_PACKAGE_NOT_RULE');

-- system_vulnerabilities
CREATE TABLE IF NOT EXISTS system_vulnerabilities (
  id BIGSERIAL,
  rh_account_id INT NOT NULL,
  system_id INT NOT NULL,
  cve_id INT NOT NULL,
  rule_id INT,
  rule_hit_details TEXT,
  mitigation_reason TEXT,
  first_reported TIMESTAMP WITH TIME ZONE NOT NULL,
  when_mitigated TIMESTAMP WITH TIME ZONE DEFAULT NULL,
  status_id INT DEFAULT 0,
  status_text TEXT,
  advisory_available BOOLEAN,
  remediation_type_id INT,
  advisories TEXT,
  state VULNERABILITY_STATE,
  CONSTRAINT rh_account_id
    FOREIGN KEY (rh_account_id)
    REFERENCES rh_account (id),
  CONSTRAINT system_platform_id
    FOREIGN KEY (system_id)
    REFERENCES system_platform (id),
  CONSTRAINT cve_metadata_cve_id
    FOREIGN KEY (cve_id)
    REFERENCES cve_metadata (id),
  CONSTRAINT status_id
    FOREIGN KEY (status_id)
    REFERENCES status (id),
  CONSTRAINT rule_id
    FOREIGN KEY (rule_id)
    REFERENCES insights_rule (id),
  CONSTRAINT remediation_type_id
    FOREIGN KEY (remediation_type_id)
    REFERENCES remediation_type (id)
) PARTITION BY LIST ((when_mitigated IS NULL OR rule_id IS NOT NULL));

CREATE TABLE system_vulnerabilities_inactive PARTITION OF system_vulnerabilities (
  UNIQUE (system_id, cve_id),
  PRIMARY KEY (id)
) FOR VALUES IN (false) TABLESPACE pg_default;

CREATE INDEX ON system_vulnerabilities_inactive(cve_id);
CREATE INDEX ON system_vulnerabilities_inactive(rh_account_id);
CREATE INDEX ON system_vulnerabilities_inactive(status_id);
CREATE TRIGGER system_vulnerabilities_set_first_reported BEFORE INSERT ON system_vulnerabilities_inactive
  FOR EACH ROW EXECUTE PROCEDURE set_first_reported();

CREATE TABLE system_vulnerabilities_active PARTITION OF system_vulnerabilities
  FOR VALUES IN (true) PARTITION BY HASH (rh_account_id);

GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_evaluator;
GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_advisor_listener;
-- manager needs to be able to update things like 'status' on a sysid/cve combination, also needs to delete
GRANT UPDATE, DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_manager;
-- listener deletes systems
GRANT DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_listener;
-- with deletion of systems we're deleting also from these tables
GRANT DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_taskomatic;
-- CVE delete in vmaas_sync
GRANT DELETE ON system_vulnerabilities, system_vulnerabilities_active, system_vulnerabilities_inactive TO ve_db_user_vmaas_sync;

CREATE INDEX ON system_vulnerabilities_active(state);
CREATE INDEX IF NOT EXISTS sv_rule_id ON system_vulnerabilities_active (rule_id);
-- NOTE: if full text advisory search is slow, we may consider using GIN index
--       indexes with WHERE advisories IS NOT NULL, and with WHERE advisories IS NULL might have slightly better performance if we have a lot of NULL values
CREATE INDEX IF NOT EXISTS advisories_idx ON system_vulnerabilities_active (advisories);
CREATE INDEX IF NOT EXISTS account_cve ON system_vulnerabilities_active(rh_account_id, cve_id);

-- create function to create all partitions
CREATE OR REPLACE FUNCTION create_sys_vuln_active_partitions(parts INTEGER)
    RETURNS VOID AS
$$
DECLARE
    I INTEGER;
BEGIN
    I := 0;
    WHILE I < parts
        LOOP
            EXECUTE 'CREATE TABLE IF NOT EXISTS system_vulnerabilities_active_' || text(I) || ' PARTITION OF system_vulnerabilities_active' ||
                    ' FOR VALUES WITH ( MODULUS ' || text(parts) || ', REMAINDER ' || text(I) || ') TABLESPACE pg_default;';
            EXECUTE 'ALTER TABLE system_vulnerabilities_active_' || text(I) || ' ADD PRIMARY KEY (id);';
            EXECUTE 'ALTER TABLE system_vulnerabilities_active_' || text(I) || ' ADD CONSTRAINT system_vulnerabilities_active_' || text(I) ||
                    '_system_id_cve_id_key UNIQUE (system_id, cve_id);';
            EXECUTE 'CREATE INDEX ON system_vulnerabilities_active_' || text(I) || '(cve_id);';
            EXECUTE 'CREATE INDEX ON system_vulnerabilities_active_' || text(I) || '(rh_account_id);';
            EXECUTE 'CREATE INDEX ON system_vulnerabilities_active_' || text(I) || '(status_id);';
            EXECUTE 'CREATE TRIGGER system_vulnerabilities_set_first_reported BEFORE INSERT ON system_vulnerabilities_active_' || text(I) ||
                    ' FOR EACH ROW EXECUTE PROCEDURE set_first_reported();';
            EXECUTE 'GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerabilities_active_' || text(I) || ' TO ve_db_user_evaluator;';
            EXECUTE 'GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerabilities_active_' || text(I) || ' TO ve_db_user_advisor_listener;';
            EXECUTE 'GRANT UPDATE, DELETE ON system_vulnerabilities_active_' || text(I) || ' TO ve_db_user_manager;';
            EXECUTE 'GRANT DELETE ON system_vulnerabilities_active_' || text(I) || ' TO ve_db_user_listener;';
            EXECUTE 'GRANT DELETE ON system_vulnerabilities_active_' || text(I) || ' TO ve_db_user_taskomatic;';
            EXECUTE 'GRANT DELETE ON system_vulnerabilities_active_' || text(I) || ' TO ve_db_user_vmaas_sync;';
            I = I + 1;
        END LOOP;
END;
$$ LANGUAGE plpgsql;

SELECT create_sys_vuln_active_partitions(256);
DROP FUNCTION create_sys_vuln_active_partitions;

-- business_risk table
CREATE TABLE IF NOT EXISTS business_risk (
  id INT NOT NULL,
  name VARCHAR NOT NULL UNIQUE,
  CHECK (NOT empty(name)),
  PRIMARY KEY (id)
) TABLESPACE pg_default;

INSERT INTO business_risk (id, name) VALUES
  (0, 'Not Defined'), (1, 'Low'), (2, 'Medium'), (3, 'High'), (4, 'Critical');

-- cve_preferences
CREATE TABLE IF NOT EXISTS cve_account_data (
  cve_id INT NOT NULL,
  rh_account_id INT NOT NULL,
  business_risk_id INT NOT NULL DEFAULT 0,
  business_risk_text TEXT,
  status_id INT NOT NULL DEFAULT 0,
  status_text TEXT,
  CONSTRAINT cve_id
    FOREIGN KEY (cve_id)
    REFERENCES cve_metadata (id),
  CONSTRAINT rh_account_id
    FOREIGN KEY (rh_account_id)
    REFERENCES rh_account (id),
  CONSTRAINT business_risk_id
    FOREIGN KEY (business_risk_id)
    REFERENCES business_risk (id),
  CONSTRAINT status_id
    FOREIGN KEY (status_id)
    REFERENCES status (id),
  UNIQUE (cve_id, rh_account_id)
) TABLESPACE pg_default;

-- manager needs to write into cve_account_preferences table
GRANT SELECT, INSERT, UPDATE, DELETE ON cve_account_data TO ve_db_user_manager;

-- manager user needs to change this table for opt-out functionality
GRANT SELECT, INSERT, UPDATE, DELETE ON cve_account_data TO ve_db_user_manager;
-- evaluator user needs to change this table
GRANT SELECT, INSERT, UPDATE, DELETE ON cve_account_data TO ve_db_user_evaluator;
-- listner user needs to change this table when deleting system
GRANT SELECT, INSERT, UPDATE, DELETE ON cve_account_data TO ve_db_user_listener;
-- advisor listener needs to update caches
GRANT SELECT, INSERT, UPDATE, DELETE ON cve_account_data TO ve_db_user_advisor_listener;
-- taskomatic user needs to update system_platfrom when marking system stale and delete on deleted systems
GRANT SELECT, UPDATE, DELETE ON system_platform TO ve_db_user_taskomatic;
GRANT SELECT, UPDATE, DELETE ON cve_account_data TO ve_db_user_taskomatic;

CREATE INDEX IF NOT EXISTS cve_account_data_rh_account_id_idx ON cve_account_data (rh_account_id);

-- cve_account_cache
CREATE TABLE IF NOT EXISTS cve_account_cache (
  rh_account_id INT NOT NULL,
  cve_id INT NOT NULL,
  systems_affected_rpmdnf INT NOT NULL,
  systems_affected_edge INT NOT NULL,
  systems_status_divergent INT NOT NULL,
  systems_affected_unpatched_rpmdnf INT NOT NULL,
  systems_affected_unpatched_edge INT NOT NULL,
  systems_status_divergent_unpatched INT,
  advisory_available BOOLEAN,
  CONSTRAINT rh_account_id
    FOREIGN KEY (rh_account_id)
    REFERENCES rh_account (id),
  CONSTRAINT cve_id
    FOREIGN KEY (cve_id)
    REFERENCES cve_metadata (id),
  UNIQUE (rh_account_id, cve_id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON cve_account_cache TO ve_db_user_taskomatic;

-- repo
CREATE TABLE IF NOT EXISTS repo (
  id BIGSERIAL,
  name TEXT NOT NULL UNIQUE, CHECK (NOT empty(name)),
  PRIMARY KEY (id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON repo TO ve_db_user_listener;


-- system_repo
CREATE TABLE IF NOT EXISTS system_repo (
  system_id INT NOT NULL,
  repo_id INT NOT NULL,
  UNIQUE (system_id, repo_id),
  CONSTRAINT system_platform_id
    FOREIGN KEY (system_id)
    REFERENCES system_platform (id),
  CONSTRAINT repo_id
    FOREIGN KEY (repo_id)
    REFERENCES repo (id)
) TABLESPACE pg_default;

CREATE INDEX ON system_repo(system_id);
CREATE INDEX ON system_repo(repo_id);

GRANT SELECT, INSERT, UPDATE, DELETE ON system_repo TO ve_db_user_listener;
GRANT DELETE ON system_repo TO ve_db_user_manager;
GRANT DELETE ON system_repo TO ve_db_user_taskomatic;

-- timestamp_kv
CREATE TABLE IF NOT EXISTS timestamp_kv (
  name TEXT NOT NULL UNIQUE, CHECK (NOT empty(name)),
  value TIMESTAMP WITH TIME ZONE NOT NULL
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON timestamp_kv TO ve_db_user_vmaas_sync;

-- vmaas_sync needs to delete from these tables to sync CVEs correctly
GRANT DELETE ON cve_account_data TO ve_db_user_vmaas_sync;
GRANT DELETE ON cve_account_cache TO ve_db_user_vmaas_sync;

-- content version table

CREATE TABLE IF NOT EXISTS content_version (
  insights_content_vulnerability TEXT,
  insights_content_vulnerability_repo TEXT,
  insights_playbooks TEXT,
  insights_playbooks_repo TEXT
) TABLESPACE pg_default;

INSERT INTO content_version VALUES (NULL, NULL, NULL, NULL);

GRANT UPDATE ON content_version TO ve_db_user_taskomatic;

-- announcement
CREATE TABLE IF NOT EXISTS announcement (
    id SERIAL,
    message TEXT NOT NULL,
    last_updated TIMESTAMP WITH TIME ZONE NOT NULL
);

-- rule account cache table
CREATE TABLE IF NOT EXISTS rule_account_cache (
    rh_account_id INT NOT NULL,
    rule_id INT NOT NULL,
    systems_affected INT NOT NULL,
    CONSTRAINT rh_account_id
      FOREIGN KEY (rh_account_id)
      REFERENCES rh_account (id),
    CONSTRAINT rule_id
      FOREIGN KEY (rule_id)
      REFERENCES insights_rule (id),
    UNIQUE (rh_account_id, rule_id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON rule_account_cache TO ve_db_user_taskomatic;

-- notified accounts table
CREATE TYPE notification AS enum('new-cve-cvss', 'new-cve-severity', 'new-cve-security-rule', 'any-cve-known-exploit');

CREATE TABLE IF NOT EXISTS notified_accounts (
  rh_account_id INT NOT NULL,
  cve_id INT NOT NULL,
  notif_type notification NOT NULL,
  UNIQUE (rh_account_id, cve_id, notif_type),
  CONSTRAINT rh_account_id
    FOREIGN KEY (rh_account_id)
    REFERENCES rh_account (id),
  CONSTRAINT cve_id
    FOREIGN KEY (cve_id)
    REFERENCES cve_metadata (id)
) TABLESPACE pg_default;

CREATE INDEX ON notified_accounts(rh_account_id);
CREATE INDEX ON notified_accounts(cve_id);
CREATE INDEX ON notified_accounts(notif_type);

GRANT SELECT, INSERT, UPDATE, DELETE ON notified_accounts TO ve_db_user_notificator;
GRANT SELECT, INSERT, UPDATE, DELETE ON notified_accounts TO ve_db_user_taskomatic;
GRANT SELECT, INSERT, UPDATE, DELETE ON notified_accounts TO ve_db_user_manager;

-- package name table
CREATE TABLE IF NOT EXISTS package_name (
  id BIGSERIAL,
  name TEXT NOT NULL UNIQUE, CHECK (NOT empty(name)),
  PRIMARY KEY (id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON package_name TO ve_db_user_evaluator;

-- cpe table
CREATE TABLE IF NOT EXISTS cpe (
  id BIGSERIAL,
  name TEXT NOT NULL UNIQUE, CHECK (NOT empty(name)),
  PRIMARY KEY (id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON cpe TO ve_db_user_evaluator;

-- module table
CREATE TABLE IF NOT EXISTS module (
  id BIGSERIAL,
  name TEXT NOT NULL, CHECK (NOT empty(name)),
  stream TEXT NOT NULL, CHECK (NOT empty(stream)),
  UNIQUE (name, stream),
  PRIMARY KEY (id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON module TO ve_db_user_evaluator;

-- vulnerable package table
CREATE TABLE IF NOT EXISTS vulnerable_package (
  id BIGSERIAL,
  package_name_id BIGINT NOT NULL,
  cpe_id BIGINT NOT NULL,
  module_id BIGINT,
  PRIMARY KEY (id),
  CONSTRAINT package_name_id
    FOREIGN KEY (package_name_id)
    REFERENCES package_name (id),
  CONSTRAINT cpe_id
    FOREIGN KEY (cpe_id)
    REFERENCES cpe (id),
  CONSTRAINT module_id
    FOREIGN KEY (module_id)
    REFERENCES module (id)
) TABLESPACE pg_default;

CREATE UNIQUE INDEX ON vulnerable_package(package_name_id, cpe_id) WHERE module_id IS NULL;
CREATE UNIQUE INDEX ON vulnerable_package(package_name_id, cpe_id, module_id) WHERE module_id IS NOT NULL;

GRANT SELECT, INSERT, UPDATE, DELETE ON vulnerable_package TO ve_db_user_evaluator;

-- vulnerable package cve table
CREATE TABLE IF NOT EXISTS vulnerable_package_cve (
  id BIGSERIAL,
  vulnerable_package_id BIGINT NOT NULL,
  cve_id BIGINT NOT NULL,
  UNIQUE (vulnerable_package_id, cve_id),
  PRIMARY KEY (id),
  CONSTRAINT vulnerable_package_id
    FOREIGN KEY (vulnerable_package_id)
    REFERENCES vulnerable_package (id),
  CONSTRAINT cve_id
    FOREIGN KEY (cve_id)
    REFERENCES cve_metadata (id)
) TABLESPACE pg_default;

CREATE INDEX ON vulnerable_package_cve(cve_id);

GRANT SELECT, INSERT, UPDATE, DELETE ON vulnerable_package_cve TO ve_db_user_evaluator;

-- system vulnerable package table
CREATE TABLE IF NOT EXISTS system_vulnerable_package (
  id BIGSERIAL,
  rh_account_id BIGINT NOT NULL,
  system_id BIGINT NOT NULL,
  vulnerable_package_id BIGINT NOT NULL,
  first_reported TIMESTAMP WITH TIME ZONE NOT NULL,
  CONSTRAINT rh_account_id
    FOREIGN KEY (rh_account_id)
    REFERENCES rh_account (id),
  CONSTRAINT system_platform_id
    FOREIGN KEY (system_id)
    REFERENCES system_platform (id),
  CONSTRAINT vulnerable_package_id
    FOREIGN KEY (vulnerable_package_id)
    REFERENCES vulnerable_package (id)
) PARTITION BY HASH (rh_account_id);

GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerable_package TO ve_db_user_evaluator;
GRANT SELECT, DELETE ON system_vulnerable_package TO ve_db_user_taskomatic;
GRANT SELECT, DELETE ON system_vulnerable_package TO ve_db_user_manager;

-- create function to create all partitions
CREATE OR REPLACE FUNCTION create_sys_vuln_pkg_partitions(parts INTEGER)
    RETURNS VOID AS
$$
DECLARE
    I INTEGER;
BEGIN
    I := 0;
    WHILE I < parts
        LOOP
            EXECUTE 'CREATE TABLE IF NOT EXISTS system_vulnerable_package_' || text(I) || ' PARTITION OF system_vulnerable_package' ||
                    ' FOR VALUES WITH ( MODULUS ' || text(parts) || ', REMAINDER ' || text(I) || ') TABLESPACE pg_default;';
            EXECUTE 'ALTER TABLE system_vulnerable_package_' || text(I) || ' ADD PRIMARY KEY (id);';
            EXECUTE 'ALTER TABLE system_vulnerable_package_' || text(I) || ' ADD CONSTRAINT system_vulnerable_package_' || text(I) ||
                    '_system_id_vuln_pkg_id_key UNIQUE (system_id, vulnerable_package_id);';
            EXECUTE 'CREATE INDEX ON system_vulnerable_package_' || text(I) || '(vulnerable_package_id);';
            EXECUTE 'CREATE INDEX ON system_vulnerable_package_' || text(I) || '(rh_account_id);';
            EXECUTE 'CREATE TRIGGER system_vulnerable_package_set_first_reported BEFORE INSERT ON system_vulnerable_package_' || text(I) ||
                    ' FOR EACH ROW EXECUTE PROCEDURE set_first_reported();';
            EXECUTE 'GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerable_package_' || text(I) || ' TO ve_db_user_evaluator;';
            I = I + 1;
        END LOOP;
END;
$$ LANGUAGE plpgsql;

SELECT create_sys_vuln_pkg_partitions(256);
DROP FUNCTION create_sys_vuln_pkg_partitions;

-- system_cve_data
CREATE TABLE IF NOT EXISTS system_cve_data (
  system_id BIGINT NOT NULL,
  cve_id BIGINT NOT NULL,
  status_id INT NOT NULL DEFAULT 0,
  status_text TEXT,
  CONSTRAINT system_id
    FOREIGN KEY (system_id)
    REFERENCES system_platform (id),
  CONSTRAINT cve_id
    FOREIGN KEY (cve_id)
    REFERENCES cve_metadata (id),
  CONSTRAINT status_id
    FOREIGN KEY (status_id)
    REFERENCES status (id),
  UNIQUE (system_id, cve_id)
) TABLESPACE pg_default;

-- for CVE deletion
CREATE INDEX ON system_cve_data(cve_id);

GRANT SELECT, INSERT, UPDATE, DELETE ON system_cve_data TO ve_db_user_manager;
GRANT DELETE ON system_cve_data TO ve_db_user_taskomatic;
GRANT DELETE ON system_cve_data TO ve_db_user_vmaas_sync;

-- recalc_event table
CREATE TABLE IF NOT EXISTS recalc_event (
  id BIGSERIAL,
  created TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
  changed_packages JSONB NOT NULL,
  PRIMARY KEY (id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON recalc_event TO ve_db_user_vmaas_sync;

-- ----------------------------------------------------------------------------
-- Read access for all users
-- ----------------------------------------------------------------------------

-- user for evaluator component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_evaluator;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_evaluator;

-- user for listener component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_listener;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_listener;

-- user for UI manager component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_manager;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_manager;
GRANT INSERT, DELETE ON announcement TO ve_db_user_manager;

-- user for VMaaS sync component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_vmaas_sync;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_vmaas_sync;

-- user for taskomatic service
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_taskomatic;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_taskomatic;

-- user for advisor listener
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_advisor_listener;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_advisor_listener;

-- user for notificator
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_notificator;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_notificator;


-- ----------------------------------------------------------------------------
-- Setup for Cyndi component
-- ----------------------------------------------------------------------------
CREATE SCHEMA IF NOT EXISTS inventory;

-- user and role setup

-- admin role
GRANT ALL PRIVILEGES ON SCHEMA inventory TO cyndi_admin;

-- reader role, which NEEDS be granted to engine users for read-only actions
GRANT USAGE ON SCHEMA inventory TO cyndi_reader;

-- grants for vulnerability users - read-only
GRANT cyndi_reader TO ve_db_user_manager;
GRANT cyndi_reader TO ve_db_user_taskomatic;
GRANT cyndi_reader TO ve_db_user_advisor_listener;
GRANT cyndi_reader TO ve_db_user_listener;
