-- ---------------------------------------------------------------------------
-- Vulnerability Engine DB Users
--
-- Users are created in ve_db_user_create_postgresql.sql.  Permissions
-- are granted here.  In this top section, read access is granted.  Throughout
-- the rest of this file, write access is granted to specific users on
-- specific tables.  The goal is to have one user per Vulnerability Engine
-- component, and that user should be the only user allowed to write to
-- tables for which the component is responsible.
--
-- NOTE: If a table uses a sequence, make sure to grant USAGE, SELECT, UPDATE
-- on the sequence to the user.  SERIAL and BIGSERIAL are create table time
-- macros around sequences.
-- ---------------------------------------------------------------------------

-- user for evaluator component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_evaluator;

-- user for UI manager component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_manager;

-- ---------------------------------------------------------------------------
-- Functions
-- ---------------------------------------------------------------------------

-- empty
CREATE OR REPLACE FUNCTION empty(t TEXT)
  RETURNS BOOLEAN as
$empty$
  BEGIN
    RETURN t ~ '^[[:space:]]*$';
  END;
$empty$
  LANGUAGE 'plpgsql';

-- prevent_update
CREATE OR REPLACE FUNCTION prevent_update()
  RETURNS TRIGGER AS
$prevent_update$
  BEGIN
    IF (TG_OP = 'UPDATE') THEN
        RAISE EXCEPTION 'Update of not allowed';
    END IF;
    RETURN NULL;
  END;
$prevent_update$
  LANGUAGE 'plpgsql';

-- set_first_reported
CREATE OR REPLACE FUNCTION set_first_reported()
  RETURNS TRIGGER AS
$set_first_reported$
  BEGIN
    NEW.first_reported := CURRENT_TIMESTAMP;
    RETURN NEW;
  END;
$set_first_reported$
  LANGUAGE 'plpgsql';


-- ----------------------------------------------------------------------------
-- Tables
-- ----------------------------------------------------------------------------

-- system_repos
CREATE TABLE IF NOT EXISTS system_repos (
  uuid TEXT NOT NULL, CHECK (NOT empty(uuid)),
  repo_label TEXT NOT NULL, CHECK (NOT empty (repo_label)),
  UNIQUE (uuid, repo_label)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON system_repos TO ve_db_user_evaluator;

-- system_platform
CREATE TABLE IF NOT EXISTS system_platform (
  uuid TEXT NOT NULL, CHECK (NOT empty(uuid)),
  basearch TEXT NOT NULL,
  releasever TEXT NOT NULL,
  UNIQUE (uuid)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON system_repos TO ve_db_user_evaluator;

-- system_packages
CREATE TABLE IF NOT EXISTS system_packages (
  uuid TEXT NOT NULL, CHECK (NOT empty(uuid)),
  nevra TEXT NOT NULL, CHECK (NOT empty(nevra)),
  first_reported TIMESTAMP WITH TIME ZONE NOT NULL,
  UNIQUE (uuid, nevra)
) TABLESPACE pg_default;

CREATE TRIGGER system_packages_prevent_update BEFORE UPDATE ON system_packages
  FOR EACH STATEMENT EXECUTE PROCEDURE prevent_update();

CREATE TRIGGER system_packages_set_first_reported BEFORE INSERT ON system_packages
  FOR EACH ROW EXECUTE PROCEDURE set_first_reported();

GRANT SELECT, INSERT, UPDATE, DELETE ON system_packages TO ve_db_user_evaluator;



-- system_vulnerabilities
CREATE TABLE IF NOT EXISTS system_vulnerabilities (
  uuid TEXT NOT NULL, CHECK (NOT empty(uuid)),
  cve TEXT NOT NULL, CHECK (NOT empty(uuid)),
  first_reported TIMESTAMP WITH TIME ZONE NOT NULL,
  UNIQUE (uuid, cve)
) TABLESPACE pg_default;

CREATE INDEX ON system_vulnerabilities(cve);

CREATE TRIGGER system_vulnerabilities_set_first_reported BEFORE INSERT ON system_vulnerabilities
  FOR EACH ROW EXECUTE PROCEDURE set_first_reported();

GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerabilities TO ve_db_user_evaluator;

