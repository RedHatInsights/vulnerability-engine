-- ---------------------------------------------------------------------------
-- Vulnerability Engine DB Users
--
-- Users are created in ve_db_user_create_postgresql.sql.  Permissions
-- are granted here.  Throughout this file, write access is granted to
-- specific users on specific tables just after the table is defined.
-- The goal is to have one user per Vulnerability Engine component, and
-- that user should be the only user allowed to write to tables for which
-- the component is responsible.  In the bottom section, read access is
-- granted on all tables to all users.
--
-- NOTE: If a table uses a sequence, make sure to grant USAGE, SELECT, UPDATE
-- on the sequence to the user.  SERIAL and BIGSERIAL are create table time
-- macros around sequences.
-- ---------------------------------------------------------------------------


-- ---------------------------------------------------------------------------
-- Functions
-- ---------------------------------------------------------------------------

-- empty
CREATE OR REPLACE FUNCTION empty(t TEXT)
  RETURNS BOOLEAN as
$empty$
  BEGIN
    RETURN t ~ '^[[:space:]]*$';
  END;
$empty$
  LANGUAGE 'plpgsql';

-- set_first_reported
CREATE OR REPLACE FUNCTION set_first_reported()
  RETURNS TRIGGER AS
$set_first_reported$
  BEGIN
    IF NEW.first_reported IS NULL THEN
      NEW.first_reported := CURRENT_TIMESTAMP;
    END IF;
    RETURN NEW;
  END;
$set_first_reported$
  LANGUAGE 'plpgsql';

-- set_last_updated
CREATE OR REPLACE FUNCTION set_last_updated()
  RETURNS TRIGGER AS
$set_last_updated$
  BEGIN
    IF (TG_OP = 'UPDATE') OR
       NEW.last_updated IS NULL THEN
      NEW.last_updated := CURRENT_TIMESTAMP;
    END IF;
    RETURN NEW;
  END;
$set_last_updated$
  LANGUAGE 'plpgsql';

-- check_unchanged
CREATE OR REPLACE FUNCTION check_unchanged()
  RETURNS TRIGGER AS
$check_unchanged$
  BEGIN
    IF (TG_OP = 'INSERT') AND
       NEW.unchanged_since IS NULL THEN
      NEW.unchanged_since := CURRENT_TIMESTAMP;
    END IF;
    IF (TG_OP = 'UPDATE') AND
       NEW.json_checksum <> OLD.json_checksum THEN
      NEW.unchanged_since := CURRENT_TIMESTAMP;
    END IF;
    RETURN NEW;
  END;
$check_unchanged$
  LANGUAGE 'plpgsql';


-- ----------------------------------------------------------------------------
-- Tables
-- ----------------------------------------------------------------------------

-- system_platform
CREATE TABLE IF NOT EXISTS system_platform (
  insights_id TEXT NOT NULL, CHECK (NOT empty(insights_id)),
  inventory_id TEXT NOT NULL, CHECK (NOT empty(inventory_id)),
  rh_account TEXT NOT NULL, CHECK (NOT empty(rh_account)),
  display_name TEXT NOT NULL, CHECK (NOT empty(display_name)),
  first_reported TIMESTAMP WITH TIME ZONE NOT NULL,
  s3_url TEXT,
  vmaas_json TEXT,
  json_checksum TEXT,
  last_updated TIMESTAMP WITH TIME ZONE NOT NULL,
  unchanged_since TIMESTAMP WITH TIME ZONE NOT NULL,
  UNIQUE (insights_id),
  UNIQUE (inventory_id)
) TABLESPACE pg_default;

CREATE INDEX ON system_platform(rh_account);

CREATE TRIGGER system_platform_set_first_reported
  BEFORE INSERT ON system_platform
  FOR EACH ROW EXECUTE PROCEDURE set_first_reported();

CREATE TRIGGER system_platform_set_last_updated
  BEFORE INSERT OR UPDATE ON system_platform
  FOR EACH ROW EXECUTE PROCEDURE set_last_updated();

CREATE TRIGGER system_platform_check_unchanged
  BEFORE INSERT OR UPDATE ON system_platform
  FOR EACH ROW EXECUTE PROCEDURE check_unchanged();

GRANT SELECT, INSERT, UPDATE, DELETE ON system_platform TO ve_db_user_listener;


-- vulnerability_source
CREATE TABLE IF NOT EXISTS vulnerability_source (
  id SERIAL,
  name TEXT NOT NULL UNIQUE, CHECK (NOT empty(name)),
  PRIMARY KEY (id)
) TABLESPACE pg_default;

INSERT INTO vulnerability_source (name) VALUES
  ('VMAAS'), ('RULES');


-- cve_impact
CREATE TABLE IF NOT EXISTS cve_impact (
  id INT NOT NULL,
  name TEXT NOT NULL UNIQUE, CHECK (NOT empty(name)),
  PRIMARY KEY (id)
)TABLESPACE pg_default;

INSERT INTO cve_impact (id, name) VALUES
  (0, 'NotSet'), (1, 'None'), (2, 'Low'), (3, 'Medium'), (4, 'Moderate'),
  (5, 'Important'), (6, 'High'), (7, 'Critical');


-- cve_metadata
CREATE TABLE IF NOT EXISTS cve_metadata (
  cve TEXT NOT NULL, CHECK (NOT empty(cve)),
  description TEXT NOT NULL, CHECK (NOT empty(description)),
  impact_id INT NOT NULL,
  public_date TIMESTAMP WITH TIME ZONE NULL,
  modified_date TIMESTAMP WITH TIME ZONE NULL,
  cvss3_score NUMERIC(5,3),
  cvss3_metrics TEXT,
  cvss2_score NUMERIC(5,3),
  cvss2_metrics TEXT,
  PRIMARY KEY (cve),
  CONSTRAINT impact_id
    FOREIGN KEY (impact_id)
    REFERENCES cve_impact (id)
) TABLESPACE pg_default;

CREATE INDEX ON cve_metadata(impact_id);
CREATE INDEX ON cve_metadata(cvss3_score);
CREATE INDEX ON cve_metadata(cvss2_score);

GRANT SELECT, INSERT, UPDATE, DELETE ON cve_metadata TO ve_db_user_evaluator;



-- system_vulnerabilities
CREATE TABLE IF NOT EXISTS system_vulnerabilities (
  id SERIAL,
  insights_id TEXT NOT NULL, CHECK (NOT empty(insights_id)),
  cve TEXT NOT NULL, CHECK (NOT empty(cve)),
  vulnerability_source INT NOT NULL,
  first_reported TIMESTAMP WITH TIME ZONE NOT NULL,
  when_mitigated TIMESTAMP WITH TIME ZONE DEFAULT NULL,
  PRIMARY KEY (id),
  UNIQUE (insights_id, cve),
  CONSTRAINT vulnerability_source
    FOREIGN KEY (vulnerability_source)
    REFERENCES vulnerability_source (id),
  CONSTRAINT system_platform_insights_id
    FOREIGN KEY (insights_id)
    REFERENCES system_platform (insights_id),
  CONSTRAINT cve_metadata_cve
    FOREIGN KEY (cve)
    REFERENCES cve_metadata (cve)
) TABLESPACE pg_default;

CREATE INDEX ON system_vulnerabilities(cve);

CREATE TRIGGER system_vulnerabilities_set_first_reported BEFORE INSERT ON system_vulnerabilities
  FOR EACH ROW EXECUTE PROCEDURE set_first_reported();

GRANT SELECT, INSERT, UPDATE, DELETE ON system_vulnerabilities TO ve_db_user_evaluator;


-- prodsec_error_key
CREATE TABLE IF NOT EXISTS prodsec_error_key (
  id SERIAL,
  name TEXT NOT NULL UNIQUE, CHECK (NOT empty(name)),
  PRIMARY KEY (id)
) TABLESPACE pg_default;

GRANT SELECT, INSERT, UPDATE, DELETE ON prodsec_error_key TO ve_db_user_evaluator;

-- sys_vuln_rules_results
CREATE TABLE IF NOT EXISTS sys_vuln_rules_results (
  sys_vuln_id INT NOT NULL,
  error_key_id INT NOT NULL,
  details TEXT,
  UNIQUE (sys_vuln_id, error_key_id),
  CONSTRAINT sys_vuln_id
    FOREIGN KEY (sys_vuln_id)
    REFERENCES system_vulnerabilities (id),
  CONSTRAINT prodsec_error_key_id
    FOREIGN KEY (error_key_id)
    REFERENCES prodsec_error_key (id)
) TABLESPACE pg_default;

CREATE INDEX ON sys_vuln_rules_results (error_key_id);

GRANT SELECT, INSERT, UPDATE, DELETE ON sys_vuln_rules_results TO ve_db_user_evaluator;


-- ----------------------------------------------------------------------------
-- Read access for all users
-- ----------------------------------------------------------------------------

-- user for evaluator component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_evaluator;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_evaluator;

-- user for listener component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_listener;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ve_db_user_listener;

-- user for UI manager component
GRANT SELECT ON ALL TABLES IN SCHEMA public TO ve_db_user_manager;
