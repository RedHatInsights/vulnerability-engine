"""
Common and utility functions/classes for vulnerability-pdf-exporter
"""

from prometheus_client import Counter
from common.logging import get_logger

LOGGER = get_logger(__name__)

REQUEST_COUNTS = Counter('ve_pdf_exporter_invocations', 'Number of calls per handler', ['method', 'endpoint'])


class Request:
    """general class for processing requests"""

    _endpoint_name = None

    @staticmethod
    def format_exception(text, status_code):
        """Formats error message to desired format"""
        return {"errors": [{"status": str(status_code), "detail": text}]}, status_code

    @classmethod
    def handle_errors(cls, fun, **kwargs):
        """ Execute provided function, while handling all common errors, and returning a formatted response """
        try:
            return fun(**kwargs)
        except Exception:  # pylint: disable=broad-except
            LOGGER.exception('Unhandled exception: ')
            return cls.format_exception('Internal server error', 500)


class GetRequest(Request):
    """general class for processing GET requests"""

    @classmethod
    def get(cls, **kwargs):
        """Answer GET request"""
        REQUEST_COUNTS.labels('get', cls._endpoint_name).inc()
        return cls.handle_errors(cls.handle_get, **kwargs)

    @classmethod
    def handle_get(cls, **kwargs):  # pragma: no cover
        """To be implemented in child classes"""
        raise NotImplementedError
