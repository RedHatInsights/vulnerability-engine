#!/usr/bin/env python3
"""
Periodic DB metrics to Prometheus exporter
"""

import psycopg2
from prometheus_client import Gauge

from common.database_handler import DB_NAME, DB_USER, DB_PASS, DB_HOST, DB_PORT, DB_SSL_MODE, DB_SSL_ROOT_CERT_PATH
from common.logging import get_logger, init_logging

LOGGER = get_logger(__name__)

METRIC_SYSTEMS = Gauge("ve_db_systems_count", "Total number of systems in DB")
METRIC_CYNDI_SYSTEMS = Gauge("ve_db_cyndi_systems_count", "Total number of systems in Cyndi schema in DB")
METRIC_TABLE_SIZE = Gauge("ve_db_table_size", "Size of tables in DB", ["table"])


def run():
    """Application entrypoint"""
    LOGGER.info("Started db_metrics job")

    conn = psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASS, host=DB_HOST, port=DB_PORT, sslmode=DB_SSL_MODE,
                            sslrootcert=DB_SSL_ROOT_CERT_PATH)
    cur = conn.cursor()

    cur.execute("""SELECT COUNT(*) FROM system_platform""")
    METRIC_SYSTEMS.set(int(cur.fetchone()[0]))

    cur.execute("""SELECT COUNT(*) FROM inventory.hosts""")
    METRIC_CYNDI_SYSTEMS.set(int(cur.fetchone()[0]))

    cur.execute("""SELECT tablename AS key, pg_total_relation_size(quote_ident(tablename)) AS value
                   FROM (SELECT * FROM pg_catalog.pg_tables WHERE schemaname = 'public') t""")
    for key, value in cur.fetchall():
        METRIC_TABLE_SIZE.labels(table=key).set(int(value))

    cur.close()
    conn.close()
    LOGGER.info("Finished db_metrics job")


if __name__ == "__main__":
    init_logging()
    run()
