"""
Periodic update of insights security rules
"""

from base64 import b64encode
import json
import os
import requests

import psycopg2
from psycopg2.extras import execute_values

from common.logging import get_logger

DB_NAME = os.getenv('POSTGRESQL_DATABASE')
DB_USER = os.getenv('POSTGRESQL_USER')
DB_PASS = os.getenv('POSTGRESQL_PASSWORD')
DB_HOST = os.getenv('POSTGRESQL_HOST')
DB_PORT = int(os.getenv('POSTGRESQL_PORT', '5432'))

INSIGHTS_RULES_API = os.getenv('INSIGHTS_RULES_API', 'http://platform_mock:8000/api/insights/v1/rule/')
LOGGER = get_logger(__name__)


def build_auth_header(account):
    """Build base64 auth header"""
    LOGGER.debug('Using account: %s', account)
    return b64encode(json.dumps({
        'identity': {
            'account_number': account,
            'user': {'username': 'vulnerability-cron'}
        }}).encode()).decode()


def run():  # pylint: disable=too-many-branches, too-many-statements
    """Application entrypoint"""
    LOGGER.debug('Using rules URL: %s', INSIGHTS_RULES_API)
    conn = psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASS, host=DB_HOST, port=DB_PORT)
    cur = conn.cursor()

    cur.execute("""SELECT name from rh_account LIMIT 1""")
    account = cur.fetchone()
    if not account:
        LOGGER.info('Database is empty, exiting.')
        return
    headers = {
        'x-rh-identity': build_auth_header(account[0])
    }

    to_update = []
    to_enable = []
    to_enable_names = []
    to_disable = []
    to_disable_names = []
    cur.execute("""SELECT id, name, active from insights_rule""")
    for rule_id, rule_name, active in cur.fetchall():
        url = '%s%s/' % (INSIGHTS_RULES_API, rule_name)
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            if response.status_code == 404:
                if active:  # disable only those rules which are currently active
                    to_disable.append((rule_id,))
                    to_disable_names.append(rule_name)
            else:
                LOGGER.error('Got %s status code from insights API on URL: %s', response.status_code, url)
            continue
        response_dict = json.loads(response.content)
        to_update.append((rule_id, response_dict['description'], response_dict['summary'], response_dict['generic'], response_dict['reboot_required'],
                          response_dict['playbook_count'], response_dict['resolution_set'][0]['resolution_risk']['risk'],
                          response_dict['node_id'] if response_dict['node_id'] else None,))
        if not active:
            to_enable.append((rule_id))
            to_enable_names.append(rule_name)

    if to_update:
        LOGGER.debug('Updating values: %s', to_update)
        execute_values(cur, """UPDATE insights_rule AS ir SET description_text = v.description, summary_text = v.summary, generic_text = v.generic,
                            reboot_required = v.reboot_required, playbook_count = v.playbook_count, change_risk = v.change_risk,
                            kbase_node_id = v.kbase_node_id, active = 'T' FROM (VALUES %s)
                            AS v(id, description, summary, generic, reboot_required, playbook_count, change_risk, kbase_node_id)
                            WHERE v.id = ir.id""",
                       to_update, template='(%s::integer, %s, %s, %s, %s, %s::integer, %s::integer, %s::integer)', page_size=len(to_update))
        conn.commit()
    if to_enable:
        LOGGER.info('Enabling following rules: %s', to_enable_names)
        cur.execute("""SELECT system_id, COUNT(cve_id)
                         FROM system_vulnerabilities sv
                         JOIN insights_rule ir ON sv.rule_id = ir.id
                        WHERE sv.when_mitigated IS NOT NULL
                          AND sv.rule_id IN %s
                     GROUP BY system_id""", (tuple(to_enable),))
        system_cve_increase = []
        for system_id, cve_increase in cur.fetchall():
            system_cve_increase.append((system_id, cve_increase))
        if system_cve_increase:
            execute_values(cur, """UPDATE system_platform AS sp SET cve_count_cache = cve_count_cache + v.cve_increase
                                FROM (VALUES %s) AS v(id, cve_increase) WHERE sp.id = v.id""", system_cve_increase, page_size=len(system_cve_increase))

        cur.execute("""SELECT sp.rh_account_id, sv.cve_id, COUNT(sp.id) as cve_inc, COUNT(cad.status_id) as status_inc
                         FROM system_vulnerabilities sv
                         JOIN insights_rule ir ON sv.rule_id = ir.id
                         JOIN system_platform sp ON sp.id = sv.system_id
              LEFT OUTER JOIN cve_account_data cad ON sv.cve_id = cad.cve_id AND sp.rh_account_id = cad.rh_account_id AND cad.status_id != sv.status_id
                        WHERE sv.when_mitigated IS NOT NULL
                          AND sv.rule_id IN %s
                     GROUP BY sp.rh_account_id, sv.cve_id;""", (tuple(to_enable),))
        cve_count_increase = []
        for rh_account_id, cve_id, cve_inc, status_inc in cur.fetchall():
            cve_count_increase.append((rh_account_id, cve_id, cve_inc, status_inc))
        if cve_count_increase:
            execute_values(cur, """UPDATE cve_account_data AS cad SET systems_affected = systems_affected + v.cve_inc,
                                                                      systems_status_divergent = systems_status_divergent + v.status_inc
                                FROM (VALUES %s) AS v(rh_account_id, cve_id, cve_inc, status_inc)
                                WHERE cad.rh_account_id = v.rh_account_id AND cad.cve_id = v.cve_id
            """, cve_count_increase, page_size=len(cve_count_increase))

        conn.commit()
    if to_disable:
        LOGGER.info('Disabling following rules: %s', to_disable_names)
        execute_values(cur, """UPDATE insights_rule AS ir SET active = 'F' FROM (VALUES %s) AS v(id) WHERE ir.id = v.id""",
                       [(x,) for x in to_disable], page_size=len(to_disable))

        cur.execute("""SELECT system_id, COUNT(cve_id)
                         FROM system_vulnerabilities sv
                         JOIN insights_rule ir ON sv.rule_id = ir.id
                        WHERE sv.when_mitigated IS NOT NULL
                          AND sv.rule_id IN %s
                     GROUP BY system_id""", (tuple(to_disable),))
        system_cve_decrease = []
        for system_id, cve_decrease in cur.fetchall():
            system_cve_decrease.append((system_id, cve_decrease))
        if system_cve_decrease:
            execute_values(cur, """UPDATE system_platform AS sp SET cve_count_cache = cve_count_cache - v.cve_decrease
                                FROM (VALUES %s) AS v(id, cve_decrease) WHERE sp.id = v.id""", system_cve_decrease, page_size=len(system_cve_decrease))

        cur.execute("""SELECT sp.rh_account_id, sv.cve_id, COUNT(sp.id) as cve_dec, COUNT(cad.status_id) as status_dec
                         FROM system_vulnerabilities sv
                         JOIN insights_rule ir ON sv.rule_id = ir.id
                         JOIN system_platform sp ON sp.id = sv.system_id
              LEFT OUTER JOIN cve_account_data cad ON sv.cve_id = cad.cve_id AND sp.rh_account_id = cad.rh_account_id AND cad.status_id != sv.status_id
                        WHERE sv.when_mitigated IS NOT NULL
                          AND sv.rule_id IN %s
                     GROUP BY sp.rh_account_id, sv.cve_id;""", (tuple(to_disable),))
        cve_count_decrease = []
        for rh_account_id, cve_id, cve_dec, status_dec in cur.fetchall():
            cve_count_decrease.append((rh_account_id, cve_id, cve_dec, status_dec))
        if cve_count_decrease:
            execute_values(cur, """UPDATE cve_account_data AS cad SET systems_affected = systems_affected - v.cve_dec,
                                                                      systems_status_divergent = systems_status_divergent - v.status_dec
                                FROM (VALUES %s) AS v(rh_account_id, cve_id, cve_dec, status_dec)
                                WHERE cad.rh_account_id = v.rh_account_id AND cad.cve_id = v.cve_id
            """, cve_count_decrease, page_size=len(cve_count_decrease))

        conn.commit()

    cur.close()
    conn.close()
