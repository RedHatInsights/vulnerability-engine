"""
Periodic discovery of stale systems
"""

import psycopg2

from common.database_handler import DB_NAME, DB_USER, DB_PASS, DB_HOST, DB_PORT
from common.logging import get_logger, init_logging

LOGGER = get_logger(__name__)


def run():
    """Application entrypoint"""
    LOGGER.info('Started stale_systems job.')

    conn = psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASS, host=DB_HOST, port=DB_PORT)
    cur = conn.cursor()
    updated = 0

    while True:
        cur.execute("""SELECT id from system_platform sp
                    WHERE when_deleted IS NULL
                      AND stale_warning_timestamp IS NOT NULL
                      AND stale = 'F'
                      AND now() > stale_warning_timestamp LIMIT 1 FOR UPDATE OF sp""")
        system_id = cur.fetchone()
        if not system_id:
            break
        cur.execute("""UPDATE system_platform SET stale = 'T' where id = %s""", system_id)
        conn.commit()
        updated += 1
    cur.close()
    conn.close()

    LOGGER.info('Marked %s systems as stale.', updated)

    LOGGER.info('Finished stale_systems job.')


if __name__ == '__main__':
    init_logging()
    run()
