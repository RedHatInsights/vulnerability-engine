"""
Periodic cleanup of deleted systems
"""

import os
from datetime import datetime, timedelta

import psycopg2
import pytz

from common.database_handler import DB_NAME, DB_USER, DB_PASS, DB_HOST, DB_PORT
from common.logging import get_logger, init_logging

LOGGER = get_logger(__name__)

SYSTEM_DELETION_THRESHOLD = int(os.getenv('SYSTEM_DELETION_THRESHOLD', '24'))  # 24 hours


def run():
    """Application entrypoint"""
    LOGGER.info('Started delete_systems job.')

    conn = psycopg2.connect(dbname=DB_NAME, user=DB_USER, password=DB_PASS, host=DB_HOST, port=DB_PORT)
    cur = conn.cursor()
    deleted = 0

    while True:
        curr_time = datetime.now(tz=pytz.utc)
        cur.execute("""SELECT inventory_id from system_platform sp
                       WHERE when_deleted IS NOT NULL
                         AND when_deleted > %s
                       LIMIT 1 FOR UPDATE OF sp""", (curr_time - timedelta(hours=SYSTEM_DELETION_THRESHOLD),))
        inventory_id = cur.fetchone()
        if not inventory_id:
            break
        cur.execute("""SELECT deleted_inventory_id FROM delete_system(%s)""", (inventory_id[0],))
        success = cur.fetchone()
        if success:
            deleted += 1
        else:
            LOGGER.error("Unable to delete inventory_id: %s", inventory_id)
        conn.commit()
    cur.close()
    conn.close()

    LOGGER.info('Cleared %s deleted systems.', deleted)

    LOGGER.info('Finished delete_systems job.')


if __name__ == '__main__':
    init_logging()
    run()
