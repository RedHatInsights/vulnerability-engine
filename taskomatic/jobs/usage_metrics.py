"""
Feature and product usage metrics.
"""
import datetime
import io
import time
from functools import wraps

from prometheus_client import Gauge

from common.config import Config
from common.logging import get_logger
from common.logging import init_logging
from taskomatic.jobs.common import get_conn

LOGGER = get_logger(__name__)

CFG = Config()

MAX_RESULTS_COUNT = 20
SYSTEM_NUMS = [50, 100, 500, 1000]

CVE_STATUS_USAGE_T = Gauge("ve_usage_cve_status_t", "Total number of cve status usage", ["account"])
CVE_STATUS_USAGE_TF = Gauge("ve_usage_cve_status_tf", "Total number of cve status usage without RH accounts", ["account"])
SYSTEM_CVE_STATUS_USAGE_T = Gauge("ve_usage_system_cve_status_t", "Total number of system cve status usage", ["account"])
SYSTEM_CVE_STATUS_USAGE_TF = Gauge(
    "ve_usage_system_cve_status_tf", "Total number of system cve status usage without RH accounts", ["account"]
)
CVE_BRISK_USAGE_T = Gauge("ve_usage_cve_business_risk_t", "Total number of business risk usage", ["account"])
CVE_BRISK_USAGE_TF = Gauge("ve_usage_cve_business_risk_tf", "Total number of business risk usage without RH accounts", ["account"])
BIG_ACCOUNTS_COUNT_F = Gauge("ve_usage_big_accounts_count_f", "Count of accounts with systems without RH accounts", ["systems"])
AVG_UNFIXED_AGE = Gauge("ve_usage_avg_unfixed_age", "Average age of unfixed cves by severity (non-rh accounts)", ["severity"])


def timer(report_name):
    """Counts the time spent on the request"""

    def _decorator_timer(func):
        @wraps(func)
        def _wrapper_timer(*args, **kwargs):
            start = time.time()

            LOGGER.debug("Generating %s report...", report_name)
            try:
                return func(*args, **kwargs)
            finally:
                end = (time.time() - start) * 1000

                LOGGER.debug("-----------------------------------")
                LOGGER.info("%s query took %s milliseconds", report_name, str(end))

        return _wrapper_timer

    return _decorator_timer


class MetricsGatherer:
    """Metrics Gatherer"""

    def __init__(self, cur, accounts_blacklist_text=None):
        self.cursor = cur
        self.accounts_blacklist: tuple = tuple(self.process_accounts_blacklist_text(accounts_blacklist_text))
        LOGGER.debug("Exclude accounts: %s", sorted(self.accounts_blacklist))
        self.today = datetime.date.today()

    @staticmethod
    def process_accounts_blacklist_text(exclude_accounts_text) -> set:
        """Retrieve list of blacklisted accounts from env var"""
        exclude_accounts = set()
        if exclude_accounts_text:
            excludes_input = io.StringIO(exclude_accounts_text)
            lines = excludes_input.readlines()
            for line in lines:
                account = line.split("#")[0].strip()
                if account:
                    exclude_accounts.add(account)
        return exclude_accounts

    @timer("CVE-status")
    def query_cve_status_usage(self):
        """Query for cve status usage."""
        cve_status_usage = []
        LOGGER.debug("  account    # CVE-status set")
        LOGGER.debug("------------ ----------------------")
        self.cursor.execute(
            """SELECT ra.account_number,
                              count(ra.account_number)
                         FROM cve_account_data cad
                         JOIN rh_account ra
                           ON cad.rh_account_id = ra.id
                        WHERE cad.status_id != 0
                     GROUP BY ra.account_number
                     ORDER BY count(ra.account_number) DESC"""
        )
        for row in self.cursor.fetchall():
            cve_status_usage.append(row)
            LOGGER.debug("%12s %s", row[0], row[1])
        return cve_status_usage

    @timer("system-CVE-status")
    def query_system_cve_status_usage(self):
        """Query for system cve status usage."""
        system_cve_status_usage = []
        LOGGER.debug("  account    # system-CVE-status set")
        LOGGER.debug("------------ ----------------------")
        self.cursor.execute(
            """SELECT ra.account_number,
                              count(ra.account_number)
                         FROM system_vulnerabilities sv
                         JOIN system_platform sp
                           ON sv.system_id = sp.id
                         JOIN rh_account ra
                           ON sp.rh_account_id = ra.id
                    LEFT JOIN system_cve_data scd
                           ON (sv.system_id = scd.system_id AND sv.cve_id = scd.cve_id)
                        WHERE COALESCE(scd.status_id, 0) != 0
                          AND sp.opt_out = false
                          AND sp.stale = false
                          AND sp.when_deleted IS NULL
                          AND sv.rh_account_id = sp.rh_account_id
                     GROUP BY ra.account_number
                     ORDER BY count(ra.account_number) DESC"""
        )
        for row in self.cursor.fetchall():
            system_cve_status_usage.append(row)
            LOGGER.debug("%12s %s", row[0], row[1])
        return system_cve_status_usage

    @timer("CVE-business risk")
    def query_cve_business_risk_usage(self):
        """Query for cve business risk usage."""
        cve_business_risk_usage = []
        LOGGER.debug("  account    # CVE-business risk set")
        LOGGER.debug("------------ ----------------------")
        self.cursor.execute(
            """SELECT ra.account_number,
                              count(ra.account_number)
                         FROM cve_account_data cad
                         JOIN rh_account ra
                           ON cad.rh_account_id = ra.id
                        WHERE cad.business_risk_id != 0
                     GROUP BY ra.account_number
                     ORDER BY count(ra.account_number) DESC"""
        )
        for row in self.cursor.fetchall():
            cve_business_risk_usage.append(row)
            LOGGER.debug("%12s %s", row[0], row[1])
        return cve_business_risk_usage

    @timer("count-big-non-rh-account")
    def query_big_accounts_count(self) -> list:
        """Query for count number of non rh accounts with number of systems in a predefined range"""
        sys_acc_count = []
        LOGGER.debug("   systems   # accounts ")
        LOGGER.debug("------------ ----------------------")
        for i, num in enumerate(SYSTEM_NUMS):
            try:
                upper_bound = SYSTEM_NUMS[i + 1] - 1
                self.cursor.execute(
                    """SELECT count(*)
                           FROM (
                               SELECT count(sp.rh_account_id)
                               FROM system_platform sp
                               JOIN rh_account ra ON sp.rh_account_id = ra.id
                               GROUP BY sp.rh_account_id, ra.account_number
                               HAVING (count(sp.id) BETWEEN %s AND %s) AND ra.account_number NOT IN %s
                           ) a""",
                    (num, upper_bound, self.accounts_blacklist),
                )
            except IndexError:
                self.cursor.execute(
                    """SELECT count(*)
                           FROM (
                               SELECT count(sp.rh_account_id)
                               FROM system_platform sp
                               JOIN rh_account ra ON sp.rh_account_id = ra.id
                               GROUP BY sp.rh_account_id, ra.account_number
                               HAVING count(sp.id) >= %s AND ra.account_number NOT IN %s
                           ) a""",
                    (num, self.accounts_blacklist),
                )
            count = self.cursor.fetchone()[0]
            sys_acc_count.append((num, count))
            LOGGER.debug("%12s %s", num, count)
        return sys_acc_count

    @timer("avg-unfixed-age-cve")
    def query_avg_unfixed_age(self):
        """Query for calculating average age of unfixed cves"""
        self.cursor.execute(
            """SELECT AVG(NOW() - sva.first_reported) FILTER (WHERE TRUE) AS total,
                                AVG(NOW() - sva.first_reported) FILTER (WHERE COALESCE(cm.cvss3_score, cm.cvss2_score) IS NULL) AS not_available,
                                AVG(NOW() - sva.first_reported) FILTER (WHERE COALESCE(cm.cvss3_score, cm.cvss2_score) < 4) AS to4,
                                AVG(NOW() - sva.first_reported) FILTER (WHERE 4 <= COALESCE(cm.cvss3_score, cm.cvss2_score)
                                                                            AND COALESCE(cm.cvss3_score, cm.cvss2_score) < 8) AS to8,
                                AVG(NOW() - sva.first_reported) FILTER (WHERE COALESCE(cm.cvss3_score, cm.cvss2_score) >= 8) AS to10
                                FROM system_vulnerabilities_active sva
                                     JOIN insights_rule ir ON sva.rule_id = ir.id
                                     JOIN rh_account ra ON sva.rh_account_id = ra.id
                                     JOIN cve_metadata cm ON sva.cve_id = cm.id
                                WHERE (
                                    sva.when_mitigated IS NULL OR (ir.active = 't' AND ir.rule_only != 't' AND sva.when_mitigated IS NULL)
                                ) AND ra.account_number NOT IN %s""",
            (self.accounts_blacklist,),
        )

        total, not_available, to4, to8, to10 = self.cursor.fetchone()
        LOGGER.debug("Avg. unfixed age total: %s", total)
        LOGGER.debug("Avg. unfixed age N/A: %s", not_available)
        LOGGER.debug("Avg. unfixed age 0to3.9: %s", to4)
        LOGGER.debug("Avg. unfixed age 4to7.9: %s", to8)
        LOGGER.debug("Avg. unfixed age 8to10: %s", to10)
        return total, not_available, to4, to8, to10

    def prep_filtered_results(self, tuple_list) -> tuple:
        """Apply exclude_accounts filter and return top MAX_RESULTS_COUNT."""
        unfiltered_list = []
        filtered_list = []
        for account, metric in tuple_list:
            if len(unfiltered_list) < MAX_RESULTS_COUNT:
                unfiltered_list.append((account, metric))
            if account not in self.accounts_blacklist:
                filtered_list.append((account, metric))
                if len(filtered_list) == MAX_RESULTS_COUNT:
                    break
        return unfiltered_list, filtered_list

    def collect_usage_metrics(self, data, p_metric, p_metric_f):
        """Filter and collect metrics"""
        unfiltered, filtered = self.prep_filtered_results(data)
        for account, metric in unfiltered:
            p_metric.labels(account=account).set(int(metric))
        for account, metric in filtered:
            p_metric_f.labels(account=account).set(int(metric))

    def run(self):
        """Run the metrics gathering."""
        cve_status_usage = self.query_cve_status_usage()
        self.collect_usage_metrics(cve_status_usage, CVE_STATUS_USAGE_T, CVE_STATUS_USAGE_TF)

        system_cve_status_usage = self.query_system_cve_status_usage()
        self.collect_usage_metrics(system_cve_status_usage, SYSTEM_CVE_STATUS_USAGE_T, SYSTEM_CVE_STATUS_USAGE_TF)

        cve_business_risk_usage = self.query_cve_business_risk_usage()
        self.collect_usage_metrics(cve_business_risk_usage, CVE_BRISK_USAGE_T, CVE_BRISK_USAGE_TF)

        sys_acc_count = self.query_big_accounts_count()
        for sys_num, acc_count in sys_acc_count:
            BIG_ACCOUNTS_COUNT_F.labels(systems=str(sys_num)).set(int(acc_count))

        total, not_available, to4, to8, to10 = self.query_avg_unfixed_age()

        AVG_UNFIXED_AGE.labels(severity="total").set(0 if total is None else total.days)
        AVG_UNFIXED_AGE.labels(severity="na").set(0 if not_available is None else not_available.days)
        AVG_UNFIXED_AGE.labels(severity="0to3.9").set(0 if to4 is None else to4.days)
        AVG_UNFIXED_AGE.labels(severity="4to7.9").set(0 if to8 is None else to8.days)
        AVG_UNFIXED_AGE.labels(severity="8to10").set(0 if to10 is None else to10.days)


def run():
    """Application entrypoint"""
    LOGGER.info("Started usage_metrics job")

    conn = get_conn()
    cur = conn.cursor()

    metrics_gatherer = MetricsGatherer(cur, accounts_blacklist_text=CFG.accounts_blacklist)
    metrics_gatherer.run()

    cur.close()
    conn.close()
    LOGGER.info("Finished usage_metrics job")


if __name__ == "__main__":
    init_logging()
    run()
