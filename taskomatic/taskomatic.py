#!/usr/bin/env python3
"""
Taskomatic service
"""

from datetime import datetime
import importlib
import os
import signal

from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.schedulers.tornado import TornadoScheduler
from prometheus_client import start_http_server
from tornado.ioloop import IOLoop
from tornado.web import Application, RequestHandler

from common.logging import init_logging, get_logger
from common.utils import ensure_minimal_schema_version

LOGGER = get_logger(__name__)
JOBS = os.getenv('JOBS', '').split(',')
PROMETHEUS_PORT = os.getenv('PROMETHEUS_PORT', '8085')
SCHEDULER = TornadoScheduler()


class RunJobHandler(RequestHandler):
    """API to immediately run job"""

    def data_received(self, chunk):
        pass

    def put(self, job_name):
        """Answer PUT request"""
        job = SCHEDULER.get_job(job_id=job_name)
        if job:
            job.modify(next_run_time=datetime.now())
            LOGGER.info("Job triggered using API: %s", job_name)
        else:
            self.set_status(404)
        self.finish()


APP = Application([
    (r"/api/v1/run/(.+)", RunJobHandler),
])
APP.listen(8000)


def import_job(job_name):
    """Import module with job, return None if not found"""
    try:
        return importlib.import_module('.%s' % job_name, package='.taskomatic.jobs')
    except ModuleNotFoundError:
        return None


def terminate(*_):
    """Terminate the scheduler and wait for the work to finish"""
    SCHEDULER.shutdown(wait=True)
    IOLoop.instance().add_callback_from_signal(IOLoop.instance().stop)


def main():
    """Creates scheduler, fills it up with tasks and runs it"""
    init_logging()

    LOGGER.info("Opening port [%s] for prometheus", PROMETHEUS_PORT)
    start_http_server(int(PROMETHEUS_PORT))

    ensure_minimal_schema_version()

    signals = (signal.SIGHUP, signal.SIGTERM, signal.SIGINT)
    for sin in signals:
        signal.signal(sin, terminate)

    for job_info in JOBS:
        job_name, interval = job_info.split(':')
        job = import_job(job_name)
        if job:
            LOGGER.info('Adding job: %s, cadence each %s minutes', job_name, interval)
            SCHEDULER.add_job(job.run, IntervalTrigger(minutes=int(interval)), id=job_name)
        else:
            LOGGER.error('Couldn\'t find job data for job: %s', job_name)
    SCHEDULER.start()
    IOLoop.instance().start()
    LOGGER.info("Stopped.")


if __name__ == '__main__':
    main()
