#!/usr/bin/env python3
"""
Taskomatic service
"""

import importlib
import os

from apscheduler.schedulers.blocking import BlockingScheduler
from apscheduler.triggers.interval import IntervalTrigger

from common.logging import init_logging, get_logger
from common.utils import ensure_minimal_schema_version

LOGGER = get_logger(__name__)
JOBS = os.getenv('JOBS', '').split(',')


def import_job(job_name):
    """Import module with job, return None if not found"""
    try:
        return importlib.import_module('.%s' % job_name, package='.taskomatic.jobs')
    except ModuleNotFoundError:
        return None


def main():
    """Creates schleduler, fills it up with tasks and runs it"""
    init_logging()
    ensure_minimal_schema_version()

    scheduler = BlockingScheduler()

    for job_info in JOBS:
        job_name, interval = job_info.split(':')
        job = import_job(job_name)
        if job:
            LOGGER.info('Adding job: %s, cadence each %s minutes', job_name, interval)
            scheduler.add_job(job.run, IntervalTrigger(minutes=int(interval)))
        else:
            LOGGER.error('Couldn\'t find job data for job: %s', job_name)
    scheduler.start()


if __name__ == '__main__':
    main()
