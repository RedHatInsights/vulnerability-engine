#!/usr/bin/env python3
"""
Taskomatic service
"""

import importlib
import os
import signal

from apscheduler.schedulers.blocking import BlockingScheduler
from apscheduler.triggers.interval import IntervalTrigger
from prometheus_client import start_http_server

from common.logging import init_logging, get_logger
from common.utils import ensure_minimal_schema_version

LOGGER = get_logger(__name__)
JOBS = os.getenv('JOBS', '').split(',')
PROMETHEUS_PORT = os.getenv('PROMETHEUS_PORT', '8085')
SCHEDULER = BlockingScheduler()


def import_job(job_name):
    """Import module with job, return None if not found"""
    try:
        return importlib.import_module('.%s' % job_name, package='.taskomatic.jobs')
    except ModuleNotFoundError:
        return None


def terminate(*_):
    """Terminate the scheduler and wait for the work to finish"""
    SCHEDULER.shutdown(wait=True)


def main():
    """Creates schleduler, fills it up with tasks and runs it"""
    init_logging()

    LOGGER.info("Opening port [%s] for prometheus", PROMETHEUS_PORT)
    start_http_server(int(PROMETHEUS_PORT))

    ensure_minimal_schema_version()

    signals = (signal.SIGHUP, signal.SIGTERM, signal.SIGINT)
    for sin in signals:
        signal.signal(sin, terminate)

    for job_info in JOBS:
        job_name, interval = job_info.split(':')
        job = import_job(job_name)
        if job:
            LOGGER.info('Adding job: %s, cadence each %s minutes', job_name, interval)
            SCHEDULER.add_job(job.run, IntervalTrigger(minutes=int(interval)))
        else:
            LOGGER.error('Couldn\'t find job data for job: %s', job_name)
    SCHEDULER.start()


if __name__ == '__main__':
    main()
