"""
Common grouper tools.
"""
import asyncio
from enum import Enum
from dataclasses import dataclass

from prometheus_client import Gauge, Counter

from common.config import Config

CFG = Config()

QUEUE_SIZE = Gauge("ve_grouper_queue_size", "Number of items in queue")
ADVISOR_QUEUE_SIZE = Gauge("ve_grouper_advisor_queue_size", "Number of advior items in queue")
INVENTORY_QUEUE_SIZE = Gauge("ve_grouper_inventory_queue_size", "Number of inventory items in queue")
PAIR_HIT = Counter("ve_grouper_pair_hits", "Number of pairs, which were matched")
PAIR_MISS = Counter("ve_grouper_pair_miss", "Number of pairs, which were not matched")


class BoundedSemaphorePrometheus:
    """Asyncio bounded semaphore, which reports status
       in specified prometheus metric gauge"""

    def __init__(self, size: int, metric: Gauge):
        """Constructor"""
        self._semaphore = asyncio.BoundedSemaphore(size)
        self._metric = metric

    async def acquire(self):
        """Acquire semaphore, inc gauge"""
        await self._semaphore.acquire()
        self._metric.inc()

    def release(self):
        """Release semaphore, dec gauge"""
        self._semaphore.release()
        self._metric.dec()


class GrouperMessageType(Enum):
    """Message types which can arrive at kafka"""
    INVENTORY_UPLOAD = "inventory_upload"
    ADVISOR_UPLOAD = "advisor_upload"


@dataclass
class QueueItem:
    """Single item in Evaluator queue"""
    inventory_upload: bool
    inventory_changed: bool

    advisor_upload: bool
    advisor_changed: bool

    request_id: str

    second_upload_event: asyncio.Event = None

    def __post_init__(self):
        self.second_upload_event = asyncio.Event()
