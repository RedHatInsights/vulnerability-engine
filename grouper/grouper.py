"""
Vulnerability grouper pod, groups the messages from insights engine and inventory,
so they end up in same partition.
"""
import asyncio
import json
import signal

from common.logging import get_logger, init_logging
from common.mqueue import MQReader, MQWriter, Partitioners
from common.config import Config
from common.status_app import create_status_app, create_status_runner

LOGGER = get_logger(__name__)
CFG = Config()


class Grouper:
    """
    Grouper class
    """
    def __init__(self):
        self.evaluation_queues = MQReader([CFG.advisor_results_topic, CFG.events_topic])
        self.results_queue = MQWriter(CFG.listener_ingress_topic, partitioner=Partitioners.account_number_partitioner)

    async def terminate(self, _, loop):
        """Terminates the grouper execution"""
        LOGGER.info("Signal recieved, stopping grouper.")
        await self.results_queue.stop()
        await self.evaluation_queues.stop()
        loop.stop()

    def _parse_acc_num(self, msg: bytes):
        # pylint: disable=no-self-use
        """Parses account number from insights engine/inventory"""
        try:
            msg_dict = json.loads(msg.value.decode("utf-8"))
        except json.decoder.JSONDecodeError:
            LOGGER.exception("Unable to parse messsage, cannot ensure grouping")
            return None

        acc_num = None
        if msg.topic == CFG.events_topic:
            acc_num = msg_dict.get("host", {}).get("org_id", None)
            if not acc_num:
                acc_num = msg_dict.get("org_id", None)
            LOGGER.debug("Obtained inventory message for acc num: %s", acc_num)
        elif msg.topic == CFG.advisor_results_topic:
            acc_num = msg_dict.get("input", {}).get("host", {}).get("org_id", None)
            LOGGER.debug("Obtained advisor message for acc num: %s", acc_num)
        else:
            LOGGER.exception("Cannot obtain account id from incoming message")
        return acc_num

    def start_grouping(self):
        """Start of the grouper service"""
        self.evaluation_queues.listen(self.group_message)

    def group_message(self, msg):
        """Group single message, parse acc number and send the message with acc number set as key"""
        acc_num = self._parse_acc_num(msg)
        self.results_queue.send_bytes(msg.value, key=acc_num)


def main():
    """Start service"""
    init_logging()

    loop = asyncio.get_event_loop()
    status_app = create_status_app(LOGGER)
    _, status_site = create_status_runner(status_app, int(CFG.prometheus_port), LOGGER, loop)
    loop.run_until_complete(status_site.start())

    LOGGER.info("Starting kafka grouper service")

    grouper = Grouper()

    signals = (signal.SIGHUP, signal.SIGTERM, signal.SIGINT)
    for sig in signals:
        loop.add_signal_handler(
            sig, lambda sig=sig: loop.create_task(grouper.terminate(sig, loop)))

    grouper.start_grouping()
    loop.run_forever()


if __name__ == "__main__":
    main()
