#!/usr/bin/bash

set -e

ORIGINAL_BRANCH="master"
TARGET_BRANCH="stable"
VERSION_REGEXP="[0-9]+\.[0-9]+"
RELEASE_BRANCH_PREFIX="ve-rc-"
PATCH_DOCKERFILES=$(grep -l -m 1 "APP_VERSION" ./Dockerfile*)

if [ "$(git rev-parse --abbrev-ref HEAD)" != "$ORIGINAL_BRANCH" ]; then
    echo "Please checkout $ORIGINAL_BRANCH branch to create new release."
    exit 1
fi

(
# Git root
cd "$(pwd)/$(git rev-parse --show-cdup)"
print_help=0
if [ "$1" == "-u" ]; then
    if [ "$2" != "" ]; then
        echo "Deleting tag: v$2"
        git tag -d "v$2"
        echo "Deleting branch: $RELEASE_BRANCH_PREFIX$2"
        git branch -D "$RELEASE_BRANCH_PREFIX$2"
    else
        print_help=1
    fi
elif [[ "$1" =~ $VERSION_REGEXP ]]; then
    if [[ "$2" != "--continue" ]]; then
        echo "Creating new branch: $RELEASE_BRANCH_PREFIX$1"
        git checkout -b "$RELEASE_BRANCH_PREFIX$1"
        echo "Rebasing on top of $TARGET_BRANCH"
        git rebase "$TARGET_BRANCH"
    fi
    if [ "$(git rev-parse --abbrev-ref HEAD)" == "$RELEASE_BRANCH_PREFIX$1" ]; then
        for dockerfile in $PATCH_DOCKERFILES; do
            echo "Patching dockerfile $dockerfile."
            sed -i "s/ENV APP_VERSION=.*/ENV APP_VERSION=$1/g" "$dockerfile"
            git add "$dockerfile"
        done
        git commit -m "Update version to $1"
        echo "Creating new tag: v$1"
        git tag "v$1"
        git checkout "$ORIGINAL_BRANCH"
        echo ""
        echo "Run:"
        echo "    git push <your remote> $RELEASE_BRANCH_PREFIX$1 && git push <your remote> v$1"
    fi
else
    print_help=1
fi

if [ $print_help -eq 1 ]; then
    echo "This script creates a new release candidate branch from master."
    echo "Usage:"
    echo "    $0 version"
    echo "    (version matching \"$VERSION_REGEXP\")"
    echo "Example:"
    echo "    $0 0.1"
    echo "    $0 0.1 --continue # continue after release candidate branch is manually rebased."
    echo "Undo:"
    echo "    $0 -u 0.1"
fi
)
