#!/usr/bin/env python3
"""
Generates Insights archive based on VMaaS request.
For testing vulnerability engine only.
"""

import argparse
import datetime
import json
import os
import re
import sys
import tarfile
import tempfile
import uuid

DNF_MODULES_DIR = "etc/dnf/modules.d/"
YUM_REPOS_D = "etc/yum.repos.d"
REDHAT_REPO = "etc/yum.repos.d/redhat.repo"
SYSTEMID_FILE = "etc/insights-client/machine-id"
PKGLIST_FILE = (
    "insights_commands/rpm_-qa_--qf_name_NAME_epoch_EPOCH_version_"
    "VERSION_release_RELEASE_arch_ARCH_installtime_INSTALLTIME_date_"
    "buildtime_BUILDTIME_vendor_VENDOR_buildhost_BUILDHOST_sigpgp_SIGPGP_pgpsig"
)


NEVRA_RE = re.compile(r"(.*)-(([0-9]+):)?([^-]+)-([^-]+)\.([a-z0-9_]+)")


def split_packagename(filename):
    """
    Split rpm name (incl. epoch) to NEVRA components.

    Return a name, epoch, version, release, arch, e.g.::
        foo-1.0-1.i386.rpm returns foo, 0, 1.0, 1, i386
        bar-1:9-123a.ia64.rpm returns bar, 1, 9, 123a, ia64
    """

    if filename[-4:] == ".rpm":
        filename = filename[:-4]

    match = NEVRA_RE.match(filename)
    if not match:
        return "", "", "", "", ""

    name, _, epoch, version, release, arch = match.groups()
    if epoch is None:
        epoch = "(none)"
    return name, epoch, version, release, arch


def generate_module_files(tmpdir, vmaas_req):
    """Create module files stanza"""
    print("Generating module files... ", end="")
    modules_list = vmaas_req.get("modules_list", [])
    if modules_list:
        modules_dir = os.path.join(tmpdir, DNF_MODULES_DIR)
        os.makedirs(modules_dir)
        with open(os.path.join(modules_dir, "all.module"), "wt") as module_file:
            for module in modules_list:
                print("[%s]" % module["module_name"], file=module_file)
                print("name=%s" % module["module_name"], file=module_file)
                print("stream=%s" % module["module_stream"], file=module_file)
        print("DONE")
    else:
        print("SKIPPED")


def generate_system_id_file(tmpdir, system_id):
    """Create system ID file"""
    print("Generating system ID file... ", end="")
    if system_id is None:
        system_id = str(uuid.uuid4())
    system_id_file = os.path.join(tmpdir, SYSTEMID_FILE)
    os.makedirs(os.path.dirname(system_id_file))
    with open(system_id_file, "wt") as system_id_f:
        print(system_id, file=system_id_f)
    print("DONE")


def generate_pkglist_file(tmpdir, vmaas_req):
    """Create pkglist file"""
    print("Generating pkglist file... ", end="")
    package_list = vmaas_req.get("package_list", [])
    if package_list:
        packagelist_file = os.path.join(tmpdir, PKGLIST_FILE)
        os.makedirs(os.path.dirname(packagelist_file), exist_ok=True)
        with open(packagelist_file, "wt") as packagelist_f:
            for package in package_list:
                name, epoch, version, release, arch = split_packagename(package)
                print(
                    "{" '"name":"%s",' '"epoch":"%s",' '"version":"%s",' '"release":"%s",' '"arch":"%s"' "}" % (name, epoch, version, release, arch),
                    file=packagelist_f,
                )
        print("DONE")
    else:
        print("SKIPPED")


def generate_repolist_file(tmpdir, vmaas_req):
    """Create repolist file"""
    print("Generating repolist file... ", end="")
    repository_list = vmaas_req.get("repository_list", [])
    if repository_list:
        redhat_repo = os.path.join(tmpdir, REDHAT_REPO)
        os.makedirs(os.path.join(tmpdir, YUM_REPOS_D), exist_ok=True)
        with open(redhat_repo, "wt") as repolist_f:
            for repo in repository_list:
                print("[%s]\nenabled=1\n" % repo, file=repolist_f)
        print("DONE")
    else:
        print("SKIPPED")


def main():
    """Main entrypoint"""
    parser = argparse.ArgumentParser()
    parser.add_argument("vmaas_json", help='VMaaS JSON request file, "-" for stdin')
    parser.add_argument("--id", action="store", help="use following system id")
    parser.add_argument("-o", "--output", action="store", help="output TGZ file")
    args = parser.parse_args()

    if not os.path.isfile(args.vmaas_json) and not args.vmaas_json == "-":
        print("File doesn't exist: %s" % args.vmaas_json)
        sys.exit(1)

    if args.vmaas_json == "-":
        source = sys.stdin
    else:
        source = open(args.vmaas_json, "rt")
    try:
        vmaas_req = json.load(source)
    except json.decoder.JSONDecodeError:
        print("Unable to parse JSON file: %s" % args.vmaas_json)
        sys.exit(2)
    finally:
        if source != sys.stdin:
            source.close()

    with tempfile.TemporaryDirectory() as tmpdir:
        generate_module_files(tmpdir, vmaas_req)
        generate_system_id_file(tmpdir, args.id)
        generate_pkglist_file(tmpdir, vmaas_req)
        generate_repolist_file(tmpdir, vmaas_req)

        if args.output:
            targz_file = args.output
        else:
            targz_file = "/tmp/%s-%s.tar.gz" % (os.path.basename(tmpdir), datetime.datetime.now().strftime("%Y%m%d%H%M%S"))

        print("Building TGZ file... ", end="")
        with tarfile.open(targz_file, "w:gz") as tar:
            tar.add(tmpdir, arcname=os.path.basename(tmpdir))
        print("DONE\n")

        print(targz_file)


if __name__ == "__main__":
    main()
