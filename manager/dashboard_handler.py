"""
Module for /dashboard API
"""
from datetime import datetime, timedelta

import connexion
from peewee import fn, JOIN

from common.logging import get_logger
from common.peewee_model import CveMetadata, InsightsRule, SystemVulnerabilities, SystemPlatform
from .base import CYNDI_ENABLED, cyndi_query, get_account_id, GetRequest, parse_tags, round_to_100_percent
from .filters import apply_filters, filter_types

LOGGER = get_logger(__name__)


class GetDashboard(GetRequest):
    """Get to /v1/dashboard"""

    _endpoint_name = r'/v1/dashboard'

    @classmethod
    def handle_get(cls, **kwargs):
        # pylint: disable=singleton-comparison
        retval = {
            'cves_total': 0,
            'cves_by_severity': {
                '0to3.9': {
                    'percentage': 0,
                    'count': 0
                },
                '4to7.9': {
                    'percentage': 0,
                    'count': 0
                },
                '8to10': {
                    'percentage': 0,
                    'count': 0
                },
                'na': {
                    'percentage': 0,
                    'count': 0
                }
            },
            'recent_cves': {
                'last7days': 0,
                'last30days': 0,
                'last90days': 0
            },
        }

        args_desc = [
            {'arg_name': 'tags', 'convert_func': parse_tags},
            {'arg_name': 'sap_system', 'convert_func': None},
            {'arg_name': 'sap_sids', 'convert_func': None}
        ]
        args = cls._parse_arguments(kwargs, args_desc)

        rh_account = get_account_id(connexion.context['user'])

        query = (SystemVulnerabilities.select(fn.Distinct(CveMetadata.cve), fn.COALESCE(CveMetadata.cvss3_score, CveMetadata.cvss2_score).alias('cvss_score'),
                                              CveMetadata.public_date, CveMetadata.id)
                 .join(SystemPlatform, on=((SystemVulnerabilities.system_id == SystemPlatform.id) & (SystemPlatform.when_deleted.is_null(True)) &
                                           (SystemPlatform.stale == False) & (SystemPlatform.opt_out == False) &  # noqa: E712
                                           (SystemPlatform.last_evaluation.is_null(False) | SystemPlatform.advisor_evaluated.is_null(False))))
                 .join(InsightsRule, JOIN.LEFT_OUTER, on=(SystemVulnerabilities.rule_id == InsightsRule.id))  # noqa: E712
                 .join(CveMetadata, on=(SystemVulnerabilities.cve_id == CveMetadata.id))
                 .where(SystemVulnerabilities.rh_account_id == rh_account)
                 .where((SystemVulnerabilities.mitigation_reason.is_null(True)) | (InsightsRule.active == False))
                 .where((SystemVulnerabilities.when_mitigated.is_null(True)) | (InsightsRule.active == True))
                 .dicts())

        query = cyndi_query(query)
        if CYNDI_ENABLED:
            query = apply_filters(query, args, [filter_types.SYSTEM_TAGS, filter_types.SYSTEM_SAP, filter_types.SYSTEM_SAP_SIDS], {})

        retval["cves_total"] = len(query)

        cve_ids = [cve["id"] for cve in query]
        counts_query = CveMetadata.select(fn.Coalesce(CveMetadata.cvss3_score, CveMetadata.cvss2_score).alias("cvss"), CveMetadata.public_date) \
                                  .where(CveMetadata.id << cve_ids)

        retval["cves_by_severity"]["na"]["count"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                                .where(counts_query.c.cvss.is_null(True)) \
                                                                .first().count

        retval["cves_by_severity"]["0to3.9"]["count"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                                    .where(counts_query.c.cvss < 4) \
                                                                    .first().count

        retval["cves_by_severity"]["4to7.9"]["count"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                                    .where((counts_query.c.cvss >= 4) & (counts_query.c.cvss < 8)) \
                                                                    .first().count

        retval["cves_by_severity"]["8to10"]["count"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                                   .where(counts_query.c.cvss >= 8) \
                                                                   .first().count

        today = datetime.utcnow().date()
        last7 = today - timedelta(days=7)
        last30 = today - timedelta(days=30)
        last90 = today - timedelta(days=90)

        retval["recent_cves"]["last7days"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                         .where(counts_query.c.public_date >= last7) \
                                                         .first().count

        retval["recent_cves"]["last30days"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                          .where(counts_query.c.public_date >= last30) \
                                                          .first().count

        retval["recent_cves"]["last90days"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                          .where(counts_query.c.public_date >= last90) \
                                                          .first().count

        rounded_percentage = round_to_100_percent([v['count'] for v in retval['cves_by_severity'].values()])

        for indx, keys in enumerate(retval['cves_by_severity']):
            retval['cves_by_severity'][keys]['percentage'] = rounded_percentage[indx]

        return retval
