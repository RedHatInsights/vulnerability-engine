"""
Module for /dashboard API
"""
from datetime import datetime, timedelta

import connexion
from peewee import fn, JOIN, SQL

from common.logging import get_logger
from common.peewee_model import CveMetadata, CveRuleMapping, InsightsRule, SystemVulnerabilities, SystemPlatform
from .base import cyndi_query, get_account_id, GetRequest, get_system_count, parse_tags, round_to_100_percent, \
                  is_cyndi_request
from .filters import apply_filters, filter_types

LOGGER = get_logger(__name__)


class GetDashboard(GetRequest):
    """Get to /v1/dashboard"""

    _endpoint_name = r'/v1/dashboard'

    @classmethod
    def handle_get(cls, **kwargs):
        # pylint: disable=singleton-comparison
        retval = {
            'cves_total': 0,
            'cves_by_severity': {
                '0to3.9': {
                    'percentage': 0,
                    'count': 0
                },
                '4to7.9': {
                    'percentage': 0,
                    'count': 0
                },
                '8to10': {
                    'percentage': 0,
                    'count': 0
                },
                'na': {
                    'percentage': 0,
                    'count': 0
                }
            },
            'system_count': 0,
            'recent_cves': {
                'last7days': 0,
                'last30days': 0,
                'last90days': 0
            },
            'recent_rules': [],
            'rules_total': 0,
        }

        args_desc = [
            {'arg_name': 'tags', 'convert_func': parse_tags},
            {'arg_name': 'sap_system', 'convert_func': None},
            {'arg_name': 'sap_sids', 'convert_func': None}
        ]
        args = cls._parse_arguments(kwargs, args_desc)
        cyndi_request = is_cyndi_request(args)
        rh_account = get_account_id(connexion.context['user'])
        retval['system_count'] = get_system_count(rh_account, True, [filter_types.SYSTEM_TAGS, filter_types.SYSTEM_SAP, filter_types.SYSTEM_SAP_SIDS], args)

        query = (SystemVulnerabilities.select(fn.Distinct(CveMetadata.cve), fn.COALESCE(CveMetadata.cvss3_score, CveMetadata.cvss2_score).alias('cvss_score'),
                                              CveMetadata.public_date, CveMetadata.id)
                 .join(SystemPlatform, on=((SystemVulnerabilities.system_id == SystemPlatform.id) & (SystemPlatform.when_deleted.is_null(True)) &
                                           (SystemPlatform.stale == False) & (SystemPlatform.opt_out == False) &  # noqa: E712
                                           (SystemPlatform.last_evaluation.is_null(False) | SystemPlatform.advisor_evaluated.is_null(False))))
                 .join(InsightsRule, JOIN.LEFT_OUTER, on=(SystemVulnerabilities.rule_id == InsightsRule.id))  # noqa: E712
                 .join(CveMetadata, on=(SystemVulnerabilities.cve_id == CveMetadata.id))
                 .where(SystemVulnerabilities.rh_account_id == rh_account)
                 .where((SystemVulnerabilities.mitigation_reason.is_null(True)) | (InsightsRule.active == False))
                 .where((SystemVulnerabilities.when_mitigated.is_null(True)) | (InsightsRule.active == True))
                 .dicts())

        if cyndi_request:
            query = cyndi_query(query)
            query = apply_filters(query, args, [filter_types.SYSTEM_TAGS, filter_types.SYSTEM_SAP, filter_types.SYSTEM_SAP_SIDS], {})

        retval["cves_total"] = len(query)

        cve_ids = [cve["id"] for cve in query]
        counts_query = CveMetadata.select(fn.Coalesce(CveMetadata.cvss3_score, CveMetadata.cvss2_score).alias("cvss"), CveMetadata.public_date) \
                                  .where(CveMetadata.id << cve_ids)

        retval["cves_by_severity"]["na"]["count"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                                .where(counts_query.c.cvss.is_null(True)) \
                                                                .first().count

        retval["cves_by_severity"]["0to3.9"]["count"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                                    .where(counts_query.c.cvss < 4) \
                                                                    .first().count

        retval["cves_by_severity"]["4to7.9"]["count"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                                    .where((counts_query.c.cvss >= 4) & (counts_query.c.cvss < 8)) \
                                                                    .first().count

        retval["cves_by_severity"]["8to10"]["count"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                                   .where(counts_query.c.cvss >= 8) \
                                                                   .first().count

        today = datetime.utcnow().date()
        last7 = today - timedelta(days=7)
        last14 = today - timedelta(days=14)
        last30 = today - timedelta(days=30)
        last90 = today - timedelta(days=90)

        retval["recent_cves"]["last7days"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                         .where(counts_query.c.public_date >= last7) \
                                                         .first().count

        retval["recent_cves"]["last30days"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                          .where(counts_query.c.public_date >= last30) \
                                                          .first().count

        retval["recent_cves"]["last90days"] = counts_query.select_from(fn.Count('*').alias('count')) \
                                                          .where(counts_query.c.public_date >= last90) \
                                                          .first().count

        rounded_percentage = round_to_100_percent([v['count'] for v in retval['cves_by_severity'].values()])

        for indx, keys in enumerate(retval['cves_by_severity']):
            retval['cves_by_severity'][keys]['percentage'] = rounded_percentage[indx]

        rules_breakdown = (SystemVulnerabilities.select(fn.COUNT(fn.Distinct(InsightsRule.id)).alias('rule_count'))
                           .join(InsightsRule, on=(SystemVulnerabilities.rule_id == InsightsRule.id))  # noqa: E712
                           .join(SystemPlatform, on=(SystemVulnerabilities.system_id == SystemPlatform.id))
                           .where(SystemVulnerabilities.rh_account_id == rh_account)
                           .where((SystemVulnerabilities.mitigation_reason.is_null(True)) & (InsightsRule.active == True))
                           .where((SystemPlatform.stale == False) & (SystemPlatform.opt_out == False) &  # noqa: E712
                                  (SystemPlatform.when_deleted.is_null(True)) &
                                  (SystemPlatform.last_evaluation.is_null(False) | SystemPlatform.advisor_evaluated.is_null(False))))
        if cyndi_request:
            rules_breakdown = cyndi_query(rules_breakdown)
            rules_breakdown = apply_filters(rules_breakdown, args, [filter_types.SYSTEM_TAGS, filter_types.SYSTEM_SAP, filter_types.SYSTEM_SAP_SIDS], {})
        rules_breakdown = rules_breakdown.first()

        retval['rules_total'] = rules_breakdown.rule_count

        counts_query = (
            SystemVulnerabilities
            .select(SystemVulnerabilities.rule_id.alias("rule_id_"),
                    fn.Count(fn.Distinct(SystemVulnerabilities.system_id)).alias("systems_affected_"))
            .join(SystemPlatform, on=(SystemVulnerabilities.system_id == SystemPlatform.id))
            .join(InsightsRule, JOIN.LEFT_OUTER, on=(SystemVulnerabilities.rule_id == InsightsRule.id))
            .where((SystemVulnerabilities.rule_id.is_null(False)) & (InsightsRule.active == True) & (SystemVulnerabilities.mitigation_reason.is_null(True)))
            .where(SystemVulnerabilities.rh_account_id == rh_account)
            .where((SystemPlatform.opt_out == False)  # noqa: E712
                   & (SystemPlatform.stale == False)  # noqa: E712
                   & (SystemPlatform.when_deleted.is_null(True)))
            .group_by(SystemVulnerabilities.rule_id)
        )
        if cyndi_request:
            counts_query = cyndi_query(counts_query)
            counts_query = apply_filters(counts_query, args, [filter_types.SYSTEM_TAGS, filter_types.SYSTEM_SAP, filter_types.SYSTEM_SAP_SIDS], {})

        recent_rules = (InsightsRule.select(InsightsRule.description_text.alias('name'),
                                            fn.COALESCE(counts_query.c.systems_affected_, 0).alias('systems_affected'),
                                            InsightsRule.rule_impact.alias('severity'),
                                            InsightsRule.kbase_node_id.alias('node_id'),
                                            InsightsRule.generic_text.alias('description'),
                                            fn.ARRAY_AGG(fn.Distinct(CveMetadata.cve)).alias('associated_cves'),
                                            InsightsRule.name.alias('id'),
                                            InsightsRule.publish_date.alias('public_date'))
                        .join(CveRuleMapping, on=(InsightsRule.id == CveRuleMapping.rule_id))
                        .join(counts_query, JOIN.LEFT_OUTER, on=(InsightsRule.id == counts_query.c.rule_id_))
                        .join(CveMetadata, on=(CveRuleMapping.cve_id == CveMetadata.id))
                        .where((InsightsRule.publish_date >= last14) & (InsightsRule.active == True))  # noqa: E712
                        .group_by(InsightsRule.description_text, InsightsRule.publish_date, InsightsRule.rule_impact, InsightsRule.kbase_node_id,
                                  InsightsRule.generic_text, SQL('systems_affected'), InsightsRule.name, InsightsRule.publish_date)
                        .order_by(InsightsRule.publish_date.desc(), InsightsRule.rule_impact, InsightsRule.description_text)
                        .dicts())

        recent_rules = apply_filters(recent_rules, args, [], {"count_subquery": counts_query})

        for rule in recent_rules:
            retval['recent_rules'].append(rule)

        return retval
