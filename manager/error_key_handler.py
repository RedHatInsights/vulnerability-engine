"""
Module for /errorkeys API endpoint
"""

import json

from common import AuthenticatedHandler, parse_url
from database.peewee_model import SystemProdsecErrorKey, ProdsecErrorKey, SystemPlatform


class ErrorKeyHandler(AuthenticatedHandler):
    """Handler class returning data related to given error key."""

    def get(self): # pylint: disable=arguments-differ
        """
        ---
        description: Get error key details
        responses:
          200:
            description: Error key details returned.
        """
        route = parse_url(self.request.uri, "/errorkeys")
        if len(route) == 2 and route[1] == "affectedsystems":
            self.get_affected_systems(route[0])
        else:
            self.send_error(404)
        self.flush()

    def post(self): # pylint: disable=arguments-differ
        self.flush()

    def get_affected_systems(self, error_key):
        """Gets affected systems with same error key"""
        query = (
            SystemProdsecErrorKey
            .select(SystemPlatform.platform_id,
                    SystemPlatform.display_name,
                    ProdsecErrorKey.name.alias("error_key"))
            .join(SystemPlatform, on=(SystemProdsecErrorKey.platform_id == SystemPlatform.platform_id))
            .join(ProdsecErrorKey, on=(SystemProdsecErrorKey.error_key_id == ProdsecErrorKey.id))
            .where(ProdsecErrorKey.name == error_key)
            .where(SystemPlatform.rh_account == self.rh_account_number)
            .dicts()
        )
        affected_systems = []
        for row in query:
            system_entry = {}
            system_entry["platform_id"] = row["platform_id"]
            system_entry["display_name"] = row["display_name"]
            system_entry["error_key"] = row["error_key"]
            affected_systems.append(system_entry)
        self.write(json.dumps(affected_systems))
