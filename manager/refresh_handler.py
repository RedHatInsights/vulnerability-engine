"""
Module for /refresh API endpoints
"""

from common.logging import get_logger
from common.peewee_model import DB, SystemPlatform, CveMetadata
from .base import PutRequest, ApplicationException

LOGGER = get_logger(__name__)


class Refresh(PutRequest):
    """Meta class for refresh APIs"""

    @classmethod
    def _account_exists(cls, account):
        if account is None:
            raise ApplicationException("invalid account_id", 400)
        systems = (SystemPlatform.select()
                   .where(SystemPlatform.rh_account == account))
        if not systems.exists():
            raise ApplicationException("account_id must exist", 404)

    @classmethod
    def _cve_exists(cls, cve):
        if cve is None:
            raise ApplicationException("invalid cve_id", 400)
        cve = (CveMetadata.select()
               .where(CveMetadata.cve == cve))
        if not cve.exists():
            raise ApplicationException("cve_id must exist", 404)

    @classmethod
    def _system_exists(cls, inventory_id):
        if inventory_id is None:
            raise ApplicationException("invalid inventory_id", 400)
        system = (SystemPlatform.select()
                  .where(SystemPlatform.inventory_id == inventory_id))
        if not system.exists():
            raise ApplicationException("inventory_id must exist", 404)

    @classmethod
    def handle_put(cls, **kwargs):  # pragma: no cover
        """To be implemented in child classes"""
        raise NotImplementedError


class RefreshAccount(Refresh):
    """PUT to /v1/refresh/accounts/{account_id}"""

    _endpoint_name = r'/v1/refresh/accounts/{account_id}'

    @classmethod
    def handle_put(cls, **kwargs):
        """Refresh cached counts for given account ID."""
        account = kwargs.get("account_id", None)
        cls._account_exists(account)
        DB.execute_sql("SELECT refresh_account_cached_counts(%s)", (account,))
        return ""


class RefreshAccountCve(Refresh):
    """PUT to /v1/refresh/accounts/{account_id}/cves/{cve_id}"""

    _endpoint_name = r'/v1/refresh/accounts/{account_id}/cves/{cve_id}'

    @classmethod
    def handle_put(cls, **kwargs):
        """Refresh cached counts for given account ID and CVE."""
        account = kwargs.get("account_id", None)
        cve = kwargs.get("cve_id", None)
        cls._account_exists(account)
        cls._cve_exists(cve)
        DB.execute_sql("SELECT refresh_cve_account_cached_counts(%s, %s)", (cve, account))
        return ""


class RefreshCve(Refresh):
    """PUT to /v1/refresh/cves/{cve_id}"""

    _endpoint_name = r'/v1/refresh/cves/{cve_id}'

    @classmethod
    def handle_put(cls, **kwargs):
        """Refresh cached counts for given CVE."""
        cve = kwargs.get("cve_id", None)
        cls._cve_exists(cve)
        DB.execute_sql("SELECT refresh_cve_cached_counts(%s)", (cve,))
        return ""


class RefreshSystem(Refresh):
    """PUT to /v1/refresh/systems/{inventory_id}"""

    _endpoint_name = r'/v1/refresh/systems/{inventory_id}'

    @classmethod
    def handle_put(cls, **kwargs):
        """Refresh cached counts for given inventory ID."""
        inventory_id = kwargs.get("inventory_id", None)
        cls._system_exists(inventory_id)
        DB.execute_sql("SELECT refresh_system_cached_counts(%s)", (inventory_id,))
        return ""
