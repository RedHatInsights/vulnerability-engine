"""
Basic functionality sanity check
"""

import base64
import json
import requests

DEFAULT_IDENTITY = {
    "identity" : {
        "account_number" : "00000000",
        "type" : "User",
        "user" : {
            "username" : "jdoe@acme.com",
            "email" : "jdoe@acme.com",
            "first_name" : "john",
            "last_name" : "doe",
            "is_active" : True,
            "is_org_admin" : False,
            "is_internal" : False,
            "locale" : "en_US"
        },
        "internal" : {
            "org_id" : 3340851,
            "auth_type" : "basic-auth",
            "auth_time" : 6300
        }
    }
}

def assert_meta(payload):
    """Test whether metadata part of the reponse is OK"""
    assert 'meta' in payload
    meta = payload['meta']
    assert 'filter' in meta
    assert 'page' in meta
    assert 'page_size' in meta
    assert 'pages' in meta
    assert 'sort' in meta
    assert 'total_items' in meta
    return meta


class TestManager:
    """Class for basic sanity testing of vulnerability-engine"""

    headers = {'x-rh-identity' : base64.b64encode(json.dumps(DEFAULT_IDENTITY).encode('utf-8'))}
    server = 'http://localhost:8300/r/insights/platform/vulnerability/v1/'

    def call_get(self, api):
        """Performs API call towards engine"""
        return requests.get(self.server + api, headers=self.headers)

    def test_apidoc(self):
        """/apispec endpoint"""
        response = self.call_get('apispec')
        assert response.status_code == 200

    # no point in testing this - we'd be just calling vmaas
    #def test_cves(self):
    #    """/cves/CVE-[^/]*/?[^/]* endpoint"""
    #    response = self.call_get('cves/CVE-2016-0800')
    #    assert response.status_code == 200

    def test_cves_affected_systems(self):
        """/cves/CVE-[^/]*/?[^/]*/affected_systems endpoint"""
        response = self.call_get('cves/CVE-2016-0800/affected_systems')
        assert response.status_code == 200
        payload = response.json()
        meta = assert_meta(payload)
        assert int(meta['total_items']) == 7

    # no point in testing this - we'd be just calling vmaas
    #def test_cves_details(self):
    #    """/cves/CVE-[^/]*/?[^/]*/details endpoint"""
    #    response = self.call_get('cves/CVE-2016-0800/details')
    #    assert response.status_code == 200

    def test_systems(self):
        """/systems endpoint"""
        response = self.call_get('systems')
        assert response.status_code == 200
        payload = response.json()
        meta = assert_meta(payload)
        assert int(meta['total_items']) == 7

    def test_systems_cves(self):
        """/systems/.+/cves endpoint"""
        response = self.call_get('systems/INS-ID00-0000-0000/cves')
        assert response.status_code == 200
        payload = response.json()
        meta = assert_meta(payload)
        assert int(meta['total_items']) == 2

    def test_vulnerabilities_cves(self):
        """/vulnerabilities/cves endpoint"""
        response = self.call_get('vulnerabilities/cves')
        assert response.status_code == 200
        payload = response.json()
        meta = assert_meta(payload)
        assert int(meta['total_items']) == 14

    def test_pagination(self):
        """Tests pagination"""
        response = self.call_get('vulnerabilities/cves?page_size=2&page=4')
        assert response.status_code == 200
        meta = assert_meta(response.json())
        assert int(meta['page']) == 4
        assert int(meta['page_size']) == 2
        assert int(meta['pages']) == 7
        assert int(meta['total_items']) == 14
        response = self.call_get('vulnerabilities/cves?page_size=-3')
        assert response.status_code == 400
        assert 'errors' in response.json()
