"""
Basic functionality sanity check
"""

import base64
import json
import requests

DEFAULT_IDENTITY = {
    "identity": {
        "account_number": "00000000",
        "type": "User",
        "user": {
            "username": "jdoe@acme.com",
            "email": "jdoe@acme.com",
            "first_name": "john",
            "last_name": "doe",
            "is_active": True,
            "is_org_admin": False,
            "is_internal": False,
            "locale": "en_US"
        },
        "internal": {
            "org_id": 3340851,
            "auth_type": "basic-auth",
            "auth_time": 6300
        }
    }
}


def assert_meta(payload):
    """Test whether metadata part of the reponse is OK"""
    assert 'meta' in payload
    meta = payload['meta']
    assert 'filter' in meta
    assert 'page' in meta
    assert 'page_size' in meta
    assert 'pages' in meta
    assert 'sort' in meta
    assert 'total_items' in meta
    assert 'limit' in meta
    assert 'offset' in meta
    return meta


def assert_links(payload):
    """Test pagination portion of response"""
    assert 'links' in payload
    links = payload['links']
    expected_link_names = ['first', 'next', 'previous', 'last']
    for name in expected_link_names:
        assert name in links
    return links


class TestManager:
    """Class for basic sanity testing of vulnerability-engine"""

    headers = {'x-rh-identity': base64.b64encode(json.dumps(DEFAULT_IDENTITY).encode('utf-8'))}
    server = 'http://localhost:8300/api/vulnerability/'

    def call_get(self, api):
        """Performs API call towards engine"""
        return requests.get(self.server + api, headers=self.headers)

    def test_apidoc(self):
        """/apispec endpoint"""
        response = self.call_get('openapi.json')
        assert response.status_code == 200

    # no point in testing this - we'd be just calling vmaas
    # def test_cves(self):
    #    """/cves/CVE-[^/]*/?[^/]* endpoint"""
    #    response = self.call_get('v1/cves/CVE-2016-0800')
    #    assert response.status_code == 200

    def test_cves_affected_systems(self):
        """/cves/CVE-[^/]*/?[^/]*/affected_systems endpoint"""
        response = self.call_get('v1/cves/CVE-2016-0800/affected_systems')
        assert response.status_code == 200
        payload = response.json()
        meta = assert_meta(payload)
        assert int(meta['total_items']) == 4

    # no point in testing this - we'd be just calling vmaas
    # def test_cves_details(self):
    #    """/cves/CVE-[^/]*/?[^/]*/details endpoint"""
    #    response = self.call_get('v1/cves/CVE-2016-0800/details')
    #    assert response.status_code == 200

    def test_systems(self):
        """/systems endpoint"""
        response = self.call_get('v1/systems')
        assert response.status_code == 200
        payload = response.json()
        meta = assert_meta(payload)
        assert int(meta['total_items']) == 3

    def test_systems_cves(self):
        """/systems/.+/cves endpoint"""
        response = self.call_get('v1/systems/INV-INVALID/cves')
        assert response.status_code == 404
        response = self.call_get('v1/systems/INV-ID00-0000-0000/cves')
        assert response.status_code == 404
        response = self.call_get('v1/systems/INV-ID00-0000-3333/cves')
        assert response.status_code == 200
        payload = response.json()
        meta = assert_meta(payload)
        assert int(meta['total_items']) == 4

    def test_vulnerabilities_cves(self):
        """/vulnerabilities/cves endpoint"""
        response = self.call_get('v1/vulnerabilities/cves')
        assert response.status_code == 200
        payload = response.json()
        meta = assert_meta(payload)
        assert int(meta['total_items']) == 14

    def test_pagination(self):
        """Tests pagination"""
        response = self.call_get('v1/vulnerabilities/cves?page_size=2&page=4')
        assert response.status_code == 200
        meta = assert_meta(response.json())
        assert int(meta['page']) == 4
        assert int(meta['page_size']) == 2
        assert int(meta['limit']) == 2
        assert int(meta['offset']) == 6
        assert int(meta['pages']) == 7
        assert int(meta['total_items']) == 14

    def test_bad_pagination(self):
        """Tests bad pagination"""
        response = self.call_get('v1/vulnerabilities/cves?page_size=-3')
        assert response.status_code == 400
        assert 'errors' in response.json()
        response = self.call_get('v1/vulnerabilities/cves?page_size=2&page=666')
        assert response.status_code == 400
        assert 'errors' in response.json()

    def test_limit_offset(self):
        """Tests limit/offset"""
        response = self.call_get('v1/vulnerabilities/cves?limit=2&offset=6')
        assert response.status_code == 200
        meta = assert_meta(response.json())
        assert int(meta['limit']) == 2
        assert int(meta['offset']) == 6
        assert int(meta['total_items']) == 14

    def test_limit_wins(self):
        """If you specify page and offset, or page_size and limit, limit and offset should 'win'"""
        response = self.call_get('v1/vulnerabilities/cves?limit=2&offset=6&page=1')
        assert response.status_code == 200
        meta = assert_meta(response.json())
        assert int(meta['limit']) == 2
        assert int(meta['offset']) == 6
        assert int(meta['total_items']) == 14
        assert int(meta['page']) == 4
        assert int(meta['page_size']) == 2
        response = self.call_get('v1/vulnerabilities/cves?limit=2&offset=6&page_size=50')
        assert response.status_code == 200
        meta = assert_meta(response.json())
        assert int(meta['limit']) == 2
        assert int(meta['offset']) == 6
        assert int(meta['page']) == 4
        assert int(meta['page_size']) == 2

    def test_bad_limit_offset(self):
        """Tests bad limit/offset combinations"""
        response = self.call_get('v1/vulnerabilities/cves?limit=-3')
        assert response.status_code == 400
        assert 'errors' in response.json()
        response = self.call_get('v1/vulnerabilities/cves?limit=zzz')
        assert response.status_code == 400
        response = self.call_get('v1/vulnerabilities/cves?offset=666')
        assert response.status_code == 400
        assert 'errors' in response.json()

    def test_links(self):
        """Tests links"""
        response = self.call_get('v1/vulnerabilities/cves?cvss_from=6')
        assert 'cvss_from=6' in response.json()['links']['first']
