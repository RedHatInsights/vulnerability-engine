"""
Module for /playbook APIs
"""
from peewee import DoesNotExist
from peewee import Value

from .base import GetRequest
from .rbac_manager import RbacManager as RBAC
from .rbac_manager import RbacRoutePermissions
from common.peewee_model import InsightsRule
from common.peewee_model import Playbook


class GetTemplate(GetRequest):
    """GET to /playbooks/templates/{rule_id}"""

    _endpoint_name = r"/playbooks/templates/{rule_id}"

    @classmethod
    @RBAC.need_permissions(RbacRoutePermissions.REMEDIATIONS_READ)
    def handle_get(cls, **kwargs):
        try:
            rule = InsightsRule.select(InsightsRule.id,
                                       InsightsRule.reboot_required) \
                               .where(InsightsRule.name == kwargs["rule_id"]) \
                               .get()
        except DoesNotExist:
            return cls.format_exception("Rule %s does not exist" % kwargs["rule_id"], 404)
        data = Playbook.select(Playbook.description,
                               Playbook.play,
                               Playbook.version,
                               Value(rule.reboot_required).alias("reboot_required"),
                               Playbook.resolution_type) \
                       .where(Playbook.rule_id == rule.id) \
                       .dicts()
        return {"data": [playbook for playbook in data]}  # pylint: disable=bad-option-value,unnecessary-comprehension
