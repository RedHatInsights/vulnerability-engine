#!/usr/bin/env python3
"""
vulnerability-manager - backend for UI
"""
import os
import json
import yaml

from tornado import gen, httpserver, ioloop, web

from common.logging import init_logging, get_logger

from .base import DEFAULT_ROUTE, BaseHandler, MetricsHandler, NotFoundHandler
from .cve_handler import CVEHandler, CVEHandlerV1
from .status_handler import StatusHandler
from .system_handler import SystemHandler, SystemHandlerV1
from .vulnerabilities_handler import VulnerabilitiesHandler

LOGGER = get_logger(__name__)

VULNERABILITY_VERSION = os.getenv("INSIGHTS_VULNERABILITY_VERSION", "unknown")


with open('manager.spec.yaml', 'rb') as specfile:
    SPEC = json.dumps(yaml.safe_load(specfile))

class ApiSpecHandler(BaseHandler):
    """Handler class providing API specification."""

    def get(self): # pylint: disable=arguments-differ, useless-super-delegation
        """Get API specification.
           ---
           description: Get API specification
           responses:
             200:
               description: OpenAPI/Swagger 3.0 specification JSON returned
        """
        super(ApiSpecHandler, self).get()

    @gen.coroutine
    def handle_get(self):
        self.write(SPEC)
        yield self.flush()

    def handle_post(self):
        """We don't respond to POST requests"""
        raise NotImplementedError

class VersionHandler(BaseHandler):
    """Handler class providing app version."""

    def get(self): # pylint: disable=arguments-differ, useless-super-delegation
        """Get app version.
           ---
           description: Get version of application
           responses:
             200:
               description: Version of application returned
        """
        super(VersionHandler, self).get()

    @gen.coroutine
    def handle_get(self):
        self.write(VULNERABILITY_VERSION)
        yield self.flush()

    def handle_post(self):
        """We don't respond to POST requests"""
        raise NotImplementedError


class ServerApplication(web.Application):
    """Main application class"""
    def __init__(self):
        handlers = [
            (DEFAULT_ROUTE + r"/v1/openapi\.json", ApiSpecHandler),
            (DEFAULT_ROUTE + r"/v1.0/openapi\.json", ApiSpecHandler),
            (DEFAULT_ROUTE + r"/v1/version/?", VersionHandler),
            (DEFAULT_ROUTE + r"/v1.0/version/?", VersionHandler),
            (DEFAULT_ROUTE + r"/v1/cves/CVE-[^/]*/?[^/]*/?$", CVEHandlerV1),
            (DEFAULT_ROUTE + r"/v1.0/cves/CVE-[^/]*/?[^/]*/?$", CVEHandler),
            (DEFAULT_ROUTE + r"/v1/systems/?", SystemHandlerV1),
            (DEFAULT_ROUTE + r"/v1.0/systems/?", SystemHandler),
            (DEFAULT_ROUTE + r"/v1/systems/.+/.+", SystemHandlerV1),
            (DEFAULT_ROUTE + r"/v1.0/systems/.+/.+", SystemHandler),
            (DEFAULT_ROUTE + r"/v1/vulnerabilities/cves/?", VulnerabilitiesHandler),
            (DEFAULT_ROUTE + r"/v1.0/vulnerabilities/cves/?", VulnerabilitiesHandler),
            (DEFAULT_ROUTE + r"/v1/status/?", StatusHandler),
            (DEFAULT_ROUTE + r"/v1.0/status/?", StatusHandler),
            (r"/metrics", MetricsHandler)
        ]
        LOGGER.debug(str(handlers))
        web.Application.__init__(self, handlers, autoreload=False, debug=False,
                                 serve_traceback=False, default_handler_class=NotFoundHandler)


def main():
    """Sets up and run whole application"""
    init_logging()
    app = ServerApplication()
    http_server = httpserver.HTTPServer(app)
    http_server.listen(8443)
    ioloop.IOLoop.instance().start()


if __name__ == '__main__':
    main()
