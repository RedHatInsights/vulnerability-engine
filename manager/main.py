#!/usr/bin/env python3
"""
vulnerability-manager - backend for UI
"""
from distutils.util import strtobool  # pylint: disable=import-error, no-name-in-module
import os
import json
import yaml

import connexion
from connexion.resolver import RestyResolver
from prometheus_client import generate_latest

from common.logging import init_logging, get_logger

from .base import DEFAULT_ROUTE, forbidden, MissingEntitlementException

LOGGER = get_logger(__name__)

STRICT_VALIDATION = strtobool(os.getenv('MANAGER_STRICT_VALIDATION', 'FALSE'))
VULNERABILITY_VERSION = os.getenv("INSIGHTS_VULNERABILITY_VERSION", "unknown")


with open('manager.spec.yaml', 'rb') as specfile:
    SPEC = yaml.safe_load(specfile)
# once we move to connexion this will become much nicer
SPEC['info']['version'] = VULNERABILITY_VERSION
SPEC['servers'] = [{'url': DEFAULT_ROUTE}]
SPEC_DICT = SPEC.copy()
SPEC = json.dumps(SPEC)


def version():
    """Return app version"""
    return VULNERABILITY_VERSION


def create_app():
    """Creates an aplication object which is then served by tornado"""
    app = connexion.App('Vulnerability Engine Manager', options={'swagger_ui': False})
    app.app.url_map.strict_slashes = False
    app.add_api(SPEC_DICT,
                resolver=RestyResolver('api'),
                validate_responses=True,
                strict_validation=STRICT_VALIDATION)
    app.add_error_handler(MissingEntitlementException, forbidden)

    @app.app.route('/metrics', methods=['GET'])
    def metrics():  # pylint: disable=unused-variable
        # /metrics API shouldn't be visible in the API documentation, hence it's added here in the create_app step
        return generate_latest()

    @app.app.after_request
    def set_default_headers(response):  # pylint: disable=unused-variable
        response.headers["Access-Control-Allow-Origin"] = "*"
        response.headers["Access-Control-Allow-Headers"] = "Content-Type, Access-Control-Allow-Headers, \
            Authorization, X-Requested-With, x-rh-identity"
        response.headers['Access-Control-Allow-Methods'] = 'GET, OPTIONS, PATCH, POST'

        # format default connexion errors into nicer messages
        if response.status_code >= 400:
            original = json.loads(response.data.decode('utf-8'))
            if isinstance(original, dict) and 'errors' not in original:
                response.data = json.dumps(
                    {'errors': [{'details': original['detail'], 'status': str(original['status'])}]})

        return response

    return app


def main():
    """Sets up and run whole application"""
    init_logging()
    app = create_app()
    app.run(server='tornado', port=8443)


if __name__ == '__main__':
    main()
