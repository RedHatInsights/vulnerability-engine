#!/usr/bin/env python3
"""
vulnerability-manager - backend for UI
"""
import os
import json
import yaml

import connexion
from connexion.resolver import RestyResolver
from prometheus_client import CollectorRegistry, generate_latest, multiprocess

from common.logging import init_logging, get_logger

from .base import DEFAULT_ROUTE, forbidden_missing_entitlement, forbidden_internal_only, \
    MissingEntitlementException, InternalOnlyException
from .version_handler import VULNERABILITY_VERSION

LOGGER = get_logger(__name__)


with open('manager.spec.yaml', 'rb') as specfile:
    SPEC = yaml.safe_load(specfile)
# once we move to connexion this will become much nicer
SPEC['info']['version'] = VULNERABILITY_VERSION
SPEC['servers'] = [{'url': DEFAULT_ROUTE}]
SPEC_DICT = SPEC.copy()
SPEC = json.dumps(SPEC)


def create_app():
    """Creates an aplication object which is then served by tornado"""
    app = connexion.App('Vulnerability Engine Manager', options={'swagger_ui': True,
                                                                 'openapi_spec_path': '/v1/openapi.json'})
    app.app.url_map.strict_slashes = False
    app.add_api(SPEC_DICT,
                resolver=RestyResolver('api'),
                validate_responses=True,
                strict_validation=True)
    app.add_error_handler(MissingEntitlementException, forbidden_missing_entitlement)
    app.add_error_handler(InternalOnlyException, forbidden_internal_only)

    @app.app.route('/metrics', methods=['GET'])
    def metrics():  # pylint: disable=unused-variable
        # /metrics API shouldn't be visible in the API documentation, hence it's added here in the create_app step
        registry = CollectorRegistry()
        multiprocess.MultiProcessCollector(registry)
        return generate_latest(registry)

    @app.app.after_request
    def set_default_headers(response):  # pylint: disable=unused-variable
        response.headers["Access-Control-Allow-Origin"] = "*"
        response.headers["Access-Control-Allow-Headers"] = "Content-Type, Access-Control-Allow-Headers, \
            Authorization, X-Requested-With, x-rh-identity"
        response.headers['Access-Control-Allow-Methods'] = 'GET, OPTIONS, PATCH, POST'

        # format default connexion errors into nicer messages
        if response.status_code >= 400:
            original = json.loads(response.data.decode('utf-8'))
            if isinstance(original, dict) and 'errors' not in original:
                response.data = json.dumps(
                    {'errors': [{'detail': original['detail'], 'status': str(original['status'])}]})

        return response

    return app


init_logging(num_servers=int(os.getenv("GUNICORN_WORKERS", "4")))
#  gunicorn expects an object called 'application' hence the pylint disable
application = create_app()  # pylint: disable=invalid-name

if __name__ == '__main__':
    application.run(host='0.0.0.0', port=8443)
