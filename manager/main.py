#!/usr/bin/python3

import json
import os
import sys

import requests

from database.database_handler import DatabaseHandler, init_db
from tornado.ioloop import IOLoop
from tornado.web import Application, RequestHandler

VMAAS_URL = "https://webapp-vmaas-stage.1b13.insights.openshiftapps.com"


class CVEDetailsHandler(RequestHandler):
    """Handler class returning CVE details."""

    def get(self, *args, **kwargs):
        synopsis = self.request.uri.split('/')[-1]
        data = vmaas_call("/api/v1/cves", {"cve_list": [synopsis]})
        cve_list = data["cve_list"]
        if synopsis not in cve_list:
            self.send_error(404)
        else:
            self.write(json.dumps(cve_list[synopsis]))
        self.flush()

    def post(self, *args, **kwargs):
        self.flush()


class AffectedSystemsHandler(RequestHandler):
    """Handler class returning affected systems by given CVE."""

    def get(self, *args, **kwargs):
        synopsis = self.request.uri.split('/')[-1]
        self.conn = DatabaseHandler.get_connection()
        cur = self.conn.cursor()
        cur.execute(
            "SELECT s.uuid, s.display_name, v.cve, v.cvss3_score \
            FROM system_vulnerabilities v \
            JOIN system_platform s ON v.uuid = s.uuid \
            WHERE v.cve = %s", (synopsis,))
        affected_systems = []
        for system in cur.fetchall():
            system_entry = {}
            system_entry["uuid"] = system[0]
            system_entry["display_name"] = system[1]
            system_entry["cve"] = system[2]
            system_entry["cvss3_score"] = float(system[3])
            affected_systems.append(system_entry)
        self.write(json.dumps(affected_systems))
        self.flush()

    def post(self, *args, **kwargs):
        self.flush()


class ServerApplication(Application):
    def __init__(self):
        handlers = [
            (r"/api/v1/cves/details/CVE-[^/]*", CVEDetailsHandler),
            (r"/api/v1/cves/affectedsystems/CVE-[^/]*", AffectedSystemsHandler)
        ]
        Application.__init__(self, handlers)
        self.instance = IOLoop.instance()

    def start(self):
        self.instance.start()


def main():
    init_db()
    app = ServerApplication()
    app.listen(8000)
    app.start()


def vmaas_call(endpoint, data):
    headers = {'Content-type': 'application/json',
               'Accept': 'application/json'}
    response = requests.post(VMAAS_URL + endpoint,
                             data=json.dumps(data), headers=headers)
    return response.json()


if __name__ == '__main__':
    main()
