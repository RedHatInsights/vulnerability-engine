# pylint: skip-file
# flake8: noqa
import base64
import json
import os

from gunicorn.glogging import Logger
from prometheus_client import multiprocess

from common.logging import setup_cw_logging


def get_account(headers: list) -> str:
    """Get acount from given b64 string."""
    x_rh_identity = [x[1] for x in headers if x[0].lower() == "x-rh-identity"]
    if not x_rh_identity:
        return None
    try:
        decoded_value = base64.b64decode(x_rh_identity[0]).decode("utf-8")
        decoded = json.loads(decoded_value)
        org_id = decoded.get("identity", {}).get("org_id")
        if decoded.get("identity", {}).get("type", "User") == "ServiceAccount":
            detail = decoded.get("identity", {}).get("service_account", {}).get("username")
        else:
            detail = decoded.get("identity", {}).get("user", {}).get("email")
    except Exception as exc:
        return "error getting user info"
    return "{} {}".format(org_id, detail)


class CustomLogger(Logger):
    """Custom logger for Gunicorn log messages."""

    def setup(self, cfg):
        """Configure Gunicorn application logging configuration."""
        super().setup(cfg)
        setup_cw_logging(self.access_log)

    def atoms(self, resp, req, environ, request_time):
        """ Gets atoms for log formating.
        """
        status = resp.status
        if isinstance(status, str):
            status = status.split(None, 1)[0]
        atoms = {
            "h": environ.get("REMOTE_ADDR", "-"),
            "l": "-",
            "u": self._get_user(environ) or "-",
            "t": self.now(),
            "r": "%s %s %s" % (environ["REQUEST_METHOD"],
                environ["RAW_URI"], environ["SERVER_PROTOCOL"]),
            "s": status,
            "m": environ.get("REQUEST_METHOD"),
            "U": environ.get("PATH_INFO"),
            "q": environ.get("QUERY_STRING"),
            "H": environ.get("SERVER_PROTOCOL"),
            "b": getattr(resp, "sent", None) is not None and str(resp.sent) or "-",
            "B": getattr(resp, "sent", None),
            "f": environ.get("HTTP_REFERER", "-"),
            "a": environ.get("HTTP_USER_AGENT", "-"),
            "T": request_time.seconds,
            "D": (request_time.seconds*1000000) + request_time.microseconds,
            "L": "%d.%06d" % (request_time.seconds, request_time.microseconds),
            "p": "<%s>" % os.getpid(),
            "x": get_account(req.headers) if hasattr(req, "headers") else None,
        }

        # add request headers
        if hasattr(req, "headers"):
            req_headers = req.headers
        else:
            req_headers = req

        if hasattr(req_headers, "items"):
            req_headers = req_headers.items()

        atoms.update(dict([("{%s}i" % k.lower(), v) for k, v in req_headers]))

        resp_headers = resp.headers
        if hasattr(resp_headers, "items"):
            resp_headers = resp_headers.items()

        # add response headers
        atoms.update(dict([("{%s}o" % k.lower(), v) for k, v in resp_headers]))

        # add environ variables
        environ_variables = environ.items()
        atoms.update(dict([("{%s}e" % k.lower(), v) for k, v in environ_variables]))

        return atoms


def child_exit(server, worker):
    multiprocess.mark_process_dead(worker.pid)


accesslog="-"
access_log_format="%(t)s %(x)s %(h)s %(s)s %(m)s %(U)s (%(q)s) %(L)ss"
logger_class="manager.gunicorn_conf.CustomLogger"
