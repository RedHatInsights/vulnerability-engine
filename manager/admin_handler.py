"""
Module for /refresh API endpoints
"""
import os

import requests

from common.logging import get_logger
from common.peewee_model import ContentVersion, DB
from .base import DeleteRequest, GetRequest, PutRequest, ApplicationException

TASKOMATIC_HOST = os.getenv("TASKOMATIC_HOST", "http://ve_taskomatic:8000")
VMAAS_SYNC_HOST = os.getenv("VMAAS_SYNC_HOST", "http://ve_vmaas_sync:8000")

LOGGER = get_logger(__name__)


class GetMissingInInventory(GetRequest):
    """GET to /v1/systems/missing_in_inventory"""

    _endpoint_name = r'/v1/systems/missing_in_inventory'

    @classmethod
    def handle_get(cls, **kwargs):  # pylint: disable=unused-argument
        """Get count of systems in system_platform table but missing in inventory."""
        cursor = DB.execute_sql("""
            SELECT COUNT(sp.inventory_id)
            FROM system_platform sp LEFT JOIN
                 inventory.hosts ih ON CAST(sp.inventory_id AS UUID) = ih.id
            WHERE ih.id IS NULL
              AND sp.when_deleted IS NULL
        """)
        return cursor.fetchone()[0]


class DeleteMissingInInventory(DeleteRequest):
    """DELETE to /v1/systems/missing_in_inventory"""

    _endpoint_name = r'/v1/systems/missing_in_inventory'

    @classmethod
    def handle_delete(cls, **kwargs):  # pylint: disable=unused-argument
        """Delete systems from system_platform table missing in inventory."""
        DB.execute_sql("""
            UPDATE system_platform sp
               SET opt_out = true, stale = true, when_deleted = now()
            FROM (
                SELECT sp2.inventory_id
                FROM system_platform sp2 LEFT JOIN
                     inventory.hosts ih ON CAST(sp2.inventory_id AS UUID) = ih.id
                WHERE ih.id IS NULL
                  AND sp2.when_deleted IS NULL
                ORDER BY sp2.inventory_id
                FOR UPDATE OF sp2
            ) up
            WHERE sp.inventory_id = up.inventory_id
        """)
        return ""


class TaskomaticRun(PutRequest):
    """PUT to /v1/taskomatic/run"""

    _endpoint_name = r'/v1/taskomatic/run'

    @classmethod
    def handle_put(cls, **kwargs):
        """Trigger immediate run of taskomatic job with given name."""
        job_name = kwargs["job_name"]
        response = requests.put(f"{TASKOMATIC_HOST}/api/v1/run/{job_name}")
        if response.status_code != 200:
            raise ApplicationException("job_name must exist", 404)


class VmaasSync(PutRequest):
    """PUT to /v1/vmaas/sync"""

    _endpoint_name = r'/v1/vmaas/sync'

    @classmethod
    def handle_put(cls, **kwargs):  # pylint: disable=unused-argument
        """Trigger immediate run of sync in vmaas_sync."""
        requests.put(f"{VMAAS_SYNC_HOST}/api/v1/sync")


class VmaasReEvaluate(PutRequest):
    """PUT to /v1/vmaas/re-evaluate"""

    _endpoint_name = r'/v1/vmaas/re-evaluate'

    @classmethod
    def handle_put(cls, **kwargs):  # pylint: disable=unused-argument
        """Trigger immediate run of re-evaluation in vmaas_sync."""
        requests.put(f"{VMAAS_SYNC_HOST}/api/v1/re-evaluate")


class DeleteCve(DeleteRequest):
    """DELETE to /cves/{cve_id}"""

    _endpoint_name = r'/cves/{cve_id}'

    @classmethod
    def handle_delete(cls, **kwargs):
        """Delete CVE with given name."""
        cve_id = kwargs["cve_id"]
        requests.delete(f"{VMAAS_SYNC_HOST}/api/v1/cves/{cve_id}")


class GetContentVersion(GetRequest):
    """GET to /v1/content_version"""

    _endpoint_name = r'/v1/content_version'

    @classmethod
    def handle_get(cls, **kwargs):
        """Return content versions"""
        data = ContentVersion.select(ContentVersion.insights_content_vulnerability,
                                     ContentVersion.insights_content_vulnerability_repo,
                                     ContentVersion.insights_playbooks,
                                     ContentVersion.insights_playbooks_repo).dicts()
        return data[0]
