"""
Module for /status API endpoint
"""

import connexion
from peewee import IntegrityError
from psycopg2 import IntegrityError as psycopg2IntegrityError

from common.logging import get_logger
from common.peewee_model import CveMetadata, DB, SystemPlatform, SystemVulnerabilities, Status, RHAccount
from .base import GetRequest, PatchRequest

LOGGER = get_logger(__name__)


class GetStatus(GetRequest):
    """GET to /v1/status"""

    _endpoint_name = r'/v1/status'

    @classmethod
    def handle_get(cls, **kwargs):  # pylint: disable=unused-argument
        """Return the data from the Status table as JSON"""
        query = (Status.select().order_by(Status.id.asc()).dicts())
        status_list = []
        for status in query:
            status_list.append(status)
        LOGGER.debug(status_list)
        return {'data': status_list, 'meta': {'total_items': len(status_list)}}, 200


class PatchStatus(PatchRequest):
    """PATCH to /v1/status"""

    _endpoint_name = r'/v1/status'

    @classmethod
    def handle_patch(cls, **kwargs):
        """Update the 'status' field for a system/cve combination"""
        # pylint: disable=singleton-comparison
        data = kwargs['data']
        in_inventory_id = data['inventory_id']
        in_cve = data['cve']
        in_status_id = data['status_id']
        LOGGER.debug('SYSID [%s] CVE [%s] STATUS-ID [%s] ACCT [%s]',
                     in_inventory_id, in_cve, in_status_id, connexion.context['user'])
        try:
            plat = (SystemPlatform.select(SystemPlatform.id)
                    .join(RHAccount, on=(SystemPlatform.rh_account_id == RHAccount.id))
                    .where((RHAccount.name == connexion.context['user']) &
                           (SystemPlatform.inventory_id == in_inventory_id)))  # noqa: E712
            vuln = (SystemVulnerabilities.update(status_id=in_status_id)
                    .from_(plat)
                    .where((SystemVulnerabilities.system_id == plat) &
                           (SystemVulnerabilities.cve_id ==
                            (CveMetadata.select(CveMetadata.id).where(CveMetadata.cve == in_cve)))))
            rows_modified = vuln.execute()
            if rows_modified == 0:
                # sysid/cve/acct combination does not exist
                return cls.format_exception('inventory_id/cve must exist and inventory_id must be visible to user', 404)
        except (IntegrityError, psycopg2IntegrityError) as value_error:
            # usually means bad-status-id
            LOGGER.error(str(value_error))
            DB.rollback()
            return cls.format_exception(f'status_id=({in_status_id}) is invalid', 400)
        except ValueError as value_error:
            DB.rollback()
            return cls.format_exception(str(value_error), 500)
        return ''
