"""
Module for /status API endpoint
"""

import connexion
from peewee import IntegrityError
from psycopg2 import IntegrityError as psycopg2IntegrityError

from common.logging import get_logger
from common.peewee_model import CveMetadata, DB, SystemPlatform, SystemVulnerabilities, \
    Status, RHAccount, CveAccountData
from .base import GetRequest, PatchRequest

LOGGER = get_logger(__name__)


class GetStatus(GetRequest):
    """GET to /v1/status"""

    _endpoint_name = r'/v1/status'

    @classmethod
    def handle_get(cls, **kwargs):  # pylint: disable=unused-argument
        """Return the data from the Status table as JSON"""
        query = (Status.select().order_by(Status.id.asc()).dicts())
        status_list = []
        for status in query:
            status_list.append(status)
        LOGGER.debug(status_list)
        return {'data': status_list, 'meta': {'total_items': len(status_list)}}, 200


class PatchStatus(PatchRequest):
    """PATCH to /v1/status"""

    _endpoint_name = r'/v1/status'

    @classmethod
    def handle_patch(cls, **kwargs):
        """Update the 'status' field for a system/cve combination"""
        # pylint: disable=singleton-comparison
        data = kwargs['data']
        if 'inventory_id' in data:
            in_inventory_id_list = data['inventory_id']
            if isinstance(in_inventory_id_list, str):
                in_inventory_id_list = [in_inventory_id_list]
        else:
            # change status for all systems for given CVE(s)
            in_inventory_id_list = None
        in_cve_list = data['cve']
        if isinstance(in_cve_list, str):
            in_cve_list = [in_cve_list]
        status_to_cves_map = {}
        if 'status_id' in data:
            # single status for all CVEs
            status_to_cves_map[data['status_id']] = in_cve_list
        else:
            # use CVE-level status if status not specified
            cve_details = (CveAccountData.select(CveMetadata.cve, CveAccountData.status)
                           .join(CveMetadata, on=(CveAccountData.cve_id == CveMetadata.id))
                           .join(RHAccount, on=(CveAccountData.rh_account_id == RHAccount.id))
                           .where((RHAccount.name == connexion.context['user']) &
                                  (CveMetadata.cve << in_cve_list))
                           .dicts())
            found_cves = set()
            for cve in cve_details:
                status_to_cves_map.setdefault(cve["status"], []).append(cve["cve"])
                found_cves.add(cve["cve"])
            # not found CVEs have 0 status by default
            for cve in in_cve_list:
                if cve not in found_cves:
                    status_to_cves_map.setdefault(0, []).append(cve)
        try:
            systems = (SystemPlatform.select(SystemPlatform.id)
                       .join(RHAccount, on=(SystemPlatform.rh_account_id == RHAccount.id))
                       .where(RHAccount.name == connexion.context['user']))  # noqa: E712
            if in_inventory_id_list is not None:
                systems = systems.where(SystemPlatform.inventory_id << in_inventory_id_list)
            rows_modified = []
            # set statuses and their CVE lists
            for status_id, status_cve_list in status_to_cves_map.items():
                vuln = (SystemVulnerabilities.update(status_id=status_id)
                        .from_(systems)
                        .where((SystemVulnerabilities.system_id << systems) &
                               (SystemVulnerabilities.cve_id <<
                                (CveMetadata.select(CveMetadata.id).where(CveMetadata.cve << status_cve_list))))
                        .returning(SystemVulnerabilities.id))
                updated_details = (SystemVulnerabilities.select(SystemPlatform.inventory_id, CveMetadata.cve)
                                   .join(CveMetadata, on=(SystemVulnerabilities.cve_id == CveMetadata.id))
                                   .join(SystemPlatform, on=(SystemVulnerabilities.system_id == SystemPlatform.id))
                                   .where(SystemVulnerabilities.id << [row.id for row in vuln])
                                   .dicts())
                for updated_row in updated_details:
                    rows_modified.append({"inventory_id": updated_row["inventory_id"], "cve": updated_row["cve"]})
            if not rows_modified:
                # sysid/cve/acct combination does not exist
                return cls.format_exception('inventory_id/cve must exist and inventory_id must be visible to user', 404)
        except (IntegrityError, psycopg2IntegrityError) as value_error:
            # usually means bad-status-id
            LOGGER.error(str(value_error))
            DB.rollback()
            return cls.format_exception(f'status_id={list(status_to_cves_map.keys())} is invalid', 400)
        except ValueError as value_error:
            DB.rollback()
            return cls.format_exception(str(value_error), 500)
        return {"updated": rows_modified}
