"""
Module for /status API endpoint
"""

import json

from peewee import IntegrityError

from common.logging import get_logger
from common.peewee_model import DB, SystemPlatform, SystemVulnerabilities, Status
from .base import AuthenticatedHandler

LOGGER = get_logger(__name__)


class StatusHandler(AuthenticatedHandler):
    """Handler for /status endpoint"""


    def handle_patch(self):
        """Update the 'status' field for a system/cve combination"""
        data = self.get_post_data()
        if not data or not ('inventory_id' in data and 'cve' in data and 'status_id' in data):
            # data must exist, be valid JSON, and inventory_id/cve/status_id must ALL be provided
            self.raiseError(400, 'data must exist, be valid JSON, and inventory_id/cve/status_id must ALL be provided')
            return

        in_inventory_id = data['inventory_id']
        in_cve = data['cve']
        in_status_id = data['status_id']
        LOGGER.debug('SYSID [%s] CVE [%s] STATUS-ID [%s] ACCT [%s]',
                     in_inventory_id, in_cve, in_status_id, self.rh_account_number)
        try:
            plat = (SystemPlatform.select(SystemPlatform.inventory_id)
                    .where((SystemPlatform.rh_account == self.rh_account_number) &
                           (SystemPlatform.inventory_id == in_inventory_id) &
                           (SystemPlatform.opt_out == False)))  # pylint: disable=singleton-comparison
            if self.hide_satellite_managed:
                plat = plat.where(SystemPlatform.satellite_managed == False)  # pylint: disable=singleton-comparison
            vuln = (SystemVulnerabilities.update(status_id=in_status_id)
                    .from_(plat)
                    .where((SystemVulnerabilities.inventory_id == in_inventory_id) &
                           (SystemVulnerabilities.cve == in_cve)))
            rows_modified = vuln.execute()
            if rows_modified == 0:
                # sysid/cve/acct combination does not exist
                self.raiseError(404, 'inventory_id/cve must exist and inventory_id must be visible to user')
            self.flush()
        except (IntegrityError, ValueError) as integ_error:
            # usually means bad-status-id
            DB.rollback()
            self.raiseError(400, str(integ_error))

    def handle_post(self):
        """Update the 'status' field for a system/cve combination"""
        # TODO: to be deleted once we migrate from POST to PATCH
        self.handle_patch()

    def handle_get(self):
        """Return the data from the Status table as JSON"""
        query = (Status.select().order_by(Status.id.asc()).dicts())
        status_list = []
        for status in query:
            status_list.append(status)
        LOGGER.debug(status_list)
        self.write(json.dumps({'data': status_list, 'meta': {'total_items': len(status_list)}}))
        self.flush()
