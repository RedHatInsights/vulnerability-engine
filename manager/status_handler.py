"""
Module for /status API endpoint
"""

import json

from peewee import DoesNotExist, IntegrityError

from common.logging import get_logger
from common.peewee_model import DB, SystemPlatform, SystemVulnerabilities, Status
from .base import AuthenticatedHandler

LOGGER = get_logger(__name__)


class StatusHandler(AuthenticatedHandler):
    """Handler for /status endpoint"""

    def get(self): # pylint: disable=arguments-differ, useless-super-delegation
        """GET to return the list of available status_id/status pairs
           ---
           description: GET to return the list of available status_id/status pairs
           responses:
             200:
               description: status-list returned
               schema:
                 $ref: '#/definitions/StatusList'
           tags:
            - status
        """
        super(StatusHandler, self).get()

    def patch(self): # pylint: disable=arguments-differ, useless-super-delegation
        """
           ---
           description: PATCH to set the status-id for a specified inventory_id/cve combination
           parameters:
             - name: body
               description: Input JSON
               required: True
               in: body
               schema:
                 type: object
                 properties:
                   inventory_id:
                     type: string
                   cve:
                     type: string
                     example: CVE-2019-000666
                   status_id:
                     type: int
                     example: 3
                 required:
                   - inventory_id
                   - cve
                   - status_id
           responses:
             200:
               description: status successfully changed
             400:
               description: malformed JSON, missing one of inventory_id/cve/status_id, or bad status_id
             404:
               description: specified inventory_id/cve does not exist or is not visible to requesting rh_account_num
           tags:
            - status
        """
        super(StatusHandler, self).patch()

    def post(self): # pylint: disable=arguments-differ, useless-super-delegation
        """
           ---
           description: POST to set the status-id for a specified inventory_id/cve combination
           parameters:
             - name: body
               description: Input JSON
               required: True
               in: body
               schema:
                 type: object
                 properties:
                   inventory_id:
                     type: string
                   cve:
                     type: string
                     example: CVE-2019-000666
                   status_id:
                     type: int
                     example: 3
                 required:
                   - inventory_id
                   - cve
                   - status_id
           responses:
             200:
               description: status successfully changed
             400:
               description: malformed JSON, missing one of inventory_id/cve/status_id, or bad status_id
             404:
               description: specified inventory_id/cve does not exist or is not visible to requesting rh_account_num
           tags:
            - status
        """
        # TODO: to be deleted once we migrate from POST to PATCH
        super(StatusHandler, self).post()

    def handle_patch(self):
        """Update the 'status' field for a system/cve combination"""
        data = self.get_post_data()
        if not data or not ('inventory_id' in data and 'cve' in data and 'status_id' in data):
            # data must exist, be valid JSON, and inventory_id/cve/status_id must ALL be provided
            self.raiseError(400, 'data must exist, be valid JSON, and inventory_id/cve/status_id must ALL be provided')
            return

        in_inventory_id = data['inventory_id']
        in_cve = data['cve']
        in_status_id = data['status_id']
        LOGGER.debug('SYSID [%s] CVE [%s] STATUS-ID [%s] ACCT [%s]',
                     in_inventory_id, in_cve, in_status_id, self.rh_account_number)
        try:
            plat = (SystemPlatform.select(SystemPlatform.inventory_id)
                    .where((SystemPlatform.rh_account == self.rh_account_number) &
                           (SystemPlatform.inventory_id == in_inventory_id)))
            vuln = (SystemVulnerabilities.update(status_id=in_status_id)
                    .from_(plat)
                    .where((SystemVulnerabilities.inventory_id == in_inventory_id) &
                           (SystemVulnerabilities.cve == in_cve)))
            rows_modified = vuln.execute()
            if rows_modified == 0:
                # sysid/cve/acct combination does not exist
                self.raiseError(404, 'inventory_id/cve must exist and inventory_id must be visible to user')
            self.flush()
        except DoesNotExist:
            # sysid/cve/acct combination does not exist
            self.raiseError(404, 'inventory_id/cve must exist and inventory_id must be visible to user')
        except IntegrityError as integ_error:
            # usually means bad-status-id
            DB.rollback()
            self.raiseError(400, str(integ_error))

    def handle_post(self):
        """Update the 'status' field for a system/cve combination"""
        # TODO: to be deleted once we migrate from POST to PATCH
        self.handle_patch()

    def handle_get(self):
        """Return the data from the Status table as JSON"""
        query = (Status.select().order_by(Status.id.asc()).dicts())
        status_list = []
        for status in query:
            status_list.append(status)
        LOGGER.debug(status_list)
        self.write(json.dumps(status_list))
        self.flush()
