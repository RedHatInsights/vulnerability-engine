"""
Module for /dashbar API
"""
from peewee import fn, Case

import connexion

from common.logging import get_logger
from common.constants import HostType
from common.peewee_model import SystemVulnerabilities, CveMetadata, SystemPlatform
from .base import GetRequest, get_account_data, cyndi_join
from .rbac_manager import RbacRoutePermissions, RbacManager as RBAC

LOGGER = get_logger(__name__)


class GetDashbar(GetRequest):
    """GET to /v1/dashbar"""

    _endpoint_name = r'/v1/dashbar'

    @classmethod
    @RBAC.need_permissions(RbacRoutePermissions.VULNERABILITY_RESULTS)
    def handle_get(cls, **_):
        # pylint: disable=singleton-comparison
        rh_account, _, _ = get_account_data(connexion.context["user"])
        query = (SystemVulnerabilities
                 .select(fn.Count(fn.Distinct(Case(CveMetadata.exploits, ((True, CveMetadata.id),)))).alias("exploitable_cves"),
                         fn.Count(fn.Distinct(Case(CveMetadata.impact_id, ((7, CveMetadata.id),)))).alias("critical_cves"),
                         fn.Count(fn.Distinct(Case(CveMetadata.impact_id, ((5, CveMetadata.id),)))).alias("important_cves"),
                         fn.Count(fn.Distinct(Case(None, ((SystemVulnerabilities.rule_id.is_null(False), CveMetadata.id),)))).alias("cves_with_rule"))
                 .join(CveMetadata, on=(SystemVulnerabilities.cve_id == CveMetadata.id))
                 .join(SystemPlatform, on=((SystemVulnerabilities.system_id == SystemPlatform.id) &
                                           (SystemPlatform.rh_account_id == rh_account) &
                                           (SystemPlatform.opt_out == False) &
                                           (SystemPlatform.stale == False) &
                                           (SystemPlatform.when_deleted.is_null(True)) &
                                           (fn.COALESCE(SystemPlatform.host_type, 'null') != HostType.EDGE)))
                 .where(SystemVulnerabilities.rh_account_id == rh_account))
        query = cyndi_join(query)
        res = query.first()
        return {"exploitable_cves": res.exploitable_cves,
                "critical_cves": res.critical_cves,
                "important_cves": res.important_cves,
                "cves_with_rule": res.cves_with_rule}
