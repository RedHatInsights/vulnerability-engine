"""
Module for /dashbar API
"""
from peewee import fn, Case, JOIN

import connexion

from common.logging import get_logger
from common.constants import HostType
from common.peewee_model import SystemVulnerabilities, CveMetadata, SystemPlatform, InsightsRule, CveRuleMapping, CveAccountCache
from .base import GetRequest, get_account_data, cyndi_join, parse_tags, is_cyndi_request, DISABLE_ACCOUNT_CACHE, update_cve_cache_keepalive
from .filters import apply_filters, filter_types
from .rbac_manager import RbacRoutePermissions, RbacManager as RBAC

LOGGER = get_logger(__name__)


class GetDashbar(GetRequest):
    """GET to /v1/dashbar"""

    _endpoint_name = r'/v1/dashbar'

    @classmethod
    @RBAC.need_permissions(RbacRoutePermissions.VULNERABILITY_RESULTS)
    def handle_get(cls, **kwargs):
        # pylint: disable=singleton-comparison
        args_desc = [
            {'arg_name': 'tags', 'convert_func': parse_tags},
            {'arg_name': 'sap_system', 'convert_func': None},
            {'arg_name': 'sap_sids', 'convert_func': None}
        ]
        args = cls._parse_arguments(kwargs, args_desc)
        cyndi_reuest = is_cyndi_request(args)
        filters = [filter_types.SYSTEM_TAGS, filter_types.SYSTEM_SAP, filter_types.SYSTEM_SAP_SIDS]

        rh_account, cve_cache_from, cve_cache_keepalive = get_account_data(connexion.context["user"])
        update_cve_cache_keepalive(rh_account, cve_cache_keepalive)

        if not DISABLE_ACCOUNT_CACHE and not cyndi_reuest and cve_cache_from:
            query = (CveAccountCache
                     .select(fn.Count(fn.Distinct(Case(CveMetadata.exploits, ((True, CveMetadata.id),)))).alias("exploitable_cves"),
                             fn.Count(fn.Distinct(Case(CveMetadata.impact_id, ((7, CveMetadata.id),)))).alias("critical_cves"),
                             fn.Count(fn.Distinct(Case(CveMetadata.impact_id, ((5, CveMetadata.id),)))).alias("important_cves"),
                             fn.Count(fn.Distinct(Case(None, ((InsightsRule.id.is_null(False), CveMetadata.id),)))).alias("cves_with_rule"))
                     .join(CveMetadata, on=(CveAccountCache.cve_id == CveMetadata.id))
                     .join(CveRuleMapping, JOIN.LEFT_OUTER, on=((CveAccountCache.cve_id == CveRuleMapping.cve_id)))
                     .join(InsightsRule, JOIN.LEFT_OUTER, on=((CveRuleMapping.rule_id == InsightsRule.id) &
                                                              (InsightsRule.active == True) &
                                                              (~InsightsRule.rule_only)))
                     .where(CveAccountCache.rh_account_id == rh_account))
        else:
            query = (SystemVulnerabilities
                     .select(fn.Count(fn.Distinct(Case(CveMetadata.exploits, ((True, CveMetadata.id),)))).alias("exploitable_cves"),
                             fn.Count(fn.Distinct(Case(CveMetadata.impact_id, ((7, CveMetadata.id),)))).alias("critical_cves"),
                             fn.Count(fn.Distinct(Case(CveMetadata.impact_id, ((5, CveMetadata.id),)))).alias("important_cves"),
                             fn.Count(fn.Distinct(Case(None, ((InsightsRule.id.is_null(False), CveMetadata.id),)))).alias("cves_with_rule"))
                     .join(CveMetadata, on=(SystemVulnerabilities.cve_id == CveMetadata.id))
                     .join(CveRuleMapping, JOIN.LEFT_OUTER, on=((SystemVulnerabilities.cve_id == CveRuleMapping.cve_id)))
                     .join(InsightsRule, JOIN.LEFT_OUTER, on=((CveRuleMapping.rule_id == InsightsRule.id) &
                                                              (InsightsRule.active == True) &
                                                              (~InsightsRule.rule_only)))
                     .join(SystemPlatform, on=((SystemVulnerabilities.system_id == SystemPlatform.id) &
                                               (SystemPlatform.rh_account_id == rh_account) &
                                               (SystemPlatform.opt_out == False) &
                                               (SystemPlatform.stale == False) &
                                               (SystemPlatform.when_deleted.is_null(True)) &
                                               (fn.COALESCE(SystemPlatform.host_type, 'null') != HostType.EDGE)))
                     .where(SystemVulnerabilities.rh_account_id == rh_account)
                     .where(SystemVulnerabilities.when_mitigated.is_null(True)))
            if cyndi_reuest:
                query = cyndi_join(query)
                query = apply_filters(query, args, filters, {})

        res = query.first()

        return {"exploitable_cves": res.exploitable_cves,
                "critical_cves": res.critical_cves,
                "important_cves": res.important_cves,
                "cves_with_rule": res.cves_with_rule}
