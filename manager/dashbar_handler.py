"""
Module for /dashbar API
"""
import connexion
from peewee import JOIN, Case, fn

from common.logging import get_logger
from common.peewee_model import (SystemVulnerabilities, CveMetadata, SystemPlatform,
                                 InsightsRule, CveRuleMapping, CveAccountCache)
from common.peewee_conditions import (system_is_active, system_is_vulnerable)
from common.utils import filter_exploits

from .base import (DISABLE_ACCOUNT_CACHE, GetRequest, cyndi_join,
                   get_account_data, is_cyndi_request, parse_tags,
                   update_cve_cache_keepalive)
from .filters import apply_filters, filter_types
from .rbac_manager import RbacManager as RBAC
from .rbac_manager import RbacRoutePermissions

LOGGER = get_logger(__name__)


class GetDashbar(GetRequest):
    """GET to /v1/dashbar"""

    _endpoint_name = r"/v1/dashbar"

    @classmethod
    @RBAC.need_permissions(RbacRoutePermissions.VULNERABILITY_RESULTS)
    def handle_get(cls, **kwargs):
        # pylint: disable=singleton-comparison
        args_desc = [
            {"arg_name": "tags", "convert_func": parse_tags},
            {"arg_name": "sap_system", "convert_func": None},
            {"arg_name": "sap_sids", "convert_func": None},
            {"arg_name": "ansible", "convert_func": None},
            {"arg_name": "mssql", "convert_func": None},
        ]
        args = cls._parse_arguments(kwargs, args_desc)
        cyndi_request = is_cyndi_request(args)
        filters = [filter_types.SYSTEM_TAGS, filter_types.SYSTEM_SAP, filter_types.SYSTEM_SAP_SIDS, filter_types.SYSTEM_AAP, filter_types.SYSTEM_MSSQL]

        rh_account, cve_cache_from, cve_cache_keepalive = get_account_data(connexion.context["user"])
        update_cve_cache_keepalive(rh_account, cve_cache_keepalive)

        if not DISABLE_ACCOUNT_CACHE and not cyndi_request and cve_cache_from:
            query = (CveAccountCache
                     .select(fn.Count(fn.Distinct(Case(None, ((CveMetadata.exploit_data.is_null(False) &
                                                              filter_exploits(CveMetadata.advisories_list.is_null(False)),
                                                               CveMetadata.id),)))).alias("exploitable_cves"),
                             fn.Count(fn.Distinct(Case(CveMetadata.impact_id, ((7, CveMetadata.id),)))).alias("critical_cves"),
                             fn.Count(fn.Distinct(Case(CveMetadata.impact_id, ((5, CveMetadata.id),)))).alias("important_cves"),
                             fn.Count(fn.Distinct(Case(None, ((InsightsRule.id.is_null(False), CveMetadata.id),)))).alias("cves_with_rule"))
                     .join(CveMetadata, on=(CveAccountCache.cve_id == CveMetadata.id))
                     .join(CveRuleMapping, JOIN.LEFT_OUTER, on=((CveAccountCache.cve_id == CveRuleMapping.cve_id)))
                     .join(InsightsRule, JOIN.LEFT_OUTER, on=((CveRuleMapping.rule_id == InsightsRule.id) &
                                                              (InsightsRule.active == True)))
                     .where(CveAccountCache.rh_account_id == rh_account))
        else:
            query = (SystemVulnerabilities
                     .select(fn.Count(fn.Distinct(Case(None, ((CveMetadata.exploit_data.is_null(False) &
                                                              filter_exploits(CveMetadata.advisories_list.is_null(False)),
                                                               CveMetadata.id),)))).alias("exploitable_cves"),
                             fn.Count(fn.Distinct(Case(CveMetadata.impact_id, ((7, CveMetadata.id),)))).alias("critical_cves"),
                             fn.Count(fn.Distinct(Case(CveMetadata.impact_id, ((5, CveMetadata.id),)))).alias("important_cves"),
                             fn.Count(fn.Distinct(Case(None, ((InsightsRule.id.is_null(False), CveMetadata.id),)))).alias("cves_with_rule"))
                     .join(CveMetadata, on=(SystemVulnerabilities.cve_id == CveMetadata.id))
                     .join(CveRuleMapping, JOIN.LEFT_OUTER, on=((SystemVulnerabilities.cve_id == CveRuleMapping.cve_id)))
                     .join(InsightsRule, JOIN.LEFT_OUTER, on=(CveRuleMapping.rule_id == InsightsRule.id))
                     .join(SystemPlatform, on=((SystemVulnerabilities.system_id == SystemPlatform.id) &
                                               system_is_active(rh_account_id=rh_account)))
                     .where(SystemVulnerabilities.rh_account_id == rh_account)
                     .where(system_is_vulnerable()))
            if cyndi_request:
                query = cyndi_join(query)
                query = apply_filters(query, args, filters, {})
        res = query.first()

        return {"exploitable_cves": res.exploitable_cves,
                "critical_cves": res.critical_cves,
                "important_cves": res.important_cves,
                "cves_with_rule": res.cves_with_rule}
