"""
Module for /rule_ids API endpoint
"""

import json

from common import AuthenticatedHandler, parse_url
from database.peewee_model import SysVulnRulesResults, SystemVulnerabilities, ProdsecRule, SystemPlatform


class RuleHandler(AuthenticatedHandler):
    """Handler class returning data related to given rule id."""

    def get(self): # pylint: disable=arguments-differ, useless-super-delegation
        """
        ---
        description: Get rule id details
        responses:
          200:
            description: Rule id details returned.
        """
        super(RuleHandler, self).get()

    def handle_get(self):
        route = parse_url(self.request.uri, "/rules")
        if len(route) == 2 and route[1] == "affected_systems":
            self.get_affected_systems(route[0])
        elif len(route) == 3:
            if route[1] == "insights_id":
                self.get_details_by_insights_id(route[0], route[2])
            elif route[1] == "inventory_id":
                self.get_details_by_inventory_id(route[0], route[2])
            else:
                self.raiseError(404)
        else:
            self.raiseError(404)
        self.flush()

    def post(self): # pylint: disable=arguments-differ
        self.flush()

    def handle_post(self): # pylint: disable=arguments-differ
        """We don't respond to POST requests"""
        self.flush()

    def get_affected_systems(self, rule_id):
        """Gets affected systems with same rule id"""
        query = (
            SysVulnRulesResults
            .select(SystemPlatform.insights_id,
                    SystemPlatform.inventory_id,
                    SystemPlatform.display_name,
                    ProdsecRule.name.alias("rule_id"))
            .join(SystemVulnerabilities, on=(SysVulnRulesResults.sys_vuln_id == SystemVulnerabilities.id))
            .join(SystemPlatform, on=(SystemVulnerabilities.insights_id == SystemPlatform.insights_id))
            .join(ProdsecRule, on=(SysVulnRulesResults.prodsec_rule_id == ProdsecRule.id))
            .where(ProdsecRule.name == rule_id)
            .where(SystemPlatform.rh_account == self.rh_account_number)
            .dicts()
        )
        affected_systems = []
        for row in query:
            system_entry = {}
            system_entry["insights_id"] = row["insights_id"]
            system_entry["inventory_id"] = row["inventory_id"]
            system_entry["display_name"] = row["display_name"]
            system_entry["rule_id"] = row["rule_id"]
            affected_systems.append(system_entry)
        self.write(json.dumps(affected_systems))

    def get_details_by_insights_id(self, rule_id, insights_id):
        """Get the rule results details for the specified
           insights_id and rule_id"""
        query = (
            SysVulnRulesResults
            .select(SystemPlatform.insights_id,
                    SystemPlatform.inventory_id,
                    ProdsecRule.name.alias("rule_id"),
                    SysVulnRulesResults.details)
            .join(SystemVulnerabilities, on=(SysVulnRulesResults.sys_vuln_id == SystemVulnerabilities.id))
            .join(SystemPlatform, on=(SystemVulnerabilities.insights_id == SystemPlatform.insights_id))
            .join(ProdsecRule, on=(SysVulnRulesResults.prodsec_rule_id == ProdsecRule.id))
            .where(ProdsecRule.name == rule_id)
            .where(SystemPlatform.rh_account == self.rh_account_number)
            .where(SystemPlatform.insights_id == insights_id)
            .dicts()
        )
        if query:
            details = {}
            if 'details' in query[0]:
                details = json.loads(query[0]['details'])
            retval = {
                'insights_id': query[0]['insights_id'],
                'inventory_id': query[0]['inventory_id'],
                'rule_id': query[0]['rule_id'],
                'details': details,
                }
            self.write(json.dumps(retval))
        else:
            self.raiseError(404)

    def get_details_by_inventory_id(self, rule_id, inventory_id):
        """Get the rule results details for the specified
           inventory_id and rule_id"""
        query = (
            SysVulnRulesResults
            .select(SystemPlatform.insights_id,
                    SystemPlatform.inventory_id,
                    ProdsecRule.name.alias("rule_id"),
                    SysVulnRulesResults.details)
            .join(SystemVulnerabilities, on=(SysVulnRulesResults.sys_vuln_id == SystemVulnerabilities.id))
            .join(SystemPlatform, on=(SystemVulnerabilities.insights_id == SystemPlatform.insights_id))
            .join(ProdsecRule, on=(SysVulnRulesResults.prodsec_rule_id == ProdsecRule.id))
            .where(SystemPlatform.rh_account == self.rh_account_number)
            .where(SystemPlatform.inventory_id == inventory_id)
            .where(ProdsecRule.name == rule_id)
            .dicts()
        )
        if query:
            details = {}
            if 'details' in query[0]:
                details = json.loads(query[0]['details'])
            retval = {
                'insights_id': query[0]['insights_id'],
                'inventory_id': query[0]['inventory_id'],
                'rule_id': query[0]['rule_id'],
                'details': details,
                }
            self.write(json.dumps(retval))
        else:
            self.raiseError(404)
