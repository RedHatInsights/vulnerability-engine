"""
Filter functions modifying queries should go here
"""
from copy import copy
from enum import Enum

from peewee import fn

from common.constants import remediation
from common.peewee_model import CveAccountData, CveMetadata, CveRuleMapping, InsightsRule, SystemPlatform, SystemVulnerabilities, InventoryHosts


def _filter_cve_by_business_risk(query, args, _kwargs):
    """
    Filters list of CVEs based on their business risk. Query has to contain CveAccountData table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with business risk filter applied
    """
    if 'business_risk_id' in args and args['business_risk_id']:
        query = query.where(fn.COALESCE(CveAccountData.business_risk_id, 0) << args['business_risk_id'])
    return query


def _filter_cve_by_cvss(query, args, _kwargs):
    """
    Filters list of CVEs based on their CVSS score. Query has to contain CveMetadata table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with CVSS filter applied
    """
    # pylint: disable=too-many-boolean-expressions
    if 'cvss_from' in args and (args['cvss_from'] or args['cvss_from'] == 0) and 'cvss_to' in args and (
            args['cvss_to'] or args['cvss_to'] == 0):
        if args['cvss_from'] == -1:
            query = query.where((CveMetadata.cvss2_score.is_null() & CveMetadata.cvss3_score.is_null()) |
                                (fn.COALESCE(CveMetadata.cvss3_score, CveMetadata.cvss2_score) <= args['cvss_to']))
        else:
            query = query.where((fn.COALESCE(CveMetadata.cvss3_score, CveMetadata.cvss2_score) >= args['cvss_from']) &
                                (fn.COALESCE(CveMetadata.cvss3_score, CveMetadata.cvss2_score) <= args['cvss_to']))
    elif 'cvss_from' in args and (args['cvss_from'] or args['cvss_from'] == 0):
        query = query.where(fn.COALESCE(CveMetadata.cvss3_score, CveMetadata.cvss2_score) >= args['cvss_from'])
    elif 'cvss_to' in args and (args['cvss_to'] or args['cvss_to'] == 0):
        query = query.where(fn.COALESCE(CveMetadata.cvss3_score, CveMetadata.cvss2_score) <= args['cvss_to'])
    return query


def _filter_cve_by_impact(query, args, _kwargs):
    """
    Filters list of CVEs based on their impact. Query has to contain CveMetadata table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with CVE impact filter applied
    """
    if 'impact' in args and args['impact']:
        query = query.where(CveMetadata.impact_id << args['impact'])
    return query


def _filter_cve_by_public_date(query, args, _kwargs):
    """
    Filters list of CVEs based on their public date. Query has to contain CveMetadata table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with public date filter applied
    """
    if 'public_from' in args and args['public_from']:
        query = query.where(CveMetadata.public_date >= args['public_from'])
    if 'public_to' in args and args['public_to']:
        query = query.where(CveMetadata.public_date <= args['public_to'])
    return query


def _filter_cve_by_rule_presence(query, args, _kwargs):
    """
    Filters list of CVEs based on presence of rule. Query has to contain CveMetadata, CveRuleMapping and InsightsRule tables.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with CVE security rule presence filter applied
    """
    # pylint: disable=singleton-comparison
    if 'rule_presence' in args and args['rule_presence'] is not None:
        def bool_expr(presence_bool):
            if presence_bool:
                return (CveMetadata.id << CveRuleMapping.select(CveRuleMapping.cve_id)
                        .join(InsightsRule, on=((CveRuleMapping.rule_id == InsightsRule.id)
                                                & (InsightsRule.active == True))))  # noqa: E712

            return (CveMetadata.id.not_in(CveRuleMapping.select(CveRuleMapping.cve_id)
                                          .join(InsightsRule, on=((CveRuleMapping.rule_id == InsightsRule.id)
                                                                  & (InsightsRule.active == True)))))  # noqa: E712

        if True in args['rule_presence'] and False in args['rule_presence']:
            return query

        query = query.where(bool_expr(args['rule_presence'][0]))

    return query


def _filter_cve_by_affecting(query, args, kwargs):
    """
    Filters list of CVEs based on the fact whether CVE applies at least to one system or not. Query has to contain CveAccountData table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts
        kwargs (dict): subquery object

    Returns:
        object: Modified query with affecting filter applied
    """
    if 'affecting' in args and args['affecting'] is not None:
        count_subquery = kwargs["count_subquery"]

        def bool_expr(presence_bool):
            if presence_bool:
                return fn.COALESCE(count_subquery.c.systems_affected_, 0) != 0
            return fn.COALESCE(count_subquery.c.systems_affected_, 0) == 0

        if True in args['affecting'] and False in args['affecting']:
            return query

        query = query.where(bool_expr(args['affecting'][0]))

    return query


def _filter_cve_by_status(query, args, _kwargs):
    """
    Filters list of CVEs based on their global status. Query has to contain CveAccountData table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with CVE status filter applied
    """
    if 'status_id' in args and args['status_id']:
        query = query.where(fn.COALESCE(CveAccountData.status_id, 0) << args['status_id'])
    return query


def _filter_system_by_uuid(query, args, _kwargs):
    """
    Filters list of systems based on their UUID. Query has to contain SystemPlatform table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system UUID filter applied
    """
    if 'uuid' in args and args['uuid']:
        query = query.where(SystemPlatform.inventory_id == args['uuid'])
    return query


def _filter_system_by_excluded(query, args, _kwargs):
    """
    Filters list of systems based on their opt_out status. Query has to contain SystemPlatform table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system excluded filter applied
    """
    # pylint: disable=singleton-comparison
    if 'excluded' in args and args['excluded'] is not None:
        def bool_expr(presence_bool):
            if presence_bool:
                return SystemPlatform.opt_out == True
            return SystemPlatform.opt_out == False

        if True in args['excluded'] and False in args['excluded']:
            return query

        query = query.where(bool_expr(args['excluded'][0]))

    return query


def _filter_system_by_stale(query, args, _kwargs):
    """
    Filters list of systems based on stale status. Query has to contain SystemPlatform table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system stale filter applied
    """
    # pylint: disable=singleton-comparison
    if 'stale' in args and args['stale']:
        query = query.where(SystemPlatform.stale == args['stale'])
    else:
        query = query.where(SystemPlatform.stale == False)  # noqa: E712
    return query


def _filter_system_cve_by_rule_key(query, args, _kwargs):
    """
    Filters list of CVEs based on presence/name of security rule. Query has to contain left outer joined table.
    Filtering is done on match of the rule name.
    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system CVE rule name filter applied
    """
    # pylint: disable=singleton-comparison
    if 'rule_key' in args and args['rule_key'] is not None:
        query = query.where((InsightsRule.active == True) & (InsightsRule.name << args['rule_key']))  # noqa: E712
    return query


def _filter_system_cve_by_rule_presence(query, args, _kwargs):
    """
    Filters CVEs if they have rules or not. Argument can be either
    single bool, or list of bools.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts
    Returns:
        object: Modified query with system CVE rule name filter applied
    """
    # pylint: disable=singleton-comparison
    if 'rule_presence' in args and args['rule_presence'] is not None:
        def bool_expr(presence_bool):
            if presence_bool:
                return InsightsRule.active == True  # noqa: E712
            return (InsightsRule.active == False) | (InsightsRule.active == None)  # noqa: E712

        if True in args['rule_presence'] and False in args['rule_presence']:
            return query

        query = query.where(bool_expr(args['rule_presence'][0]))

    return query


def _filter_system_cve_by_status(query, args, _kwargs):
    """
    Filters list of system CVEs based on their individiual system-cve pair status. Query has to contain SystemVulnerabilities table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system CVE status filter applied
    """
    if 'status_id' in args and args['status_id']:
        query = query.where(SystemVulnerabilities.status_id << args['status_id'])
    return query


def _filter_system_by_tags(query, args, _kwargs):
    """
    Filters list of systems based on given tags.
    Query needs to be joined with cyndi inventory.hosts view!

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system CVE status filter applied
    """
    if 'tags' in args and args['tags']:
        for tag in args['tags']:
            query = query.where(InventoryHosts.tags.contains([tag]))
    return query


def _filter_cve_by_known_exploits(query, args, _kwargs):
    """
        Filters list of CVEs based on the fact whether CVE has known exploits or not.

        Args:
            query (object): Query object to apply filters to
            args (dict): Query arguments
            _kwargs (dict): subquery object

        Returns:
            object: Modified query with known exploits filter applied
    """
    # pylint: disable=singleton-comparison
    if 'known_exploit' in args and args['known_exploit'] is not None:
        def bool_expr(exploit_bool):
            if exploit_bool:
                return CveMetadata.exploits == True  # noqa: E712
            return CveMetadata.exploits == False  # noqa: E712

        if True in args['known_exploit'] and False in args['known_exploit']:
            return query

        query = query.where(bool_expr(args['known_exploit'][0]))

    return query


def _filter_system_by_sap(query, args, _kwargs):
    """
    Filters list of systems based if system is managed by SAP.
    This information is stored inside cyndi view.
    Query needs to be joined with cyndi inventory.hosts view!

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system CVE status filter applied
    """
    if 'sap_system' in args and args['sap_system'] is not None:
        expr = InventoryHosts.system_profile.contains({'sap_system': args['sap_system']})
        if not args['sap_system']:
            expr |= ~(InventoryHosts.system_profile.contains('sap_system'))
        query = query.where(expr)
    return query


def _filter_system_by_sap_sids(query, args, _kwargs):
    """[summary]
    Filters list of systems based on its SAP sids.
    This information is stored inside cyndi view.
    Query needs to be joined with cyndi inventory.hosts view!

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with SAP sids filter applied
    """
    if 'sap_sids' in args and args['sap_sids']:
        sap_sids = copy(args['sap_sids'])
        expr = InventoryHosts.system_profile.contains({'sap_sids': [sap_sids[0]]})
        sap_sids.pop(0)
        for sap_sid in sap_sids:
            expr |= InventoryHosts.system_profile.contains({'sap_sids': [sap_sid]})
        query = query.where(expr)
    return query


def _filter_cve_by_advisory(query, args, _kwargs):
    """
        Filters list of cves by cves which was filtered by advisory that was verified by PATCH

        Args:
            query (object): Query object to apply filters to
            args (dict): Query arguments
            _kwargs (dict): Dict with filtered cves

        Returns:
            object: Modified query with cve advisory filter applied
        """
    if 'show_advisories' in args and args['show_advisories'] and 'advisory' in args and args['advisory']:
        query = query.where(CveMetadata.cve.in_(list(_kwargs.get('cve_advisories', {}).keys())))
    return query


def _filter_system_by_advisory(query, args, _kwargs):
    """
    Filters list of systems by systems which was filtered by advisory that was verified by PATCH

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguments
        _kwargs (dict): Dict with filtered systems

    Returns:
        object: Modified query with system advisory filter applied
    """
    if 'show_advisories' in args and args['show_advisories'] and 'advisory' in args and args['advisory']:
        query = query.where(SystemPlatform.inventory_id.in_(list(_kwargs.get('system_advisories', {}).keys())))
    return query


def _filter_system_by_rhel_version(query, args, _kwargs):
    """
    Filters list of systems by their RHEL version
    """
    if 'rhel_version' in args and args['rhel_version']:
        expr = None
        for version in args['rhel_version']:
            if '.' in version:
                major, minor = version.split('.', 1)
                expr = expr | \
                    ((InventoryHosts.system_profile['operating_system']['major'] == major) &
                     (InventoryHosts.system_profile['operating_system']['minor'] == minor))
            else:
                expr = expr | (InventoryHosts.system_profile['operating_system']['major'] == version)
        query = query.where((InventoryHosts.system_profile['operating_system']['name'] == 'RHEL') & (expr))
    return query


def _filter_system_cve_first_reported(query, args, _kwargs):
    """
    Filters system-cve pairs based on datetime of first report of vulnerability

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguments
        _kwargs (dict): Dict with filtered systems

    Returns:
        object: Modified query with system advisory filter applied
    """
    if 'first_reported_from' in args and args['first_reported_from']:
        query = query.where(SystemVulnerabilities.first_reported >= args['first_reported_from'])
    if 'first_reported_to' in args and args['first_reported_to']:
        query = query.where(SystemVulnerabilities.first_reported <= args['first_reported_to'])
    return query


def _filter_system_cve_by_rule(query, args, _kwargs):
    """
    Filters systems by rule key or filters systems without rule key.
    If filter value is ["-1"], filters systems without rule key.
    Everything else is taken as a list with rule keys.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguments
        _kwargs (dict): Dict with filtered systems

    Returns:
        object: Modified query with system cve rule filter applied
    """
    # pylint: disable=singleton-comparison
    if 'rule' in args and args['rule']:
        def eval_expr(value):
            if value.lower() == 'false':
                return (InsightsRule.active == False) | (InsightsRule.active == None)  # noqa: E712
            return (InsightsRule.active == True) & (InsightsRule.name == value)  # noqa: E712
        expr = None
        for value in args['rule']:
            expr |= eval_expr(value)
        if expr:
            query = query.where(expr)
    return query


def _filter_system_cve_by_advisory_available(query, args, _kwargs):
    """
    Filters list of system CVEs based on their advisory availability. Query has to contain SystemVulnerabilities table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system CVE advisory availability filter applied
    """
    # pylint: disable=singleton-comparison
    if 'advisory_available' in args and args['advisory_available'] is not None:
        def bool_expr(filter_bool):
            if filter_bool:
                return SystemVulnerabilities.advisory_available == True  # noqa: E712
            return SystemVulnerabilities.advisory_available == False  # noqa: E712

        if True in args['advisory_available'] and False in args['advisory_available']:
            return query

        query = query.where(bool_expr(args['advisory_available'][0]))

    return query


def _filter_system_cve_by_remediation(query, args, _kwargs):
    """
    Filters list of CVEs based on their remediation. Query has to contain SystemVulnerabilities table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system CVE remediation filter applied
    """
    if 'remediation' in args and args['remediation']:
        query = query.where(fn.COALESCE(SystemVulnerabilities.remediation_type_id, remediation.PLAYBOOK.value) << args['remediation'])
    return query


def _filter_system_by_ansible(query, args, _kwargs):
    """
    Filters list of systems based if system is managed by Ansible Automation Platform.
    This information is stored inside cyndi view.
    Query needs to be joined with cyndi inventory.hosts view!

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with AAP filter applied
    """
    if 'ansible' in args and args['ansible'] is not None:
        if args['ansible']:
            expr = InventoryHosts.system_profile.contains('ansible')
        else:
            expr = ~(InventoryHosts.system_profile.contains('ansible'))
        query = query.where(expr)
    return query


def _filter_system_by_mssql(query, args, _kwargs):
    """
    Filters list of systems based if system is managed by MSSQL.
    This information is stored inside cyndi view.
    Query needs to be joined with cyndi inventory.hosts view!

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with MSSQL filter applied
    """
    if 'mssql' in args and args['mssql'] is not None:
        if args['mssql']:
            expr = InventoryHosts.system_profile.contains('mssql')
        else:
            expr = ~(InventoryHosts.system_profile.contains('mssql'))
        query = query.where(expr)
    return query


class filter_types(Enum):  # pylint: disable=invalid-name
    """definition of filter types"""

    CVE_KNOWN_EXPLOITS = _filter_cve_by_known_exploits
    CVE_BUSINESS_RISK = _filter_cve_by_business_risk
    CVE_CVSS = _filter_cve_by_cvss
    CVE_PUBLIC_DATE = _filter_cve_by_public_date
    CVE_IMPACT = _filter_cve_by_impact
    CVE_RULE_PRESENCE = _filter_cve_by_rule_presence
    CVE_AFFECTING = _filter_cve_by_affecting
    CVE_STATUS = _filter_cve_by_status
    SYSTEM_CVE_RULE_KEY = _filter_system_cve_by_rule_key
    SYSTEM_CVE_RULE_PRESENCE = _filter_system_cve_by_rule_presence
    SYSTEM_CVE_RULE = _filter_system_cve_by_rule
    SYSTEM_CVE_STATUS = _filter_system_cve_by_status
    SYSTEM_EXCLUDED = _filter_system_by_excluded
    SYSTEM_STALE = _filter_system_by_stale
    SYSTEM_UUID = _filter_system_by_uuid
    SYSTEM_TAGS = _filter_system_by_tags
    SYSTEM_SAP = _filter_system_by_sap
    SYSTEM_SAP_SIDS = _filter_system_by_sap_sids
    CVE_BY_ADVISORY = _filter_cve_by_advisory
    SYSTEM_BY_ADVISORY = _filter_system_by_advisory
    SYSTEM_RHEL_VERSION = _filter_system_by_rhel_version
    SYSTEM_CVE_FIRST_REPORTED = _filter_system_cve_first_reported
    SYSTEM_CVE_ADVISORY_AVAILABLE = _filter_system_cve_by_advisory_available
    SYSTEM_CVE_REMEDIATION = _filter_system_cve_by_remediation
    SYSTEM_AAP = _filter_system_by_ansible
    SYSTEM_MSSQL = _filter_system_by_mssql


def apply_filters(query, args, filters, kwargs):
    """
    Apply all filters on query object

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts
        filters ([filter_types]): List of filter_types objects
        kwargs (dict): Support arguments passed from code, e.g. subquery object

    Returns:
        object: Modified query with all filters applied
    """
    filters_set = set(filters)
    for query_filter in filters_set:
        query = query_filter(query, args, kwargs)
    return query
