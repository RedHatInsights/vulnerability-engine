"""
Filter functions modifying queries should go here
"""
from enum import Enum

from peewee import fn

from common.peewee_model import CveAccountData, CveMetadata, CveRuleMapping, InsightsRule, SystemPlatform, SystemVulnerabilities


def _filter_cve_by_business_risk(query, args):
    """
    Filters list of CVEs based on their business risk. Query has to contain CveAccountData table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with business risk filter applied
    """
    if 'business_risk_id' in args and args['business_risk_id']:
        query = query.where(fn.COALESCE(CveAccountData.business_risk_id, 0) << args['business_risk_id'])
    return query


def _filter_cve_by_cvss(query, args):
    """
    Filters list of CVEs based on their CVSS score. Query has to contain CveMetadata table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with CVSS filter applied
    """
    if 'cvss_from' in args and args['cvss_from'] and 'cvss_to' in args and args['cvss_to']:
        if args['cvss_from'] == -1:
            query = query.where((CveMetadata.cvss2_score.is_null() & CveMetadata.cvss3_score.is_null()) |
                                (fn.COALESCE(CveMetadata.cvss3_score, CveMetadata.cvss2_score) <= args['cvss_to']))
        else:
            query = query.where((fn.COALESCE(CveMetadata.cvss3_score, CveMetadata.cvss2_score) >= args['cvss_from']) &
                                (fn.COALESCE(CveMetadata.cvss3_score, CveMetadata.cvss2_score) <= args['cvss_to']))
    elif 'cvss_from' in args and args['cvss_from']:
        query = query.where(fn.COALESCE(CveMetadata.cvss3_score, CveMetadata.cvss2_score) >= args['cvss_from'])
    elif 'cvss_to' in args and args['cvss_to']:
        query = query.where(fn.COALESCE(CveMetadata.cvss3_score, CveMetadata.cvss2_score) <= args['cvss_to'])
    return query


def _filter_cve_by_impact(query, args):
    """
    Filters list of CVEs based on their impact. Query has to contain CveMetadata table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with CVE impact filter applied
    """
    if 'impact' in args and args['impact']:
        query = query.where(CveMetadata.impact_id << args['impact'])
    return query


def _filter_cve_by_public_date(query, args):
    """
    Filters list of CVEs based on their public date. Query has to contain CveMetadata table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with public date filter applied
    """
    if 'public_from' in args and args['public_from']:
        query = query.where(CveMetadata.public_date >= args['public_from'])
    if 'public_to' in args and args['public_to']:
        query = query.where(CveMetadata.public_date <= args['public_to'])
    return query


def _filter_cve_by_rule_presence(query, args):
    """
    Filters list of CVEs based on presence of rule. Query has to contain CveMetadata, CveRuleMapping and InsightsRule tables.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with CVE security rule presence filter applied
    """
    # pylint: disable=singleton-comparison
    if 'security_rule' in args and args['security_rule'] is not None:
        if args['security_rule']:
            query = query.where(CveMetadata.id << CveRuleMapping.select(CveRuleMapping.cve_id)
                                .join(InsightsRule, on=((CveRuleMapping.rule_id == InsightsRule.id) & (InsightsRule.active == True))))  # noqa: E712
        else:
            query = query.where(CveMetadata.id.not_in(CveRuleMapping.select(CveRuleMapping.cve_id)
                                                      .join(InsightsRule, on=((CveRuleMapping.rule_id == InsightsRule.id)
                                                                              & (InsightsRule.active == True)))))  # noqa: E712
    return query


def _filter_cve_by_show_all(query, args):
    """
    Filters list of CVEs based on the fact whether CVE applies at least to one system or not. Query has to contain CveAccountData table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with show all filter applied
    """
    if 'show_all' not in args or not args['show_all']:
        query = query.where(CveAccountData.systems_affected > 0)
    return query


def _filter_cve_by_status(query, args):
    """
    Filters list of CVEs based on their global status. Query has to contain CveAccountData table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with CVE status filter applied
    """
    if 'status_id' in args and args['status_id']:
        query = query.where(fn.COALESCE(CveAccountData.status_id, 0) << args['status_id'])
    return query


def _filter_system_by_uuid(query, args):
    """
    Filters list of systems based on their UUID. Query has to contain SystemPlatform table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system UUID filter applied
    """
    if 'uuid' in args and args['uuid']:
        query = query.where(SystemPlatform.inventory_id == args['uuid'])
    return query


def _filter_system_by_opt_out(query, args):
    """
    Filters list of systems based on their opt out status. Query has to contain SystemPlatform table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system opt out filter applied
    """
    # pylint: disable=singleton-comparison
    if 'opt_out' in args and args['opt_out']:
        query = query.where(SystemPlatform.opt_out == args['opt_out'])
    else:
        query = query.where(SystemPlatform.opt_out == False)  # noqa: E712
    return query


def _filter_system_by_stale(query, args):
    """
    Filters list of systems based on stale status. Query has to contain SystemPlatform table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system stale filter applied
    """
    # pylint: disable=singleton-comparison
    if 'stale' in args and args['stale']:
        query = query.where(SystemPlatform.stale == args['stale'])
    else:
        query = query.where(SystemPlatform.stale == False)  # noqa: E712
    return query


def _filter_system_cve_by_rule(query, args):
    """
    Filters list of CVEs based on presence/name of security rule. Query has to contain left outer joined table.
    If boolean is passed in the `args['security_rule']` filtering is done based on presence of the rule.
    In case of string passed in the `args['security_rule']` filtering is done on match of the rule name.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system CVE rule name filter applied
    """
    # pylint: disable=singleton-comparison
    if 'security_rule' in args and args['security_rule'] is not None:
        if isinstance(args['security_rule'], bool):
            if args['security_rule']:
                query = query.where(InsightsRule.active == True)  # noqa: E712
            else:
                query = query.where((InsightsRule.active == False) | (InsightsRule.active == None))  # noqa: E712
        else:
            query = query.where((InsightsRule.active == True) & (InsightsRule.name << args['security_rule']))  # noqa: E712
    return query


def _filter_system_cve_by_status(query, args):
    """
    Filters list of system CVEs based on their individiual system-cve pair status. Query has to contain SystemVulnerabilities table.

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts

    Returns:
        object: Modified query with system CVE status filter applied
    """
    if 'status_id' in args and args['status_id']:
        query = query.where(SystemVulnerabilities.status_id << args['status_id'])
    return query


class filter_types(Enum):  # pylint: disable=invalid-name
    """definition of filter types"""

    CVE_BUSINESS_RISK = _filter_cve_by_business_risk
    CVE_CVSS = _filter_cve_by_cvss
    CVE_PUBLIC_DATE = _filter_cve_by_public_date
    CVE_IMPACT = _filter_cve_by_impact
    CVE_RULE_PRESENCE = _filter_cve_by_rule_presence
    CVE_SHOW_ALL = _filter_cve_by_show_all
    CVE_STATUS = _filter_cve_by_status
    SYSTEM_CVE_RULE = _filter_system_cve_by_rule
    SYSTEM_CVE_STATUS = _filter_system_cve_by_status
    SYSTEM_OPT_OUT = _filter_system_by_opt_out
    SYSTEM_STALE = _filter_system_by_stale
    SYSTEM_UUID = _filter_system_by_uuid


def apply_filters(query, args, filters):
    """
    Apply all filters on query object

    Args:
        query (object): Query object to apply filters to
        args (dict): Query arguemnts
        filters ([filter_types]): List of filter_types objects

    Returns:
        object: Modified query with all filters applied
    """
    filters_set = set(filters)
    for query_filter in filters_set:
        query = query_filter(query, args)
    return query
