"""
Module for /systems API endpoint
"""

import json
from distutils.util import strtobool  # pylint: disable=import-error, no-name-in-module
import dateutil.parser

from peewee import Case, DoesNotExist

from common.peewee_model import CveMetadata, SystemPlatform, SystemVulnerabilities, CveImpact, Status
from .base import AuthenticatedHandler, parse_url, parse_int_list
from .list_view import ListView


class SystemCvesView(ListView):
    """Database select for /systems endpoint"""
    def __init__(self, list_args, query_args, filter_args, parsed_args, uri):
        query = (
            SystemVulnerabilities
            .select(CveMetadata.cve.alias('cve_name'),
                    CveMetadata.cvss3_score,
                    CveMetadata.cvss2_score,
                    CveImpact.name.alias('impact'),
                    CveMetadata.public_date,
                    CveMetadata.description.alias('cve_description'),
                    Status.id.alias('status_id'),
                    Status.name.alias('status_name'))
            .join(SystemPlatform, on=(SystemVulnerabilities.inventory_id == SystemPlatform.inventory_id))
            .join(CveMetadata, on=(SystemVulnerabilities.cve == CveMetadata.cve))
            .join(CveImpact, on=(CveMetadata.impact_id == CveImpact.id))
            .join(Status, on=(SystemVulnerabilities.status_id == Status.id))
            .where(SystemVulnerabilities.when_mitigated.is_null(True))
            .where(SystemPlatform.rh_account == query_args['rh_account_number'])
            .where(SystemPlatform.inventory_id == query_args['inventory_id'])
        )
        if 'cvss_from' in filter_args and filter_args['cvss_from']:
            query = query.where(CveMetadata.cvss3_score >= filter_args['cvss_from'])
        if 'cvss_to' in filter_args and filter_args['cvss_to']:
            query = query.where(CveMetadata.cvss3_score <= filter_args['cvss_to'])
        if 'public_from' in filter_args and filter_args['public_from']:
            query = query.where(CveMetadata.public_date >= filter_args['public_from'])
        if 'public_to' in filter_args and filter_args['public_to']:
            query = query.where(CveMetadata.public_date <= filter_args['public_to'])
        if 'status_id' in filter_args and filter_args['status_id']:
            query = query.where(Status.id << filter_args['status_id'])
        query = query.dicts()
        sortable_columns = {
            'cve' : SystemVulnerabilities.cve,
            'synopsis' : SystemVulnerabilities.cve,
            'public_date' : CveMetadata.public_date,
            # This assumes we only show one score, and that cvss3 wins over cvss2
            'cvss_score' : Case(None, ((CveMetadata.cvss3_score.is_null(True), CveMetadata.cvss2_score),), \
                               CveMetadata.cvss3_score),
            "cvss3_score" : CveMetadata.cvss3_score,
            "cvss2_score" : CveMetadata.cvss2_score,
            'impact' : CveMetadata.impact_id,
            'status' : Status.id
        }
        filterable_columns = {
            'cve' : SystemVulnerabilities.cve,
            'description' : CveMetadata.description,
            'status' : Status.name
        }
        super(SystemCvesView, self).__init__(query, sortable_columns, filterable_columns, list_args, parsed_args, uri)

class SystemView(ListView):
    """Database select for all systems and count of their vulnerabilities"""
    def __init__(self, list_args, query_args, filter_args, parsed_args, uri):
        query = (
            SystemPlatform
            .select(SystemPlatform.inventory_id,
                    SystemPlatform.satellite_managed,
                    SystemPlatform.last_evaluation,
                    SystemPlatform.opt_out,
                    SystemPlatform.cve_count_cache.alias("cve_count"))
            .where(SystemPlatform.rh_account == query_args['rh_account_number'])
            .where(SystemPlatform.last_evaluation.is_null(False))
            .dicts()
        )
        if query_args['hide_satellite_managed']:
            query = query.where(SystemPlatform.satellite_managed == False)  # pylint: disable=singleton-comparison
        if 'opt_out' in filter_args and filter_args['opt_out']:
            query = query.where(SystemPlatform.opt_out == filter_args['opt_out'])
        else:
            query = query.where(SystemPlatform.opt_out == False)  # pylint: disable=singleton-comparison
        sortable_columns = {
            'cve_count' : SystemPlatform.cve_count_cache,
            'inventory_id' : SystemPlatform.inventory_id,
            'last_evaluation': SystemPlatform.last_evaluation
        }
        filterable_columns = {
            'inventory_id' : SystemPlatform.inventory_id
        }
        super(SystemView, self).__init__(query, sortable_columns, filterable_columns, list_args, parsed_args, uri)

class SystemHandler(AuthenticatedHandler):
    """Handler for /systems endpoint"""

    base_route = "/v1.0/systems"

    def get(self): # pylint: disable=arguments-differ, useless-super-delegation
        """Get CVEs for a system
           ---
           description: Get CVEs for a system
           responses:
             200:
               description: JSON containing CVEs for a systems is returuned
        """
        super(SystemHandler, self).get()

    def handle_get(self):
        route = parse_url(self.request.uri, self.base_route)
        if len(route) == 1 and route[0] == '':
            self.get_systems()
        elif len(route) == 2 and route[1] == 'cves':
            self.get_cves(route[0])
        else:
            self.raiseError(404)
        self.flush()

    def handle_post(self): # pylint: disable=arguments-differ
        """We don't respond to POST requests"""
        self.flush()

    def get_cves(self, inventory_id):
        """Gets affected CVEs for a system"""
        args_desc = [{'arg_name' : 'cvss_from', 'convert_func' : float},
                     {'arg_name' : 'cvss_to', 'convert_func' : float},
                     {'arg_name' : 'public_from', 'convert_func' : dateutil.parser.parse},
                     {'arg_name' : 'public_to', 'convert_func' : dateutil.parser.parse},
                     {'arg_name' : 'status_id', 'convert_func' : parse_int_list}]
        args = self._parse_arguments(args_desc)
        list_arguments = self._parse_list_arguments()

        # check if system was evaluated
        try:
            system = (SystemPlatform.select(SystemPlatform.last_evaluation, SystemPlatform.opt_out)
                      .where(SystemPlatform.inventory_id == inventory_id)
                      .where(SystemPlatform.rh_account == self.rh_account_number)
                      .get())
        except DoesNotExist:
            self.raiseError(404, 'inventory_id must exist and inventory_id must be visible to user', True)
        if system.satellite_managed and self.hide_satellite_managed:
            self.raiseError(404, 'inventory_id must exist and inventory_id must be visible to user', True)
        if system.opt_out:
            self.raiseError(404, 'inventory_id exists but is opted out', True)
        if system.last_evaluation is None:
            self.raiseError(404, 'inventory_id exists but is not evaluated', True)

        cves_view = SystemCvesView(list_arguments, {"rh_account_number": self.rh_account_number,
                                                    'inventory_id' : inventory_id}, args, args, self.request.uri)
        response = {}
        result = []
        for cve in cves_view:
            record = {}
            record['synopsis'] = cve['cve_name']
            record['public_date'] = cve['public_date'].isoformat() if cve['public_date'] else ''
            record['impact'] = cve['impact']
            record['description'] = cve['cve_description']
            # Store everything we know about CVSS - maybe UI needs to decide what to show
            record['cvss2_score'] = str(cve['cvss2_score']) if cve['cvss2_score'] is not None else ''
            record['cvss3_score'] = str(cve['cvss3_score']) if cve['cvss3_score'] is not None else ''
            # Store status information
            record['status_id'] = cve['status_id']
            record['status'] = cve['status_name']

            result.append({'type' : 'cve', 'id' : cve['cve_name'], 'attributes' : record})
        response['meta'] = cves_view.get_metadata()
        response['links'] = cves_view.get_pagination_links()
        response['data'] = self._format_data(list_arguments["data_format"], result)
        self.write(json.dumps(response))

    def get_systems(self):
        """Gets all systems and count of their vulnerabilities"""
        args_desc = [{'arg_name' : 'opt_out', 'convert_func' : strtobool}]
        args = self._parse_arguments(args_desc)
        list_arguments = self._parse_list_arguments()
        system_view = SystemView(list_arguments, {"rh_account_number": self.rh_account_number,
                                                  'hide_satellite_managed': self.hide_satellite_managed},
                                 args, args, self.request.uri)
        data = []
        for system in system_view:
            record = {}
            system['last_evaluation'] = system['last_evaluation'].isoformat() if system['last_evaluation'] else ''
            record['attributes'] = system
            record['id'] = system['inventory_id']
            record['type'] = 'system'
            data.append(record)
        response = {}
        response['data'] = self._format_data(list_arguments["data_format"], data)
        response['meta'] = system_view.get_metadata()
        response['meta']['opt_out'] = bool(args['opt_out']) if args['opt_out'] is not None else ''
        response['links'] = system_view.get_pagination_links()
        self.write(json.dumps(response))

    def patch(self):  # pylint: disable=arguments-differ, useless-super-delegation
        """Set opt_out flag for a system
           ---
           description: Set opt_out flag for a system
           responses:
             200:
               description: Opt_out flag successfully updated
             404:
               description: System not found
        """
        super(SystemHandler, self).patch()

    def handle_patch(self):
        route = parse_url(self.request.uri, self.base_route)
        if len(route) == 2 and route[1] == 'opt_out':
            self.update_opt_out(route[0])
        else:
            self.raiseError(404)

    def update_opt_out(self, inventory_id):
        """Logic of the opt out feature"""
        value = self._parse_arguments([{'arg_name': 'value', 'convert_func': strtobool}])['value']
        if value is None:
            self.raiseError(400, 'value is a required parameter', True)
        update = (SystemPlatform.update(opt_out=value)
                  .where((SystemPlatform.rh_account == self.rh_account_number) &
                         (SystemPlatform.inventory_id == inventory_id)))
        rows_affected = update.execute()
        if rows_affected == 0:
            self.raiseError(404, 'inventory_id must exist and inventory_id must be visible to user')
            self.flush()


class SystemHandlerV1(SystemHandler):
    """Handler for /systems endpoint"""

    base_route = "/v1/systems"
