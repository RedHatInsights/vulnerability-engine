"""
Module for /systems API endpoint
"""

import dateutil.parser

import connexion
from peewee import Case, DoesNotExist, fn, JOIN, SQL

from common.peewee_model import BusinessRisk, CveAccountData, CveMetadata, SystemPlatform, \
    SystemVulnerabilities, CveImpact, Status, DB, RHAccount, InsightsRule, InventoryHosts
from .base import ApplicationException, DEFAULT_BUSINESS_RISK, GetRequest, parse_int_list, PatchRequest, \
    DeleteRequest, CVE_SYNOPSIS_SORT, parse_str_or_list, reporter, unique_bool_list, CYNDI_ENABLED
from .filters import apply_filters, filter_types
from .list_view import ListView


class SystemCvesView(ListView):
    """Database select for /systems endpoint"""

    def __init__(self, list_args, query_args, filter_args, parsed_args, uri, ids_only=False):
        query = self._full_query(query_args) if not ids_only else self._id_query(query_args)
        query = apply_filters(query, filter_args, [filter_types.CVE_BUSINESS_RISK, filter_types.CVE_CVSS, filter_types.CVE_IMPACT,
                                                   filter_types.CVE_PUBLIC_DATE, filter_types.SYSTEM_CVE_STATUS, filter_types.SYSTEM_CVE_RULE_PRESENCE,
                                                   filter_types.SYSTEM_CVE_RULE_OLD])
        query = query.dicts()

        sortable_columns = {
            'id': CveMetadata.id,
            'cve': CVE_SYNOPSIS_SORT,
            'synopsis': CVE_SYNOPSIS_SORT,
            'public_date': CveMetadata.public_date,
            # This assumes we only show one score, and that cvss3 wins over cvss2
            'cvss_score': Case(None, ((CveMetadata.cvss3_score.is_null(True), CveMetadata.cvss2_score),), \
                               CveMetadata.cvss3_score),
            "cvss3_score": CveMetadata.cvss3_score,
            "cvss2_score": CveMetadata.cvss2_score,
            'impact_id': CveMetadata.impact_id,
            'impact': CveMetadata.impact_id,
            'status_id': Status.id,
            'status': Status.id,
            'business_risk_id': SQL('business_risk_id'),
            'business_risk': SQL('business_risk_id'),
        }
        default_sort_columns = ['id']
        filterable_columns = {
            'cve': CveMetadata.cve,
            'description': CveMetadata.description,
            'status': Status.name
        }
        super(SystemCvesView, self).__init__(query, sortable_columns, default_sort_columns,
                                             filterable_columns, list_args, parsed_args, uri)

    @staticmethod
    def _full_query(query_args):
        # pylint: disable=singleton-comparison
        return (
            SystemVulnerabilities
            .select(CveMetadata.cve.alias('cve_name'),
                    CveMetadata.cvss3_score,
                    CveMetadata.cvss2_score,
                    CveImpact.name.alias('impact'),
                    CveMetadata.public_date,
                    CveMetadata.description.alias('cve_description'),
                    fn.COALESCE(CveAccountData.status_id, 0).alias('cve_status_id'),
                    Status.id.alias('status_id'),
                    Status.name.alias('status_name'),
                    SystemVulnerabilities.status_text.alias('status_text'),
                    SystemVulnerabilities.when_mitigated,
                    CveAccountData.status_text.alias('cve_status_text'),
                    fn.COALESCE(CveAccountData.business_risk_id, 0).alias('business_risk_id'),
                    CveAccountData.business_risk_text.alias('business_risk_text'),
                    fn.COALESCE(BusinessRisk.name, DEFAULT_BUSINESS_RISK).alias('business_risk'),
                    InsightsRule.name.alias('rule_id'),
                    InsightsRule.description_text,
                    InsightsRule.summary_text,
                    InsightsRule.generic_text,
                    InsightsRule.reboot_required,
                    InsightsRule.playbook_count,
                    InsightsRule.change_risk,
                    InsightsRule.kbase_node_id,
                    InsightsRule.active.alias('rule_active'))
            .join(SystemPlatform, on=(SystemVulnerabilities.system_id == SystemPlatform.id))
            .join(CveMetadata, on=(SystemVulnerabilities.cve_id == CveMetadata.id))
            .join(CveImpact, on=(CveMetadata.impact_id == CveImpact.id))
            .join(Status, on=(SystemVulnerabilities.status_id == Status.id))
            .join(RHAccount, on=(SystemPlatform.rh_account_id == RHAccount.id))
            .join(CveAccountData, JOIN.LEFT_OUTER, on=((CveAccountData.cve_id == CveMetadata.id)
                                                       & (CveAccountData.rh_account_id == RHAccount.id)))
            .join(BusinessRisk, JOIN.LEFT_OUTER, on=(CveAccountData.business_risk_id == BusinessRisk.id))
            .join(InsightsRule, JOIN.LEFT_OUTER, on=(InsightsRule.id == SystemVulnerabilities.rule_id))
            .where((SystemVulnerabilities.mitigation_reason.is_null(True)) | (InsightsRule.active == False))
            .where((SystemVulnerabilities.when_mitigated.is_null(True)) | (InsightsRule.active == True))
            .where(RHAccount.name == query_args['rh_account_number'])
            .where(SystemPlatform.inventory_id == query_args['inventory_id'])
            .where(SystemPlatform.opt_out == False)  # noqa: E712
            .where(SystemPlatform.when_deleted.is_null(True))
        )

    @staticmethod
    def _id_query(query_args):
        # pylint: disable=singleton-comparison
        return (
            SystemVulnerabilities
            .select(CveMetadata.cve.alias('cve_name'),)
            .join(SystemPlatform, on=(SystemVulnerabilities.system_id == SystemPlatform.id))
            .join(CveMetadata, on=(SystemVulnerabilities.cve_id == CveMetadata.id))
            .join(Status, on=(SystemVulnerabilities.status_id == Status.id))
            .join(RHAccount, on=(SystemPlatform.rh_account_id == RHAccount.id))
            .join(CveAccountData, JOIN.LEFT_OUTER, on=((CveAccountData.cve_id == CveMetadata.id)
                                                       & (CveAccountData.rh_account_id == RHAccount.id)))
            .join(InsightsRule, JOIN.LEFT_OUTER, on=(InsightsRule.id == SystemVulnerabilities.rule_id))
            .where((SystemVulnerabilities.mitigation_reason.is_null(True)) | (InsightsRule.active == False))
            .where((SystemVulnerabilities.when_mitigated.is_null(True)) | (InsightsRule.active == True))
            .where(RHAccount.name == query_args['rh_account_number'])
            .where(SystemPlatform.inventory_id == query_args['inventory_id'])
            .where(SystemPlatform.opt_out == False)  # noqa: E712
            .where(SystemPlatform.when_deleted.is_null(True))
        )


class SystemView(ListView):
    """Database select for all systems and count of their vulnerabilities"""

    def __init__(self, list_args, query_args, filter_args, parsed_args, uri, ids_only=True):
        query = self._full_query(query_args) if not ids_only else self._id_query(query_args)
        query = self._cyndi_query(query)
        query = apply_filters(query, filter_args, [filter_types.SYSTEM_OPT_OUT, filter_types.SYSTEM_STALE, filter_types.SYSTEM_UUID])

        sortable_columns = {
            'id': SystemPlatform.id,
            'cve_count': SystemPlatform.cve_count_cache,
            'inventory_id': SystemPlatform.inventory_id,
            'last_evaluation': SystemPlatform.last_evaluation,
            'last_upload': SystemPlatform.last_upload,
            'display_name': SystemPlatform.display_name,
            'rules_evaluation': SystemPlatform.advisor_evaluated
        }
        default_sort_columns = ['-last_upload', 'id']
        filterable_columns = {
            'display_name': SystemPlatform.display_name
        }
        super(SystemView, self).__init__(query, sortable_columns, default_sort_columns,
                                         filterable_columns, list_args, parsed_args, uri)

    @staticmethod
    def _full_query(query_args):
        selectables = [SystemPlatform.inventory_id,
                       SystemPlatform.display_name,
                       SystemPlatform.last_evaluation,
                       SystemPlatform.advisor_evaluated.alias('rules_evaluation'),
                       SystemPlatform.opt_out,
                       SystemPlatform.cve_count_cache.alias("cve_count"),
                       SystemPlatform.last_upload,
                       SystemPlatform.stale_timestamp,
                       SystemPlatform.stale_warning_timestamp]
        if CYNDI_ENABLED:
            selectables.append(InventoryHosts.tags)

        return (
            SystemPlatform
            .select(*selectables)
            .join(RHAccount, on=(RHAccount.id == SystemPlatform.rh_account_id))
            .where(RHAccount.name == query_args['rh_account_number'])
            .where(SystemPlatform.last_evaluation.is_null(False) | SystemPlatform.advisor_evaluated.is_null(False))
            .where(SystemPlatform.when_deleted.is_null(True))
            .dicts()
        )

    @staticmethod
    def _id_query(query_args):
        return (
            SystemPlatform
            .select(SystemPlatform.inventory_id,)
            .join(RHAccount, on=(RHAccount.id == SystemPlatform.rh_account_id))
            .where(RHAccount.name == query_args['rh_account_number'])
            .where(SystemPlatform.last_evaluation.is_null(False) | SystemPlatform.advisor_evaluated.is_null(False))
            .where(SystemPlatform.when_deleted.is_null(True))
            .dicts()
        )

    @staticmethod
    def _cyndi_query(query):
        if CYNDI_ENABLED:
            query = query.join(InventoryHosts, JOIN.LEFT_OUTER, on=(SystemPlatform.inventory_id == InventoryHosts.id.cast("TEXT")))
        return query


class GetSystems(GetRequest):
    """GET to /v1/systems"""

    _endpoint_name = r'/v1/systems'
    _ids_only = False

    @classmethod
    def handle_get(cls, **kwargs):
        """Gets all systems and count of their vulnerabilities"""
        args_desc = [
            {'arg_name': 'opt_out', 'convert_func': None},
            {'arg_name': 'stale', 'convert_func': None},
            {'arg_name': 'uuid', 'convert_func': None}
        ]
        args = cls._parse_arguments(kwargs, args_desc)
        list_arguments = cls._parse_list_arguments(kwargs)
        system_view = SystemView(list_arguments, {"rh_account_number": connexion.context['user']},
                                 args, args, connexion.request.path, cls._ids_only)
        data = []
        if not cls._ids_only:
            for system in system_view:
                record = {}
                system['last_evaluation'] = system['last_evaluation'].isoformat() if system['last_evaluation'] else None
                system['rules_evaluation'] = system['rules_evaluation'].isoformat() if system['rules_evaluation'] else None
                system['last_upload'] = system['last_upload'].isoformat() if system['last_upload'] else None
                system['stale_timestamp'] = system['stale_timestamp'].isoformat() if system['stale_timestamp'] else None
                system['stale_warning_timestamp'] = system['stale_warning_timestamp'].isoformat() if system['stale_warning_timestamp'] else None
                system['tags'] = system['tags'] if CYNDI_ENABLED and system['tags'] is not None else []
                record['attributes'] = system
                if system['opt_out']:
                    record['attributes']['cve_count'] = None
                record['id'] = system['inventory_id']
                record['type'] = 'system'
                data.append(record)
        else:
            for system in system_view:
                data.append(system['inventory_id'])
        response = {}
        response['data'] = cls._format_data(list_arguments["data_format"], data)
        response['meta'] = system_view.get_metadata()
        response['links'] = system_view.get_pagination_links()
        return response


class GetSystemsIds(GetSystems):
    """GET to /v1/systems/ids"""

    _endpoint_name = r'/v1/systems/ids'
    _ids_only = True


class GetSystemsCves(GetRequest):
    """GET to /v1/systems/{inventory_id}/cves"""

    _endpoint_name = r'/v1/systems/{inventory_id}/cves'
    _ids_only = False

    @classmethod
    def handle_get(cls, **kwargs):
        """Gets affected CVEs for a system"""
        inventory_id = kwargs['inventory_id']
        args_desc = [{'arg_name': 'cvss_from', 'convert_func': None},
                     {'arg_name': 'cvss_to', 'convert_func': None},
                     {'arg_name': 'public_from', 'convert_func': dateutil.parser.parse},
                     {'arg_name': 'public_to', 'convert_func': dateutil.parser.parse},
                     {'arg_name': 'impact', 'convert_func': parse_int_list},
                     {'arg_name': 'status_id', 'convert_func': parse_int_list},
                     {'arg_name': 'business_risk_id', 'convert_func': parse_int_list},
                     {'arg_name': 'security_rule', 'convert_func': None},
                     {'arg_name': 'rule_presence', 'convert_func': unique_bool_list}]
        args = cls._parse_arguments(kwargs, args_desc)
        list_arguments = cls._parse_list_arguments(kwargs)

        # check if system was evaluated
        try:
            system = (SystemPlatform.select(
                SystemPlatform.last_evaluation, SystemPlatform.advisor_evaluated, SystemPlatform.opt_out)
                      .join(RHAccount, on=(SystemPlatform.rh_account_id == RHAccount.id))
                      .where(SystemPlatform.inventory_id == inventory_id)
                      .where(RHAccount.name == connexion.context['user'])
                      .where(SystemPlatform.when_deleted.is_null(True))
                      .get())
        except DoesNotExist:
            raise ApplicationException('inventory_id must exist and inventory_id must be visible to user', 404)
        if system.last_evaluation is None and system.advisor_evaluated is None:
            raise ApplicationException('inventory_id exists but is not evaluated', 404)

        cves_view = SystemCvesView(list_arguments, {"rh_account_number": connexion.context['user'],
                                                    'inventory_id': inventory_id}, args, args, connexion.request.path, cls._ids_only)

        response = {}
        result = []
        if not cls._ids_only:
            for cve in cves_view:
                record = {}
                record['synopsis'] = cve['cve_name']
                record['public_date'] = cve['public_date'].isoformat() if cve['public_date'] else None
                record['impact'] = cve['impact']
                record['description'] = cve['cve_description']
                # Store everything we know about CVSS - maybe UI needs to decide what to show
                record['cvss2_score'] = str(cve['cvss2_score']) if cve['cvss2_score'] is not None else None
                record['cvss3_score'] = str(cve['cvss3_score']) if cve['cvss3_score'] is not None else None
                # Store status information
                record['cve_status_id'] = cve['cve_status_id']
                record['status_id'] = cve['status_id']
                record['status'] = cve['status_name']
                record['status_text'] = cve['status_text']
                record['cve_status_text'] = cve['cve_status_text']
                record['business_risk'] = cve['business_risk']
                record['business_risk_id'] = cve['business_risk_id']
                record['business_risk_text'] = cve['business_risk_text']
                record['reporter'] = (reporter.VMAAS.value if not cve['when_mitigated'] else 0) | (reporter.RULE.value if cve['rule_active'] else 0)
                if cve['rule_active']:
                    record['rule'] = {
                        'rule_id': cve['rule_id'],
                        'description': cve['description_text'],
                        'summary': cve['summary_text'],
                        'generic': cve['generic_text'],
                        'reboot_required': cve['reboot_required'],
                        'playbook_count': cve['playbook_count'],
                        'change_risk': cve['change_risk'],
                        'kbase_node_id': cve['kbase_node_id'],
                    }
                else:
                    record['rule'] = None

                result.append({'type': 'cve', 'id': cve['cve_name'], 'attributes': record})
        else:
            for cve in cves_view:
                result.append(cve['cve_name'])
        response['meta'] = cves_view.get_metadata()
        response['meta']['opt_out'] = system.opt_out
        response['links'] = cves_view.get_pagination_links()
        response['data'] = cls._format_data(list_arguments["data_format"], result)
        return response


class GetSystemsCvesIds(GetSystemsCves):
    """GET to /v1/systems/{inventory_id}/cves/ids"""

    _endpoint_name = r'/v1/systems/{inventory_id}/cves'
    _ids_only = True


class GetSystemDetails(GetRequest):
    """GET to /systems/{inventory_id}"""

    _endpoint_name = r'/v1/systems/{inventory_id}'

    @classmethod
    def handle_get(cls, **kwargs):
        """Get system details"""
        inventory_id = kwargs['inventory_id']
        try:
            selectables = [SystemPlatform.last_evaluation,
                           SystemPlatform.advisor_evaluated,
                           SystemPlatform.opt_out,
                           SystemPlatform.last_upload,
                           SystemPlatform.stale]
            if CYNDI_ENABLED:
                selectables.append(InventoryHosts.tags)

            query = (SystemPlatform.select(*selectables)
                     .join(RHAccount, on=(SystemPlatform.rh_account_id == RHAccount.id))
                     .where(SystemPlatform.inventory_id == inventory_id)
                     .where(RHAccount.name == connexion.context['user'])
                     .where(SystemPlatform.when_deleted.is_null(True)).dicts())
            system = cls._cyndi_query(query).get()
        except DoesNotExist:
            raise ApplicationException('inventory_id must exist and inventory_id must be visible to user', 404)
        return {'data': {'last_evaluation': system['last_evaluation'], 'rules_evaluation': system['advisor_evaluated'], 'opt_out': system['opt_out'],
                         'last_upload': system['last_upload'], 'stale': system['stale'],
                         'tags': system['tags'] if CYNDI_ENABLED and system['tags'] is not None else []}}

    @staticmethod
    def _cyndi_query(query):
        if CYNDI_ENABLED:
            query = query.join(InventoryHosts, JOIN.LEFT_OUTER, on=(SystemPlatform.inventory_id == InventoryHosts.id.cast("TEXT")))
        return query


class PatchSystemsOptOut(PatchRequest):
    """PATCH to /systems/{inventory_id}/opt_out?value={value}"""

    _endpoint_name = r'/v1/systems/{inventory_id}/opt_out'

    @classmethod
    def handle_patch(cls, **kwargs):
        """Logic of the opt out feature"""
        inventory_id = kwargs['inventory_id']
        value = kwargs['value']
        update = (SystemPlatform.update(opt_out=value)
                  .where(((RHAccount.select(RHAccount.id)
                           .where(RHAccount.name == connexion.context['user'])
                           .get()).id == SystemPlatform.rh_account_id) &
                         (SystemPlatform.inventory_id == inventory_id) &
                         (SystemPlatform.when_deleted.is_null(True))))
        rows_affected = update.execute()
        if rows_affected == 0:
            raise ApplicationException('inventory_id must exist and inventory_id must be visible to user', 404)


class PatchBulkSystemsOptOut(PatchRequest):
    """PATCH to /systems/opt_out"""

    _endpoint_name = r'/v1/systems/opt_out'

    @classmethod
    def handle_patch(cls, **kwargs):
        """Bulk/single system change of opt_out status"""

        args_desc = [
            {'arg_name': 'opt_out', 'convert_func': None},
            {'arg_name': 'inventory_id', 'convert_func': parse_str_or_list}
        ]
        args = cls._parse_arguments(kwargs['data'], args_desc)

        opt_out = args['opt_out']
        system_list = args['inventory_id']

        update = (SystemPlatform.update(opt_out=opt_out)
                  .where(((RHAccount.select(RHAccount.id)
                           .where(RHAccount.name == connexion.context['user'])
                           .get()).id == SystemPlatform.rh_account_id) &
                         (SystemPlatform.inventory_id << system_list) &
                         (SystemPlatform.when_deleted.is_null(True)))
                  .returning(SystemPlatform))
        updated = []
        for system in update.execute():
            updated.append(system.inventory_id)
        if not updated:
            raise ApplicationException('inventory_id must exist and inventory_id must be visible to user', 404)
        return {'updated': updated}


class DeleteSystem(DeleteRequest):
    """DELETE to /systems/{inventory_id}"""

    _endpoint_name = r'/v1/systems/{inventory_id}'

    @classmethod
    def _system_exists_and_visible(cls, inventory_id):
        system = (SystemPlatform.select()
                  .join(RHAccount, on=(SystemPlatform.rh_account_id == RHAccount.id))
                  .where((RHAccount.name == connexion.context['user']) &
                         (SystemPlatform.inventory_id == inventory_id)))
        if not system.exists():
            raise ApplicationException("inventory_id must exist and inventory_id must be visible to user", 404)

    @classmethod
    def handle_delete(cls, **kwargs):
        """Delete system"""
        inventory_id = kwargs['inventory_id']
        cls._system_exists_and_visible(inventory_id)
        DB.execute_sql("SELECT delete_system(%s)", (inventory_id,))
        return ""
