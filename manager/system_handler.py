"""
Module for /systems API endpoint
"""

import json
import dateutil.parser

from peewee import fn, JOIN

from common import AuthenticatedHandler, ConnectionFinished, parse_url, InvalidArgumentException
from database.peewee_model import CveMetadata, SystemPlatform, SystemVulnerabilities, CveImpact
from list_view import ListView

class SystemCvesView(ListView):
    """Database select for /systems endpoint"""
    def __init__(self, list_args, query_args, filter_args):
        query = (
            SystemVulnerabilities
            .select(CveMetadata.cve.alias('cve_name'),
                    CveMetadata.cvss3_score,
                    CveMetadata.cvss2_score,
                    CveImpact.name.alias('impact'),
                    CveMetadata.public_date,
                    CveMetadata.description.alias('cve_description'))
            .join(SystemPlatform, on=(SystemVulnerabilities.insights_id == SystemPlatform.insights_id))
            .join(CveMetadata, on=(SystemVulnerabilities.cve == CveMetadata.cve))
            .join(CveImpact, on=(CveMetadata.impact_id == CveImpact.id))
            .where(SystemPlatform.rh_account == query_args['rh_account_number'])
            .where(SystemPlatform.insights_id == query_args['insights_id'])
        )
        if 'cvss_from' in filter_args and filter_args['cvss_from']:
            query = query.where(CveMetadata.cvss3_score >= filter_args['cvss_from'])
        if 'cvss_to' in filter_args and filter_args['cvss_to']:
            query = query.where(CveMetadata.cvss3_score <= filter_args['cvss_to'])
        if 'public_from' in filter_args and filter_args['public_from']:
            query = query.where(CveMetadata.public_date >= filter_args['public_from'])
        if 'public_to' in filter_args and filter_args['public_to']:
            query = query.where(CveMetadata.public_date <= filter_args['public_to'])
        query = query.dicts()
        sortable_columns = {
            'cve' : SystemVulnerabilities.cve,
            'public_date' : CveMetadata.public_date,
            # This assumes we only show one score, and that cvss3 wins over cvss2
            'cvss_score' : CveMetadata.cvss3_score if CveMetadata.cvss3_score else CveMetadata.cvss2_score,
            'impact' : CveMetadata.impact_id
        }
        filterable_columns = {
            'cve' : SystemVulnerabilities.cve,
            'description' : CveMetadata.description
        }
        super(SystemCvesView, self).__init__(query, sortable_columns, filterable_columns, list_args)

class SystemView(ListView):
    """Database select for all systems and count of their vulnerabilities"""
    def __init__(self, list_args, query_args):
        query = (
            SystemPlatform
            .select(SystemPlatform.insights_id,
                    fn.Count(SystemVulnerabilities.insights_id).alias('cve_count'))
            .join(SystemVulnerabilities, JOIN.LEFT_OUTER,
                  on=(SystemPlatform.insights_id == SystemVulnerabilities.insights_id))
            .where(SystemPlatform.rh_account == query_args['rh_account_number'])
            .group_by(SystemPlatform.insights_id)
            .dicts()
        )
        sortable_columns = {
            'cve_count' : fn.Count(SystemVulnerabilities.insights_id),
            'insights_id' : SystemPlatform.insights_id
        }
        filterable_columns = {
            'insights_id' : SystemPlatform.insights_id
        }
        super(SystemView, self).__init__(query, sortable_columns, filterable_columns, list_args)

class SystemHandler(AuthenticatedHandler):
    """Handler for /systems endpoint"""

    def get(self): # pylint: disable=arguments-differ
        """Get CVEs for a system
           ---
           description: Get CVEs for a system
           responses:
             200:
               description: JSON containing CVEs for a systems is returuned
        """
        route = parse_url(self.request.uri, "/systems")
        if len(route) == 1 and route[0] == '':
            self.get_systems()
        elif len(route) == 2 and route[1] == 'cves':
            self.get_cves(route[0])
        else:
            self.raiseError(404)
        self.flush()

    def post(self): # pylint: disable=arguments-differ
        self.flush()

    def get_cves(self, insights_id):
        """Gets affected CVEs for a system"""
        args_desc = [{'arg_name' : 'cvss_from', 'convert_func' : float},
                     {'arg_name' : 'cvss_to', 'convert_func' : float},
                     {'arg_name' : 'public_from', 'convert_func' : dateutil.parser.parse},
                     {'arg_name' : 'public_to', 'convert_func' : dateutil.parser.parse}]
        try:
            args = self._parse_arguments(args_desc)
            list_arguments = self._parse_list_arguments()
            cves_view = SystemCvesView(list_arguments, {"rh_account_number": self.rh_account_number,
                                                        'insights_id' : insights_id}, args)
        except ConnectionFinished:
            return
        except InvalidArgumentException as exc: # pylint: disable=broad-except
            self.raiseError(400, str(exc))
            return
        response = {}
        result = []
        for cve in cves_view:
            record = {}
            record['synopsis'] = cve['cve_name']
            record['public_date'] = cve['public_date'].isoformat() if cve['public_date'] else ''
            record['impact'] = cve['impact']
            record['description'] = cve['cve_description']
            # Store everything we know about CVSS - maybe UI needs to decide what to show
            record['cvss2_score'] = str(cve['cvss2_score']) if cve['cvss2_score'] is not None else ''
            record['cvss3_score'] = str(cve['cvss3_score']) if cve['cvss3_score'] is not None else ''

            result.append({'type' : 'cve', 'id' : cve['cve_name'], 'attributes' : record})
        try:
            response['meta'] = cves_view.get_metadata()
            response['data'] = self._format_data(list_arguments["data_format"], result)
        except Exception as exc: # pylint: disable=broad-except
            self.raiseError(500, str(exc))
            return
        self.write(json.dumps(response))

    def get_systems(self):
        """Gets all systems and count of their vulnerabilities"""
        try:
            list_arguments = self._parse_list_arguments()
            system_view = SystemView(list_arguments, {"rh_account_number": self.rh_account_number})
        except InvalidArgumentException as exc:
            self.raiseError(400, str(exc))
            return
        data = []
        for system in system_view:
            record = {}
            record['attributes'] = system
            record['id'] = system['insights_id']
            record['type'] = 'system'
            data.append(record)
        response = {}
        response['data'] = self._format_data(list_arguments["data_format"], data)
        try:
            response['meta'] = system_view.get_metadata()
        except Exception as exc: # pylint: disable=broad-except
            self.raiseError(500, str(exc))
            return
        self.write(json.dumps(response))
