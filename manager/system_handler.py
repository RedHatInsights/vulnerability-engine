"""
Module for /systems API endpoint
"""

import dateutil.parser

import connexion
from peewee import Case, DoesNotExist

from common.peewee_model import CveMetadata, SystemPlatform, SystemVulnerabilities, CveImpact, Status, DB
from .base import ApplicationException, GetRequest, parse_int_list, PatchRequest, DeleteRequest
from .list_view import ListView


class SystemCvesView(ListView):
    """Database select for /systems endpoint"""

    def __init__(self, list_args, query_args, filter_args, parsed_args, uri):
        # pylint: disable=singleton-comparison
        query = (
            SystemVulnerabilities
            .select(CveMetadata.cve.alias('cve_name'),
                    CveMetadata.cvss3_score,
                    CveMetadata.cvss2_score,
                    CveImpact.name.alias('impact'),
                    CveMetadata.public_date,
                    CveMetadata.description.alias('cve_description'),
                    Status.id.alias('status_id'),
                    Status.name.alias('status_name'))
            .join(SystemPlatform, on=(SystemVulnerabilities.system_id == SystemPlatform.id))
            .join(CveMetadata, on=(SystemVulnerabilities.cve_id == CveMetadata.id))
            .join(CveImpact, on=(CveMetadata.impact_id == CveImpact.id))
            .join(Status, on=(SystemVulnerabilities.status_id == Status.id))
            .where(SystemVulnerabilities.when_mitigated.is_null(True))
            .where(SystemPlatform.rh_account == query_args['rh_account_number'])
            .where(SystemPlatform.inventory_id == query_args['inventory_id'])
            .where(SystemPlatform.opt_out == False)  # noqa: E712
        )
        if 'cvss_from' in filter_args and filter_args['cvss_from']:
            query = query.where(CveMetadata.cvss3_score >= filter_args['cvss_from'])
        if 'cvss_to' in filter_args and filter_args['cvss_to']:
            query = query.where(CveMetadata.cvss3_score <= filter_args['cvss_to'])
        if 'public_from' in filter_args and filter_args['public_from']:
            query = query.where(CveMetadata.public_date >= filter_args['public_from'])
        if 'public_to' in filter_args and filter_args['public_to']:
            query = query.where(CveMetadata.public_date <= filter_args['public_to'])
        if 'status_id' in filter_args and filter_args['status_id']:
            query = query.where(Status.id << filter_args['status_id'])
        if 'impact' in filter_args and filter_args['impact']:
            query = query.where(CveMetadata.impact_id << filter_args['impact'])
        query = query.dicts()
        sortable_columns = {
            'id': CveMetadata.id,
            'cve': CveMetadata.cve,
            'synopsis': CveMetadata.cve,
            'public_date': CveMetadata.public_date,
            # This assumes we only show one score, and that cvss3 wins over cvss2
            'cvss_score': Case(None, ((CveMetadata.cvss3_score.is_null(True), CveMetadata.cvss2_score),), \
                               CveMetadata.cvss3_score),
            "cvss3_score": CveMetadata.cvss3_score,
            "cvss2_score": CveMetadata.cvss2_score,
            'impact': CveMetadata.impact_id,
            'status': Status.id
        }
        default_sort_columns = ['id']
        filterable_columns = {
            'cve': CveMetadata.cve,
            'description': CveMetadata.description,
            'status': Status.name
        }
        super(SystemCvesView, self).__init__(query, sortable_columns, default_sort_columns,
                                             filterable_columns, list_args, parsed_args, uri)


class SystemView(ListView):
    """Database select for all systems and count of their vulnerabilities"""

    def __init__(self, list_args, query_args, filter_args, parsed_args, uri):
        # pylint: disable=singleton-comparison
        query = (
            SystemPlatform
            .select(SystemPlatform.inventory_id,
                    SystemPlatform.last_evaluation,
                    SystemPlatform.opt_out,
                    SystemPlatform.cve_count_cache.alias("cve_count"))
            .where(SystemPlatform.rh_account == query_args['rh_account_number'])
            .where(SystemPlatform.last_evaluation.is_null(False))
            .dicts()
        )
        if 'opt_out' in filter_args and filter_args['opt_out']:
            query = query.where(SystemPlatform.opt_out == filter_args['opt_out'])
        else:
            query = query.where(SystemPlatform.opt_out == False)  # noqa: E712
        sortable_columns = {
            'id': SystemPlatform.id,
            'cve_count': SystemPlatform.cve_count_cache,
            'inventory_id': SystemPlatform.inventory_id,
            'last_evaluation': SystemPlatform.last_evaluation
        }
        default_sort_columns = ['id']
        filterable_columns = {
            'inventory_id': SystemPlatform.inventory_id
        }
        super(SystemView, self).__init__(query, sortable_columns, default_sort_columns,
                                         filterable_columns, list_args, parsed_args, uri)


class GetSystems(GetRequest):
    """GET to /v1/systems"""

    _endpoint_name = r'/v1/systems'

    @classmethod
    def handle_get(cls, **kwargs):
        """Gets all systems and count of their vulnerabilities"""
        args_desc = [{'arg_name': 'opt_out', 'convert_func': None}]
        args = cls._parse_arguments(kwargs, args_desc)
        list_arguments = cls._parse_list_arguments(kwargs)
        system_view = SystemView(list_arguments, {"rh_account_number": connexion.context['user']},
                                 args, args, connexion.request.path)
        data = []
        for system in system_view:
            record = {}
            system['last_evaluation'] = system['last_evaluation'].isoformat() if system['last_evaluation'] else ''
            record['attributes'] = system
            if system['opt_out']:
                record['attributes']['cve_count'] = None
            record['id'] = system['inventory_id']
            record['type'] = 'system'
            data.append(record)
        response = {}
        response['data'] = cls._format_data(list_arguments["data_format"], data)
        response['meta'] = system_view.get_metadata()
        response['links'] = system_view.get_pagination_links()
        return response


class GetSystemsCves(GetRequest):
    """GET to /v1/systems/{inventory_id}/cves"""

    _endpoint_name = r'/v1/systems/{inventory_id}/cves'

    @classmethod
    def handle_get(cls, **kwargs):
        """Gets affected CVEs for a system"""
        inventory_id = kwargs['inventory_id']
        args_desc = [{'arg_name': 'cvss_from', 'convert_func': None},
                     {'arg_name': 'cvss_to', 'convert_func': None},
                     {'arg_name': 'public_from', 'convert_func': dateutil.parser.parse},
                     {'arg_name': 'public_to', 'convert_func': dateutil.parser.parse},
                     {'arg_name': 'impact', 'convert_func': parse_int_list},
                     {'arg_name': 'status_id', 'convert_func': parse_int_list}]
        args = cls._parse_arguments(kwargs, args_desc)
        list_arguments = cls._parse_list_arguments(kwargs)

        # check if system was evaluated
        try:
            system = (SystemPlatform.select(
                SystemPlatform.last_evaluation, SystemPlatform.opt_out)
                      .where(SystemPlatform.inventory_id == inventory_id)
                      .where(SystemPlatform.rh_account == connexion.context['user'])
                      .get())
        except DoesNotExist:
            raise ApplicationException('inventory_id must exist and inventory_id must be visible to user', 404)
        if system.last_evaluation is None:
            raise ApplicationException('inventory_id exists but is not evaluated', 404)

        cves_view = SystemCvesView(list_arguments, {"rh_account_number": connexion.context['user'],
                                                    'inventory_id': inventory_id}, args, args, connexion.request.path)

        response = {}
        result = []
        for cve in cves_view:
            record = {}
            record['synopsis'] = cve['cve_name']
            record['public_date'] = cve['public_date'].isoformat() if cve['public_date'] else ''
            record['impact'] = cve['impact']
            record['description'] = cve['cve_description']
            # Store everything we know about CVSS - maybe UI needs to decide what to show
            record['cvss2_score'] = str(cve['cvss2_score']) if cve['cvss2_score'] is not None else ''
            record['cvss3_score'] = str(cve['cvss3_score']) if cve['cvss3_score'] is not None else ''
            # Store status information
            record['status_id'] = cve['status_id']
            record['status'] = cve['status_name']

            result.append({'type': 'cve', 'id': cve['cve_name'], 'attributes': record})
        response['meta'] = cves_view.get_metadata()
        response['meta']['opt_out'] = system.opt_out
        response['links'] = cves_view.get_pagination_links()
        response['data'] = cls._format_data(list_arguments["data_format"], result)
        return response


class GetSystemDetails(GetRequest):
    """GET to /systems/{inventory_id}"""

    _endpoint_name = r'/v1/systems/{inventory_id}'

    @classmethod
    def handle_get(cls, **kwargs):
        """Get system details"""
        inventory_id = kwargs['inventory_id']
        try:
            system = (SystemPlatform.select(
                SystemPlatform.last_evaluation, SystemPlatform.opt_out)
                      .where(SystemPlatform.inventory_id == inventory_id)
                      .where(SystemPlatform.rh_account == connexion.context['user'])
                      .get())
        except DoesNotExist:
            raise ApplicationException('inventory_id must exist and inventory_id must be visible to user', 404)
        return {'data': {'last_evaluation': system.last_evaluation, 'opt_out': system.opt_out}}


class PatchSystemsOptOut(PatchRequest):
    """PATCH to /systems/{inventory_id}/opt_out?value={value}"""

    _endpoint_name = r'/v1/systems/{inventory_id}/opt_out'

    @classmethod
    def handle_patch(cls, **kwargs):
        """Logic of the opt out feature"""
        inventory_id = kwargs['inventory_id']
        value = kwargs['value']
        update = (SystemPlatform.update(opt_out=value)
                  .where((SystemPlatform.rh_account == connexion.context['user']) &
                         (SystemPlatform.inventory_id == inventory_id)))
        rows_affected = update.execute()
        if rows_affected == 0:
            raise ApplicationException('inventory_id must exist and inventory_id must be visible to user', 404)


class DeleteSystem(DeleteRequest):
    """DELETE to /systems/{inventory_id}"""

    _endpoint_name = r'/v1/systems/{inventory_id}'

    @classmethod
    def _system_exists_and_visible(cls, inventory_id):
        system = (SystemPlatform.select()
                  .where((SystemPlatform.rh_account == connexion.context['user']) &
                         (SystemPlatform.inventory_id == inventory_id)))
        if not system.exists():
            raise ApplicationException("inventory_id must exist and inventory_id must be visible to user", 404)

    @classmethod
    def handle_delete(cls, **kwargs):
        """Delete system"""
        inventory_id = kwargs['inventory_id']
        cls._system_exists_and_visible(inventory_id)
        DB.execute_sql("SELECT delete_system(%s)", (inventory_id,))
        return ""
