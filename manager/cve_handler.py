"""
Module for /cves API endpoint
"""

import json
import logging

from common import AuthenticatedHandler, parse_url, parse_get_parameters
from database.peewee_model import SystemVulnerabilities, SystemPlatform, CveMetadata, Status, \
                                  SysVulnRulesResults, VulnerabilitySource

from list_view import ListView

logging.basicConfig(level=logging.INFO)

class AffectedSystemsView(ListView):
    """Database select for /cves API endpoint"""
    def __init__(self, synopsis, list_args, query_args):

        query = (
            SystemVulnerabilities
            .select(SystemPlatform.insights_id,
                    SystemPlatform.inventory_id,
                    Status.id.alias('status_id'),
                    Status.name.alias('status_name'))
            .join(SystemPlatform, on=(SystemVulnerabilities.insights_id == SystemPlatform.insights_id))
            .join(Status, on=(SystemVulnerabilities.status_id == Status.id))
            .join(CveMetadata, on=(SystemVulnerabilities.cve == CveMetadata.cve))
            .where(CveMetadata.cve == synopsis)
            .where(SystemPlatform.rh_account == query_args['rh_account_number'])
            .dicts()
        )

        super(AffectedSystemsView, self).__init__(query, None, None, list_args)

class CVEHandler(AuthenticatedHandler):
    """Handler class returning data related to given CVE."""

    def get(self): # pylint: disable=arguments-differ, useless-super-delegation
        """
        ---
        description: Get CVEs
        responses:
          200:
            description: Handler class returning data related to given CVE.
        """
        super(CVEHandler, self).get()

    def handle_get(self):
        route = parse_url(self.request.uri, "/cves")
        params = parse_get_parameters(self.request.uri)

        if len(route) == 1:
            self.get_cve_details(route[0])
        else:
            if route[1] == "details":
                if params:
                    if 'insights_id' in params and 'rule_id' in params:
                        self.get_high_visibility_cve_details(route[0], params)
                    else:
                        self.raiseError(404, "Wrong or missing parameters for %s, detail: %s" %
                                        (route[0], str(params)), True)
                else:
                    self.get_cve_details(route[0])
            elif route[1] == "affected_systems":
                self.get_affected_systems(route[0])
            elif route[1] == "patch_steps":
                self.get_patch_steps(route[0])
            else:
                self.raiseError(404)
        self.flush()

    def handle_post(self):
        """We don't respond to POST requests"""
        raise NotImplementedError

    def get_patch_steps(self, synopsis):
        """Provide steps required to patch a CVE 'synopsis'"""

        data = self.vmaas_call("/api/v1/cves/", {"cve_list": [synopsis]})
        cve_list = data["cve_list"]
        if synopsis not in cve_list:
            self.raiseError(404, 'No such CVE synopsis', True)

        res = {}
        res['patch_steps'] = ['yum update --cve=%s' % synopsis, 'reboot']
        self.write(json.dumps(res))

    def get_cve_details(self, synopsis):
        """Gets details for a CVE by asking them from VMAAS"""
        data = self.vmaas_call("/api/v1/cves", {"cve_list": [synopsis]})
        cve_list = data["cve_list"]
        if synopsis not in cve_list:
            self.raiseError(404)
        else:
            res = {}
            res['data'] = {'attributes' : cve_list[synopsis], 'id' : synopsis, 'type' : 'cve'}
            res['meta'] = {}
            self.write(json.dumps(res))

    def get_high_visibility_cve_details(self, synopsis, params):
        """Gets details for a high-visibility CVE by asking them from Content-Server"""
        template = self.content_server_call('content', params['rule_id'][0])

        # TODO: we can combine all three request into one for performance reason
        # on the other hand it will make readability worser
        source = (
            VulnerabilitySource
            .select(VulnerabilitySource.id)
            .where(VulnerabilitySource.name == 'RULES')
        ).get()

        vuln = (
            SystemVulnerabilities
            .select(SystemVulnerabilities.id)
            .join(SystemPlatform, on=(SystemVulnerabilities.insights_id == SystemPlatform.insights_id))
            .join(CveMetadata, on=(SystemVulnerabilities.cve == CveMetadata.cve))
            .join(VulnerabilitySource, on=(SystemVulnerabilities.vulnerability_source == VulnerabilitySource.id))
            .where(CveMetadata.cve == synopsis)
            .where(SystemVulnerabilities.vulnerability_source == source.id)
            .where(SystemPlatform.rh_account == self.rh_account_number)
            .where(SystemPlatform.insights_id == params['insights_id'])
        )

        if not list(vuln):
            self.raiseError(404, 'No such CVE synopsis %s or system %s' % (synopsis, params['insights_id']), True)

        # TODO: join with ProdsecRule to match CVE and security rule name + error key
        data = (
            SysVulnRulesResults
            .select(SysVulnRulesResults.details)
            .join(SystemVulnerabilities, on=(SysVulnRulesResults.sys_vuln_id == SystemVulnerabilities.id))
            .where(SystemVulnerabilities.id == list(vuln)[0].id)
        )

        if not template or not list(data):
            self.raiseError(404, "No results from security rules engine for the CVE synopsis %s" % (synopsis), True)
        else:
            res = {}
            res['data'] = list(data)[0].details
            res['template'] = template
            self.write(json.dumps(res))

    def get_affected_systems(self, synopsis):
        """Gets systems affected by a CVE"""
        list_arguments = self._parse_list_arguments()
        asys_view = AffectedSystemsView(synopsis, list_arguments, {"rh_account_number": self.rh_account_number})

        response = {}
        result = []
        for sys in asys_view:
            record = {}
            record['insights_id'] = sys['insights_id']
            record['inventory_id'] = sys['inventory_id']
            record['status_id'] = sys['status_id']
            record['status_name'] = sys['status_name']
            result.append({'type' : 'system', 'id' : sys['insights_id'], 'attributes' : record})
        response['meta'] = asys_view.get_metadata()
        response['data'] = self._format_data(list_arguments["data_format"], result)
        self.write(json.dumps(response))
