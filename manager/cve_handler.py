"""
Module for /cves API endpoint
"""

import json

from peewee import DoesNotExist

from common.peewee_model import SystemVulnerabilities, SystemPlatform, CveMetadata, Status
from .base import AuthenticatedHandler, parse_url, parse_int_list
from .list_view import ListView

class AffectedSystemsView(ListView):
    """Database select for /cves API endpoint"""
    def __init__(self, synopsis, list_args, query_args, filter_args, uri):

        query = (
            SystemVulnerabilities
            .select(SystemPlatform.inventory_id,
                    SystemPlatform.satellite_managed,
                    SystemPlatform.last_evaluation,
                    Status.id.alias('status_id'),
                    Status.name.alias('status_name'))
            .join(SystemPlatform, on=(SystemVulnerabilities.inventory_id == SystemPlatform.inventory_id))
            .join(Status, on=(SystemVulnerabilities.status_id == Status.id))
            .join(CveMetadata, on=(SystemVulnerabilities.cve == CveMetadata.cve))
            .where(CveMetadata.cve == synopsis)
            .where(SystemPlatform.rh_account == query_args['rh_account_number'])
            .where(SystemVulnerabilities.when_mitigated.is_null(True))
            .where(SystemPlatform.opt_out == False)  # pylint: disable=singleton-comparison
        )

        if query_args['hide_satellite_managed']:
            query = query.where(SystemPlatform.satellite_managed == False)  # pylint: disable=singleton-comparison
        if 'status_id' in filter_args and filter_args['status_id']:
            query = query.where(Status.id << filter_args['status_id'])

        query = query.dicts()

        filterable_columns = {
            'inventory_id' : SystemPlatform.inventory_id
        }
        super(AffectedSystemsView, self).__init__(query, None, filterable_columns, list_args, uri)

class CVEHandler(AuthenticatedHandler):
    """Handler class returning data related to given CVE."""

    base_route = "/v1.0/cves"

    def get(self): # pylint: disable=arguments-differ, useless-super-delegation
        """
        ---
        description: Get CVEs
        responses:
          200:
            description: Handler class returning data related to given CVE.
        """
        super(CVEHandler, self).get()

    def handle_get(self):
        route = parse_url(self.request.uri, self.base_route)
        synopsis = route[0]
        self._cve_exists(synopsis)
        if len(route) == 1:
            self.get_cve_details(synopsis)
        else:
            if route[1] == "details":
                self.get_cve_details(synopsis)
            elif route[1] == "affected_systems":
                self.get_affected_systems(synopsis)
            elif route[1] == "patch_steps":
                self.get_patch_steps(synopsis)
            else:
                self.raiseError(404)
        self.flush()

    def handle_patch(self):
        """We don't respond to PATCH requests"""
        self.flush()

    def handle_post(self):
        """We don't respond to POST requests"""
        self.flush()

    def _cve_details(self, synopsis):
        data = self.vmaas_call("/api/v1/cves/", {"cve_list": [synopsis]})
        cve_list = data["cve_list"]
        if synopsis not in cve_list:
            self.raiseError(404, 'No such CVE synopsis', True)
        return cve_list[synopsis]

    def _cve_exists(self, synopsis):
        try:
            (CveMetadata.select(CveMetadata.cve)
             .where(CveMetadata.cve == synopsis)
             .get())
        except DoesNotExist:
            self.raiseError(404, 'No such CVE synopsis', True)

    def get_patch_steps(self, synopsis):
        """Provide steps required to patch a CVE 'synopsis'"""
        res = {}
        res['patch_steps'] = ['yum update --cve=%s' % synopsis, 'reboot']
        self.write(json.dumps(res))

    def get_cve_details(self, synopsis):
        """Gets details for a CVE by asking them from VMAAS"""
        res = {}
        res['data'] = {'attributes' : self._cve_details(synopsis), 'id' : synopsis, 'type' : 'cve'}
        self.write(json.dumps(res))

    def get_affected_systems(self, synopsis):
        """Gets systems affected by a CVE"""
        args_desc = [{'arg_name' : 'status_id', 'convert_func' : parse_int_list}]
        args = self._parse_arguments(args_desc)
        list_arguments = self._parse_list_arguments()
        asys_view = AffectedSystemsView(synopsis,
                                        list_arguments, {"rh_account_number": self.rh_account_number,
                                                         'hide_satellite_managed': self.hide_satellite_managed},
                                        args, self.request.uri)

        response = {}
        result = []
        for sys in asys_view:
            record = {}
            # TODO:
            # result prob can be just {'type':'system', 'id':<inventory_id>}
            record['inventory_id'] = sys['inventory_id']
            record['status_id'] = sys['status_id']
            record['status_name'] = sys['status_name']
            record['satellite_managed'] = sys['satellite_managed']
            record['last_evaluation'] = sys['last_evaluation'].isoformat() if sys['last_evaluation'] else ''
            result.append({'type' : 'system', 'id' : sys['inventory_id'], 'attributes' : record})
        response['meta'] = asys_view.get_metadata()
        response['links'] = asys_view.get_pagination_links()
        response['data'] = self._format_data(list_arguments["data_format"], result)
        self.write(json.dumps(response))

class CVEHandlerV1(CVEHandler):
    """Handler class returning data related to given CVE."""

    base_route = "/v1/cves"
