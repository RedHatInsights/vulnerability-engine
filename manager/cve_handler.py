import json

from common import AuthenticatedHandler, parse_url, vmaas_call
from database.peewee_model import SystemVulnerabilities, VulnerabilitySource, SystemPlatform, CveMetadata


class CVEHandler(AuthenticatedHandler):
    """Handler class returning data related to given CVE."""

    def get(self):
        """
        ---
        description: Get CVEs
        responses:
          200:
            description: Handler class returning data related to given CVE.
        """
        route = parse_url(self.request.uri, "/cves")
        if len(route) == 1:
            self.get_cve_details(route[0])
        else:
            if route[1] == "details":
                self.get_cve_details(route[0])
            elif route[1] == "affectedsystems":
                self.get_affected_systems(route[0])
            else:
                self.send_error(404)
        self.flush()

    def post(self):
        self.flush()

    def get_cve_details(self, synopsis):
        data = vmaas_call("/api/v1/cves", {"cve_list": [synopsis]})
        cve_list = data["cve_list"]
        if synopsis not in cve_list:
            self.send_error(404)
        else:
            self.write(json.dumps(cve_list[synopsis]))
        self.flush()

    def get_affected_systems(self, synopsis):
        query = (
            SystemVulnerabilities
            .select(SystemPlatform.platform_id,
                    SystemPlatform.display_name,
                    CveMetadata.cve,
                    CveMetadata.cvss3_score)
            .join(SystemPlatform, on=(SystemVulnerabilities.platform_id == SystemPlatform.platform_id))
            .join(CveMetadata, on=(SystemVulnerabilities.cve == CveMetadata.cve))
            .where(CveMetadata.cve == synopsis)
            .where(SystemPlatform.rh_account == self.rh_account_number)
            .dicts()
        )
        affected_systems = []
        for row in query:
            system_entry = {}
            system_entry["platform_id"] = row["platform_id"]
            system_entry["display_name"] = row["display_name"]
            system_entry["cve"] = row["cve"]
            system_entry["cvss3_score"] = str(row["cvss3_score"]) if row["cvss3_score"] else ''
            affected_systems.append(system_entry)
        self.write(json.dumps(affected_systems))
