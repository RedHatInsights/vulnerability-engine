"""
Module for /cves API endpoint
"""

import connexion
from peewee import DoesNotExist

from common.peewee_model import SystemVulnerabilities, SystemPlatform, CveMetadata, Status, RHAccount
from .base import ApplicationException, GetRequest, parse_int_list
from .list_view import ListView


class AffectedSystemsView(ListView):
    """Database select for /cves API endpoint"""

    def __init__(self, synopsis, list_args, query_args, filter_args, parsed_args, uri):
        # pylint: disable=singleton-comparison
        query = (
            SystemVulnerabilities
            .select(SystemPlatform.inventory_id,
                    SystemPlatform.last_evaluation,
                    Status.id.alias('status_id'),
                    Status.name.alias('status_name'))
            .join(SystemPlatform, on=(SystemVulnerabilities.system_id == SystemPlatform.id))
            .join(Status, on=(SystemVulnerabilities.status_id == Status.id))
            .join(CveMetadata, on=(SystemVulnerabilities.cve_id == CveMetadata.id))
            .join(RHAccount, on=(SystemPlatform.rh_account_id == RHAccount.id))
            .where(CveMetadata.cve == synopsis)
            .where(RHAccount.name == query_args['rh_account_number'])
            .where(SystemVulnerabilities.when_mitigated.is_null(True))
            .where(SystemPlatform.opt_out == False)  # noqa: E712
        )

        if 'status_id' in filter_args and filter_args['status_id']:
            query = query.where(Status.id << filter_args['status_id'])

        query = query.dicts()

        sortable_columns = {
            'id': SystemPlatform.id,
            'inventory_id': SystemPlatform.inventory_id,
            'last_evaluation': SystemPlatform.last_evaluation,
            'status': Status.id
        }
        default_sort_columns = ['id']
        filterable_columns = {
            'inventory_id': SystemPlatform.inventory_id
        }
        super(AffectedSystemsView, self).__init__(query, sortable_columns, default_sort_columns,
                                                  filterable_columns, list_args, parsed_args, uri)


class GetCves(GetRequest):
    """GET to /v1/cves/{cve_id}"""

    @classmethod
    def _cve_details(cls, synopsis):
        data = cls.vmaas_call("/api/v1/cves/", {"cve_list": [synopsis]})
        cve_list = data["cve_list"]
        if synopsis not in cve_list:
            raise ApplicationException('No such CVE ID', 404)
        return cve_list[synopsis]

    @classmethod
    def handle_get(cls, **kwargs):
        res = {}
        res['data'] = {'attributes': cls._cve_details(kwargs['cve_id']), 'id': kwargs['cve_id'], 'type': 'cve'}
        return res


class GetCvesAffectedSystems(GetRequest):
    """GET to /v1/cves/{cve_id}/affected_systems"""

    _endpoint_name = r'/v1/cves/{cve_id}/affected_systems'

    @staticmethod
    def _cve_exists(synopsis):
        try:
            (CveMetadata.select(CveMetadata.cve)
             .where(CveMetadata.cve == synopsis)
             .get())
        except DoesNotExist:
            raise ApplicationException('No such CVE ID', 404)

    @classmethod
    def handle_get(cls, **kwargs):
        """Gets systems affected by a CVE"""
        synopsis = kwargs['cve_id']
        cls._cve_exists(synopsis)
        args_desc = [{'arg_name': 'status_id', 'convert_func': parse_int_list}]
        args = cls._parse_arguments(kwargs, args_desc)
        list_arguments = cls._parse_list_arguments(kwargs)
        asys_view = AffectedSystemsView(synopsis,
                                        list_arguments, {"rh_account_number": connexion.context['user']},
                                        args, args, connexion.request.path)

        response = {}
        result = []
        for sys in asys_view:
            record = {}
            # TODO:
            # result prob can be just {'type':'system', 'id':<inventory_id>}
            record['inventory_id'] = sys['inventory_id']
            record['status_id'] = sys['status_id']
            record['status_name'] = sys['status_name']
            record['last_evaluation'] = sys['last_evaluation'].isoformat() if sys['last_evaluation'] else ''
            result.append({'type': 'system', 'id': sys['inventory_id'], 'attributes': record})
        response['meta'] = asys_view.get_metadata()
        response['links'] = asys_view.get_pagination_links()
        response['data'] = cls._format_data(list_arguments["data_format"], result)
        return response
