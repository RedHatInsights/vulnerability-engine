import json

from common import AuthenticatedHandler, parse_url, vmaas_call, InvalidArgumentException
from database.peewee_model import SystemVulnerabilities, VulnerabilitySource, SystemPlatform, CveMetadata
from list_view import ListView

class AffectedSystemsView(ListView):
    def __init__(self, synopsis, list_args, query_args):

        query = (
            SystemVulnerabilities
            .select(SystemPlatform.platform_id)
            .join(SystemPlatform, on=(SystemVulnerabilities.platform_id == SystemPlatform.platform_id))
            .join(CveMetadata, on=(SystemVulnerabilities.cve == CveMetadata.cve))
            .where(CveMetadata.cve == synopsis)
            .where(SystemPlatform.rh_account == query_args['rh_account_number'])
            .dicts()
        )

        super(AffectedSystemsView, self).__init__(query, None, None, list_args)

class CVEHandler(AuthenticatedHandler):
    """Handler class returning data related to given CVE."""

    def get(self):
        """
        ---
        description: Get CVEs
        responses:
          200:
            description: Handler class returning data related to given CVE.
        """
        route = parse_url(self.request.uri, "/cves")
        if len(route) == 1:
            self.get_cve_details(route[0])
        else:
            if route[1] == "details":
                self.get_cve_details(route[0])
            elif route[1] == "affectedsystems":
                self.get_affected_systems(route[0])
            else:
                self.send_error(404)
        self.flush()

    def post(self):
        self.flush()

    def get_cve_details(self, synopsis):
        data = vmaas_call("/api/v1/cves", {"cve_list": [synopsis]})
        cve_list = data["cve_list"]
        if synopsis not in cve_list:
            self.send_error(404)
        else:
            self.write(json.dumps(cve_list[synopsis]))

    def get_affected_systems(self, synopsis):
        try:
            asys_view = AffectedSystemsView(synopsis, self._parse_list_arguments(), {"rh_account_number": self.rh_account_number})
        except InvalidArgumentException as e:
            self.raiseError(400, str(e))
            return

        response = {}
        result = []
        for sys in asys_view:
            record = {}
            record['platform_id'] = sys['platform_id']
            result.append({'type' : 'system', 'id' : sys['platform_id'], 'attributes' : record})
        try:
            response['meta'] = asys_view.get_metadata()
            response['data'] = result
        except Exception as e:
            self.raiseError(500, str(e))
            return
        self.write(json.dumps(response))
