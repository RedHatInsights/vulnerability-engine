#!/usr/bin/python3

import json

from common import BaseHandler, parse_url, vmaas_call
from database.database_handler import DatabaseHandler


class CVEHandler(BaseHandler):
    """Handler class returning data related to given CVE."""

    def get(self):
        route = parse_url(self.request.uri, "/cves")
        if len(route) == 1:
            self.get_cve_details(route[0])
        else:
            if route[1] == "details":
                self.get_cve_details(route[0])
            elif route[1] == "affectedsystems":
                self.get_affected_systems(route[0])
            else:
                self.send_error(404)
        self.flush()

    def post(self):
        self.flush()

    def get_cve_details(self, synopsis):
        data = vmaas_call("/api/v1/cves", {"cve_list": [synopsis]})
        cve_list = data["cve_list"]
        if synopsis not in cve_list:
            self.send_error(404)
        else:
            self.write(json.dumps(cve_list[synopsis]))
        self.flush()

    def get_affected_systems(self, synopsis):
        self.conn = DatabaseHandler.get_connection()
        cur = self.conn.cursor()
        cur.execute(
            "SELECT s.platform_id, s.display_name, v.cve, m.cvss3_score \
            FROM system_vulnerabilities v \
            JOIN system_platform s ON v.platform_id = s.platform_id \
            JOIN cve_metadata m ON v.cve = m.cve \
            WHERE v.cve = %s", (synopsis,))
        affected_systems = []
        for system in cur.fetchall():
            system_entry = {}
            system_entry["platform_id"] = system[0]
            system_entry["display_name"] = system[1]
            system_entry["cve"] = system[2]
            system_entry["cvss3_score"] = float(system[3])
            affected_systems.append(system_entry)
        self.write(json.dumps(affected_systems))
