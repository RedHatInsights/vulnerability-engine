"""
Module for /vulnerabilities API endpoint
"""

import dateutil.parser

import connexion
from peewee import Case, fn, JOIN, SQL

from common.peewee_model import CveAffectedSystemsCache, CveMetadata, CveImpact
from .base import parse_int_list, GetRequest
from .list_view import ListView


class CvesListView(ListView):
    """Database select for CVEs affecting user systems"""

    def __init__(self, list_args, query_args, uri, args={}):  # pylint: disable=dangerous-default-value
        join_type = JOIN.INNER
        cve_count = CveAffectedSystemsCache.systems_affected
        if query_args['hide_satellite_managed']:
            cve_count = CveAffectedSystemsCache.direct_systems_affected
        if 'show_all' in args and args['show_all']:
            join_type = JOIN.RIGHT_OUTER
            cve_count = fn.COALESCE(cve_count, 0)
        query = (
            CveAffectedSystemsCache
            .select(cve_count.alias("systems_affected"),
                    CveMetadata.cve.alias("cve_name"),
                    CveMetadata.cvss3_score,
                    CveMetadata.cvss2_score,
                    CveMetadata.impact_id,
                    CveMetadata.public_date,
                    CveMetadata.description.alias("cve_description"))
            .join(CveMetadata, join_type,
                  on=((CveAffectedSystemsCache.cve == CveMetadata.cve)
                      & (CveAffectedSystemsCache.rh_account == query_args["rh_account_number"])))
        )
        if query_args['hide_satellite_managed'] and not ('show_all' in args and args['show_all']):
            query = query.where(CveAffectedSystemsCache.direct_systems_affected > 0)
        if 'cvss_from' in args and args['cvss_from']:
            query = query.where(CveMetadata.cvss3_score >= args['cvss_from'])
        if 'cvss_to' in args and args['cvss_to']:
            query = query.where(CveMetadata.cvss3_score <= args['cvss_to'])
        if 'public_from' in args and args['public_from']:
            query = query.where(CveMetadata.public_date >= args['public_from'])
        if 'public_to' in args and args['public_to']:
            query = query.where(CveMetadata.public_date <= args['public_to'])
        if 'severity' in args and args['severity']:
            query = query.where(CveMetadata.impact_id << args['severity'])
        query = query.dicts()
        sortable_columns = {
            "systems_affected": SQL('systems_affected'),
            "synopsis": CveMetadata.cve,
            "public_date": CveMetadata.public_date,
            # This assumes we only show one score, and that cvss3 wins over cvss2
            "cvss_score": Case(None, ((CveMetadata.cvss3_score.is_null(True), CveMetadata.cvss2_score),), \
                               CveMetadata.cvss3_score),
            "cvss3_score": CveMetadata.cvss3_score,
            "cvss2_score": CveMetadata.cvss2_score,
            "impact": CveMetadata.impact_id
        }
        filterable_columns = {
            "synopsis": CveMetadata.cve,
            "description": CveMetadata.description
        }
        super(CvesListView, self).__init__(query, sortable_columns, filterable_columns, list_args, args, uri)


def _prepare_impact_id_map():
    impact_id_map = {}
    for row in CveImpact.select().dicts():
        impact_id_map[row['id']] = row['name']
    return impact_id_map


def assign_cves(cves_view):
    """Provides CVE details"""
    result = []
    impact_id_map = _prepare_impact_id_map()
    for row in cves_view:
        entry = dict()
        res = {}
        entry["systems_affected"] = row["systems_affected"]
        entry["synopsis"] = row["cve_name"]
        entry["public_date"] = row["public_date"].isoformat() if row["public_date"] else ''
        entry["impact"] = impact_id_map[row["impact_id"]]
        entry["description"] = row["cve_description"]
        # Store everything we know about CVSS - maybe UI needs to decide what to show
        entry["cvss2_score"] = str(row["cvss2_score"]) if row['cvss2_score'] is not None else ''
        entry["cvss3_score"] = str(row["cvss3_score"]) if row['cvss3_score'] is not None else ''
        res["type"] = "cve"
        res["id"] = row["cve_name"]
        res["attributes"] = entry
        result.append(res)
    return result


class GetCves(GetRequest):
    """GET to /v1/vulnerabilites/cves"""

    _endpoint_name = r'/v1/vulnerabilities/cves'

    @classmethod
    def handle_get(cls, **kwargs):
        """Grabs all CVEs user is affected by"""
        args_desc = [{'arg_name': 'cvss_from', 'convert_func': None},
                     {'arg_name': 'cvss_to', 'convert_func': None},
                     {'arg_name': 'public_from', 'convert_func': dateutil.parser.parse},
                     {'arg_name': 'public_to', 'convert_func': dateutil.parser.parse},
                     {'arg_name': 'show_all', 'convert_func': None},
                     {'arg_name': 'severity', 'convert_func': parse_int_list}]
        args = cls._parse_arguments(kwargs, args_desc)
        list_arguments = cls._parse_list_arguments(kwargs)
        cves_view = CvesListView(list_arguments, {"rh_account_number": connexion.context['user'],
                                                  'hide_satellite_managed': cls.hide_satellite_managed()},
                                 connexion.request.path, args)
        res = {}
        res["meta"] = cves_view.get_metadata()
        res["links"] = cves_view.get_pagination_links()
        res["data"] = cls._format_data(list_arguments["data_format"], assign_cves(cves_view))
        return res
