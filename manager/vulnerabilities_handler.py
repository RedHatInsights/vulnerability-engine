"""
Module for /vulnerabilities API endpoint
"""

import json
from distutils.util import strtobool # pylint: disable=import-error, no-name-in-module
import dateutil.parser

from peewee import Case, JOIN

from common.peewee_model import CveAffectedSystemsCache, CveMetadata, CveImpact
from .base import AuthenticatedHandler, none2empty
from .list_view import ListView


class CvesListView(ListView):
    """Database select for CVEs affecting user systems"""
    def __init__(self, list_args, query_args, uri, args={}): # pylint: disable=dangerous-default-value
        join_type = JOIN.INNER
        if 'show_all' in args and args['show_all']:
            join_type = JOIN.RIGHT_OUTER
        cve_count = CveAffectedSystemsCache.systems_affected
        if query_args['hide_satellite_managed']:
            cve_count = CveAffectedSystemsCache.direct_systems_affected
        query = (
            CveAffectedSystemsCache
            .select(cve_count.alias("systems_affected"),
                    CveMetadata.cve.alias("cve_name"),
                    CveMetadata.cvss3_score,
                    CveMetadata.cvss2_score,
                    CveMetadata.impact_id,
                    CveMetadata.public_date,
                    CveMetadata.description.alias("cve_description"))
            .join(CveMetadata, join_type,
                  on=((CveAffectedSystemsCache.cve == CveMetadata.cve)
                      & (CveAffectedSystemsCache.rh_account == query_args["rh_account_number"])))
        )
        if query_args['hide_satellite_managed']:
            query = query.where(CveAffectedSystemsCache.direct_systems_affected > 0)
        if 'cvss_from' in args and args['cvss_from']:
            query = query.where(CveMetadata.cvss3_score >= args['cvss_from'])
        if 'cvss_to' in args and args['cvss_to']:
            query = query.where(CveMetadata.cvss3_score <= args['cvss_to'])
        if 'public_from' in args and args['public_from']:
            query = query.where(CveMetadata.public_date >= args['public_from'])
        if 'public_to' in args and args['public_to']:
            query = query.where(CveMetadata.public_date <= args['public_to'])
        query = query.dicts()
        sortable_columns = {
            "systems_affected": CveAffectedSystemsCache.systems_affected,
            "synopsis": CveMetadata.cve,
            "public_date": CveMetadata.public_date,
            # This assumes we only show one score, and that cvss3 wins over cvss2
            "cvss_score": Case(None, ((CveMetadata.cvss3_score.is_null(True), CveMetadata.cvss2_score),), \
                               CveMetadata.cvss3_score),
            "cvss3_score" : CveMetadata.cvss3_score,
            "cvss2_score" : CveMetadata.cvss2_score,
            "impact": CveMetadata.impact_id
        }
        filterable_columns = {
            "synopsis": CveMetadata.cve,
            "description": CveMetadata.description
        }
        super(CvesListView, self).__init__(query, sortable_columns, filterable_columns, list_args, uri)


class VulnerabilitiesHandler(AuthenticatedHandler):
    """Handler class returning data related to vulnerabilities."""

    def __init__(self, application, request, **kwargs):
        self.arguments = None
        super(VulnerabilitiesHandler, self).__init__(application, request, **kwargs)

    def prepare(self):
        super(VulnerabilitiesHandler, self).prepare()
        self.arguments = dict()
        for key in self.request.arguments.keys():
            self.arguments[key] = self.get_argument(key, None)

    def get(self): # pylint: disable=arguments-differ, useless-super-delegation
        """
        ---
        description: Get Vulnerabilities
        responses:
          200:
            description: Handler class returning data related to vulnerabilities.
        """
        super(VulnerabilitiesHandler, self).get()

    def handle_get(self):
        self.get_cves()
        self.flush()

    def handle_patch(self):
        """We don't respond to PATCH requests"""
        self.flush()

    def handle_post(self):
        """We don't respond to POST requests"""
        self.flush()

    def _prepare_impact_id_map(self): # pylint: disable=no-self-use
        impact_id_map = {}
        for row in CveImpact.select().dicts():
            impact_id_map[row['id']] = row['name']
        return impact_id_map

    def get_cves(self):
        """Grabs all CVEs user is affected by"""
        args_desc = [{'arg_name' : 'cvss_from', 'convert_func' : float},
                     {'arg_name' : 'cvss_to', 'convert_func' : float},
                     {'arg_name' : 'public_from', 'convert_func' : dateutil.parser.parse},
                     {'arg_name' : 'public_to', 'convert_func' : dateutil.parser.parse},
                     {'arg_name' : 'show_all', 'convert_func' : strtobool}]
        args = self._parse_arguments(args_desc)
        list_arguments = self._parse_list_arguments()
        cves_view = CvesListView(list_arguments, {"rh_account_number": self.rh_account_number,
                                                  'hide_satellite_managed': self.hide_satellite_managed},
                                 self.request.uri, args)
        res = {}
        res["meta"] = cves_view.get_metadata()
        res["links"] = cves_view.get_pagination_links()
        res["meta"]["show_all"] = 'true' if args['show_all'] else 'false'
        res["meta"]["cvss_from"] = none2empty(args['cvss_from'])
        res["meta"]["cvss_to"] = none2empty(args['cvss_to'])
        res["meta"]["public_from"] = args['public_from'].isoformat() if args['public_from'] else ''
        res["meta"]["public_to"] = args['public_to'].isoformat() if args['public_to'] else ''
        res["data"] = self._format_data(list_arguments["data_format"], self.assign_cves(cves_view))
        self.write(json.dumps(res))

    def assign_cves(self, cves_view): # pylint: disable=no-self-use
        """Provides CVE details"""
        result = []
        impact_id_map = self._prepare_impact_id_map()
        for row in cves_view:
            entry = dict()
            res = {}
            entry["systems_affected"] = row["systems_affected"]
            entry["synopsis"] = row["cve_name"]
            entry["public_date"] = row["public_date"].isoformat() if row["public_date"] else ''
            entry["impact"] = impact_id_map[row["impact_id"]]
            entry["description"] = row["cve_description"]
            # Store everything we know about CVSS - maybe UI needs to decide what to show
            entry["cvss2_score"] = str(row["cvss2_score"]) if row['cvss2_score'] is not None else ''
            entry["cvss3_score"] = str(row["cvss3_score"]) if row['cvss3_score'] is not None else ''
            res["type"] = "cve"
            res["id"] = row["cve_name"]
            res["attributes"] = entry
            result.append(res)
        return result
