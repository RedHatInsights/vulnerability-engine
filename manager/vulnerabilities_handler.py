import json
from random import randint

from peewee import fn

from common import AuthenticatedHandler, parse_url, InvalidArgumentException
from database.peewee_model import SystemVulnerabilities, VulnerabilitySource, SystemPlatform, CveMetadata
from list_view import ListView


class CvesListView(ListView):
    def __init__(self, list_args, query_args):
        query = (
            SystemVulnerabilities
            .select(fn.Count(SystemVulnerabilities.cve).alias("system_count"),
                    CveMetadata.cve.alias("cve_name"),
                    fn.Min(VulnerabilitySource.name).alias("source_name"),
                    CveMetadata.cvss3_score,
                    CveMetadata.impact,
                    CveMetadata.public_date,
                    CveMetadata.description.alias("cve_description"))
            .join(SystemPlatform, on=(SystemVulnerabilities.platform_id == SystemPlatform.platform_id))
            .join(VulnerabilitySource, on=(SystemVulnerabilities.vulnerability_source == VulnerabilitySource.id))
            .join(CveMetadata, on=(SystemVulnerabilities.cve == CveMetadata.cve))
            .where(SystemPlatform.rh_account == query_args["rh_account_number"])
            .group_by(CveMetadata.cve, VulnerabilitySource.name, CveMetadata.cvss3_score, CveMetadata.impact,
                      CveMetadata.public_date, CveMetadata.description)
            .dicts()
        )
        sortable_columns = {
            "systems_affected": fn.Count(SystemVulnerabilities.cve),
            "synopsis": CveMetadata.cve,
            "celebrity": VulnerabilitySource.name,
            "public_date": CveMetadata.public_date,
            "cvss_score": CveMetadata.cvss3_score,
            "impact": CveMetadata.impact
        }
        filterable_columns = {
            "synopsis": CveMetadata.cve,
            "description": CveMetadata.description
        }
        super(CvesListView, self).__init__(query, sortable_columns, filterable_columns, list_args)


class VulnerabilitiesHandler(AuthenticatedHandler):
    """Handler class returning data related to vulnerabilities."""

    def prepare(self):
        super(VulnerabilitiesHandler, self).prepare()
        self.arguments = dict()
        for key in self.request.arguments.keys():
            self.arguments[key] = self.get_argument(key, None)

    def get(self):
        """
        ---
        description: Get Vulnerabilities
        responses:
          200:
            description: Handler class returning data related to vulnerabilities.
        """
        route = parse_url(self.request.uri, "/vulnerabilities")
        if len(route) == 1:
            if route[0] == "impacts":
                self.get_impacts()
            elif route[0] == "changes":
                self.get_changes()
            elif route[0] == "cves":
                self.get_cves()
            elif route[0] == "errorkeys":
                self.get_error_keys()
        else:
            self.raiseError(404)
        self.flush()

    def post(self):
        self.flush()

    # TODO: Needs to be tested, reduced and add error handling
    def get_impacts(self):
        cves = self.assign_cves()
        important = moderate = critical = low = 0
        for cve in cves:
            impact = cve["impact"]
            if impact in ["Important", "High"]:
                important = important + 1
            if impact in ["Moderate", "Medium"]:
                moderate = moderate + 1
            if impact in ["Critical"]:
                critical = critical + 1
            if impact in ["Low"]:
                low = low + 1
        result = dict()
        result["Important"] = important
        result["Moderate"] = moderate
        result["Critical"] = critical
        result["Low"] = low
        self.write(json.dumps(result))

    # TODO: This is just a skeleton
    def get_changes(self):
        result = dict()
        new_vulnerabilities = {"count": 5, "percentage": 9, "direction": "up"}
        remediated = {"count": 21, "percentage": 50, "direction": "down"}
        newly_affected = {"count": 2, "percentage": 3, "direction": "up"}
        result["since"] = self.arguments.get("since", None)
        result["new_vulnerabilities"] = new_vulnerabilities
        result["remediated"] = remediated
        result["newly_affected"] = newly_affected
        self.write(json.dumps(result))

    # TODO: Needs to be tested, reduced and add error handling
    def get_cves(self):
        try:
            cves_view = CvesListView(self._parse_list_arguments(), {"rh_account_number": self.rh_account_number})
        except InvalidArgumentException as e:
            self.raiseError(400, str(e))
            return
        res = {}
        try:
            cves = self.assign_cves(cves_view)
            res["meta"] = cves_view.get_metadata()
            res["data"] = cves
        except Exception as e:
            self.raiseError(500, str(e))
            return
        self.write(json.dumps(res))

    # TODO: Needs to be tested, reduced and add error handling
    def assign_cves(self, cves_view):
        result = []
        for row in cves_view:
            entry = dict()
            res = {}
            entry["systems_affected"] = row["system_count"]
            entry["celebrity"] = True if row["source_name"] == "RULES" else False
            entry["synopsis"] = row["cve_name"]
            entry["public_date"] = row["public_date"].isoformat()
            entry["impact"] = row["impact"]
            entry["description"] = row["cve_description"]
            entry["cvss_score"] = str(row["cvss3_score"])
            res["type"] = "cve"
            res["id"] = row["cve_name"]
            res["attributes"] = entry
            result.append(res)
        return result

    # TODO: Needs to be tested, reduced and add error handling
    # TODO: Pagination, etc
    def get_error_keys(self):
        res = {}
        try:
            error_keys = self.assign_error_keys()
            # See JSON API spec
            pagination_links = {"first": "http://...", "last": "http://...",
                                "prev": "http://...", "next": "http://..."}
            # Basically all interesting info about this API/Filters/Sorts/Limits..., example
            res["meta"] = {"page": 1, "per_page": 10,
                           "total": 150, "pages": 10, "sorted_by": "synopsis"}

            res["data"] = error_keys
            res["links"] = pagination_links
        except Exception as e:
            self.set_status(666)
            res["errors"] = str(e)
            self.finish(res)
            return
        self.write(json.dumps(res))
    
    # TODO: Needs to be tested, reduced and add error handling
    def assign_error_keys(self):
        result = []
        self.conn = DatabaseHandler.get_connection()
        cur = self.conn.cursor()
        cur.execute(
            "SELECT DISTINCT COUNT(sek.platform_id), ek.name \
            FROM system_prodsec_error_key sek \
            JOIN system_platform sp ON sek.platform_id = sp.platform_id \
            JOIN prodsec_error_key ek ON sek.error_key_id = ek.id \
            WHERE sp.rh_account = %s \
            GROUP BY ek.name", (self.rh_account_number,)
        )
        ek_meta = cur.fetchall()
        for ek in ek_meta:
            entry = dict()
            res = {}
            res["type"] = "error_key"
            res["id"] = ek[1]
            res["attributes"] = {"systems_affected": ek[0]}
            result.append(res)
        return result
