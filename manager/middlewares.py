"""
Custom middlewares for connexion/starlette.
"""
import json

from starlette.datastructures import MutableHeaders

from common.logging import get_logger

LOGGER = get_logger(__name__)


class ErrorHandlerMiddleware:
    """Middleware to wrap error message into a list if it's not already (errors coming from framework)."""
    def __init__(self, app):
        self.app = app

    async def __call__(self, scope, receive, send):
        if scope["type"] != "http":
            await self.app(scope, receive, send)
            return

        start_message = {}

        async def send_with_formatted_error(message):
            nonlocal start_message
            if message["type"] == "http.response.start":
                start_message = message
                if start_message["status"] >= 400:
                    headers = MutableHeaders(raw=start_message["headers"])
                    del headers["Content-Length"]
                await send(start_message)
            elif message["type"] == "http.response.body":
                if start_message["status"] >= 400 and message["body"]:
                    try:
                        err = json.loads(message["body"].decode("utf-8"))
                    except json.JSONDecodeError:
                        LOGGER.warning("Expected JSON error message: %s", message["body"].decode("utf-8"))
                    else:
                        if "errors" not in err and "detail" in err and "status" in err:
                            message["body"] = json.dumps({"errors": [{"detail": err["detail"], "status": str(err["status"])}]}).encode("utf-8")
                await send(message)

        await self.app(scope, receive, send_with_formatted_error)
