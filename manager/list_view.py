"""
Module for sorting/pagination/filering in API
"""

import math

from common import InvalidArgumentException


class ListView:
    """Base class implementing sorting/pagination/filering"""
    def __init__(self, query, sortable_columns, filterable_columns, list_args):
        self.query = query
        self.sortable_columns = sortable_columns
        self.filterable_columns = filterable_columns
        self._apply_args(list_args)

    def _apply_args(self, args): # pylint: disable=R0912
        if args["filter"]:
            if not self.filterable_columns:
                raise InvalidArgumentException("No availabe columns for filtering")
            expressions = None
            for column in self.filterable_columns.values():
                if expressions is None:
                    expressions = column.contains(args["filter"])
                else:
                    expressions |= column.contains(args["filter"])
            self.query = self.query.where(expressions)
        self.active_filter = args["filter"]

        sort_column_names = []
        if args["sort"]:
            if not  self.sortable_columns:
                raise InvalidArgumentException("No availabe columns for sorting")
            input_sort_columns = args["sort"].split(",")
            sort_columns = []
            for column_name in input_sort_columns:
                desc = False
                if column_name.startswith("-"):
                    desc = True
                    column_name = column_name[1:]
                elif column_name.startswith("+"):
                    column_name = column_name[1:]
                column = self.sortable_columns.get(column_name, None)
                if column:
                    if desc:
                        sort_column_names.append("-%s" % column_name)
                        sort_columns.append(column.desc(nulls='LAST'))
                    else:
                        sort_column_names.append("+%s" % column_name)
                        sort_columns.append(column.asc())
                else:
                    raise InvalidArgumentException("Invalid sort column: %s" % column_name)
            if sort_columns:
                self.query = self.query.order_by(*sort_columns)
        self.active_sort = ",".join(sort_column_names)

        self.page = args["page"]
        self.page_size = args["page_size"]

        self.total_items = self.query.count()
        pages = math.ceil(self.total_items / self.page_size)
        self.pages = pages if pages > 0 else 1
        if self.page > self.pages:
            raise InvalidArgumentException("Requested page out of range: %s" % self.page)

    def get_metadata(self):
        """Returns pagination/filering/sorting related metadata"""
        return {
            "page": self.page,
            "page_size": self.page_size,
            "total_items": self.total_items,
            "pages": self.pages,
            "sort": self.active_sort,
            "filter": self.active_filter
        }

    def __iter__(self):
        return self.query.paginate(self.page, self.page_size).__iter__()
