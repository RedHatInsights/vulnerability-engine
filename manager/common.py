
import base64
import json
import logging
from http.client import responses
from os import environ

import requests

import tornado
from tornado.web import RequestHandler

VMAAS_URL = "https://webapp-vmaas-stable.1b13.insights.openshiftapps.com"
DEFAULT_ROUTE = "%s/%s/%s" % (environ.get('PATH_PREFIX', "/r/insights/platform"),
                              environ.get('APP_NAME', "vulnerability"),
                              environ.get('API_VERSION', "v1"))
IDENTITY_HEADER = "x-rh-identity"

logging.basicConfig(level=logging.INFO)

logging.info("Access URL: %s" % DEFAULT_ROUTE)


class BaseHandler(RequestHandler):

    def set_default_headers(self):
        self.set_header("Access-Control-Allow-Origin", "*")
        self.set_header("Access-Control-Allow-Headers",
                        "Content-Type, Access-Control-Allow-Headers, \
                        Authorization, X-Requested-With")
        self.set_header('Access-Control-Allow-Methods', 'POST, GET, OPTIONS')

    def options(self):
        self.set_status(204)
        self.finish()

    def get_user_locale(self):
        return self.my_user_locale


class AuthenticatedHandler(BaseHandler):
    def prepare(self):
        logging.debug("Received request")
        if 'x-rh-identity' not in self.request.headers:
            self.raiseError(403)
            return

        encoded_value = self.request.headers[IDENTITY_HEADER]
        decoded_value = base64.b64decode(encoded_value).decode("utf-8")
        logging.debug('identity decoded: %s' % decoded_value)
        identity = json.loads(decoded_value)
        if 'identity' in identity:
            id_details = identity['identity']
        else:
            self.raiseError(403)
            return

        if 'account_number' in id_details:
            self.rh_account_number = id_details['account_number']
            logging.debug('identity rh_account_number: %s' %
                          self.rh_account_number)
        else:
            self.raiseError(403)
            return

        if 'username' in id_details:
            self.current_user = id_details['username']
            logging.debug('identity username: %s' % self.current_user)
        else:
            self.raiseError(403)
            return

        if 'locale' in id_details:
            logging.debug('identity locale: %s' % id_details['locale'])
            self.my_user_locale = tornado.locale.get(id_details['locale'])

    def raiseError(self, code, text=None):
        text = text if text else responses[code]
        self.set_status(code)
        res = {"errors": {"code": code, "message": text}}
        self.finish(res)
        return


class NotFoundHandler(AuthenticatedHandler):
    def prepare(self):
        self.raiseError(404)


def vmaas_call(endpoint, data):
    headers = {'Content-type': 'application/json',
               'Accept': 'application/json'}
    response = requests.post(VMAAS_URL + endpoint,
                             data=json.dumps(data), headers=headers)
    return response.json()


def parse_url(uri, base_handler):
    uri = uri.split('?')[0]
    prefix = DEFAULT_ROUTE + base_handler
    if not prefix.endswith("/"):
        prefix = prefix + "/"
    if uri.endswith("/"):
        uri = uri[:-1]
    request_url = uri[len(prefix):]

    return request_url.split("/")
